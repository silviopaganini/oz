// Generated by CoffeeScript 1.4.0
(function() {
  var Abstract, AbstractButton, AbstractChapter, AbstractScene, Analytics, AppView, AssetLoader, Base3DChapter, BaseAssets, BaseLandingOpenings, BatchLoadModel, BrowserDetection, Canvas, Carnival, Carnival2, Carnival3, CheckBox, Circle, CollectionBatchLoad, CollectionSpriteSheets, CollectionTemplates, Controller, Copyright, Credits, Cutout, CutoutCanvas, CutoutPolaroid, ElasticNumber, Filter, Final, Footer, IFLAutomaticPerformanceAdjust, IFLBasicShader, IFLBasicShaderDoubleLightmap, IFLCameraPathInteraction, IFLCloudsShader, IFLColorCorrectionShader, IFLDandelionParticlesShader, IFLHotspotManager, IFLLoader, IFLMaterialManager, IFLModelManager, IFLNoiseShader, IFLOzifyParticleSystem, IFLPhongFresnelShader, IFLPhongFresnelShaderDoubleLightMap, IFLSal2x, IFLSkyCubeShader, IFLStormFresnelShader, IFLTerrainLambertShader, IFLTornadoShader, IFLTornadoShaderWin, IFLWindGenerator, IFLWindyParticlesShader, Instructions, InstructionsChapter, LandingAgree, LandingFinal, LandingPause, Loading, LoadingCard, Locale, LocaleModel, LocalisedTexture, Logo, LogoParticles, MainMenu, Map, MapMenu, MathUtils, MenuFilledCircle, MenuSeparator, MusicBox, MusicBoxGrid, MusicBoxSequencer, MusicBoxTable, MusicButtons, OpeningTitles, Particle, ParticleCard, Particles, Payoff, PlayPause, PreloaderEvents, QueryString, RainDrops, Ratings, Requester, Router, SSAsset, Share, ShareBox, ShareMenu, ShareScene, SimpleButton, Slider, SoundController, SpriteSheetModel, StaticOverlay, Storm, StormInstructions, Stormtest, SubLoader, TemplateModel, Templates, ThumbCutout, VideoPlayer, WebCam, Wrapper, Zoetrope, ZoetropeCountDown, ZoetropeMakeMovie, ZoetropePlayer, ZoetropeReplaceLabel, ZoetropeThumb, ZoetropeTimeline, ZoetropeWebcamFeed,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  IFLBasicShader = (function() {

    IFLBasicShader.prototype.uniforms = null;

    function IFLBasicShader() {
      this.uniforms = THREE.UniformsUtils.merge([
        THREE.UniformsLib["common"], THREE.UniformsLib["fog"], {
          "diffuseMultiplier": {
            type: "f",
            value: 1
          },
          "lightMapMultiplier": {
            type: "f",
            value: 1
          },
          "additiveLightMap": {
            type: "i",
            value: 0
          },
          "windMin": {
            type: "v2",
            value: new THREE.Vector2(-400, -800)
          },
          "windSize": {
            type: "v2",
            value: new THREE.Vector2(1000, 1000)
          },
          "windDirection": {
            type: "v3",
            value: new THREE.Vector3(1, 0, 0)
          },
          "tWindForce": {
            type: "t",
            value: null
          },
          "windScale": {
            type: "f",
            value: 1.0
          }
        }
      ]);
    }

    IFLBasicShader.prototype.vertexShader = [THREE.ShaderChunk["map_pars_vertex"], THREE.ShaderChunk["lightmap_pars_vertex"], THREE.ShaderChunk["color_pars_vertex"], "#ifdef USE_COLOR", "#ifdef VERTEX_TEXTURES", "uniform vec2 windMin;", "uniform vec2 windSize;", "uniform vec3 windDirection;", "uniform sampler2D tWindForce;", "uniform float windScale;", "#endif", "#endif", "void main() {", THREE.ShaderChunk["map_vertex"], THREE.ShaderChunk["lightmap_vertex"], THREE.ShaderChunk["color_vertex"], "vec4 mvPosition;", "#ifdef USE_COLOR", "#ifdef VERTEX_TEXTURES", "vec4 wpos = modelMatrix * vec4( position, 1.0 );", "wpos.z = -wpos.z;", "vec2 totPos = wpos.xz - windMin;", "vec2 windUV = totPos / windSize;", "float vWindForce = texture2D(tWindForce,windUV).x;", "float windVertexScale = color.r;", "float windMod = ((1.0 - vWindForce)*windVertexScale) * windScale;", "vec4 pos = vec4(position , 1.0);", "pos.x += windMod * windDirection.x;", "pos.y += windMod * windDirection.y;", "pos.z += windMod * windDirection.z;", "mvPosition = modelViewMatrix *  pos;", "#else", "mvPosition = modelViewMatrix * vec4( position, 1.0 );", "#endif", "#else", "mvPosition = modelViewMatrix * vec4( position, 1.0 );", "#endif", "gl_Position = projectionMatrix * mvPosition;", THREE.ShaderChunk["worldpos_vertex"], "}"].join("\n");

    IFLBasicShader.prototype.fragmentShader = ["uniform vec3 diffuse;", "uniform float opacity;", "uniform float diffuseMultiplier;", "uniform float lightMapMultiplier;", "uniform bool additiveLightMap;", THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_pars_fragment"], THREE.ShaderChunk["lightmap_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], "void main() {", "gl_FragColor = vec4( diffuse, opacity );", "#ifdef USE_MAP", "vec4 tex = texture2D( map, vUv );", "gl_FragColor = gl_FragColor * vec4( tex.xyz * diffuseMultiplier, tex.w );", "#endif", "#ifdef USE_LIGHTMAP", "vec4 map2col = texture2D( lightMap, vUv2 ) * lightMapMultiplier;", "if(additiveLightMap){", "gl_FragColor += map2col;", "} else {", "gl_FragColor *= map2col;", "gl_FragColor.w = map2col.w;", "}", "#endif", THREE.ShaderChunk["alphatest_fragment"], THREE.ShaderChunk["fog_fragment"], "}"].join("\n");

    return IFLBasicShader;

  })();

  IFLBasicShaderDoubleLightmap = (function(_super) {

    __extends(IFLBasicShaderDoubleLightmap, _super);

    function IFLBasicShaderDoubleLightmap() {
      this.uniforms = THREE.UniformsUtils.merge([
        THREE.UniformsLib["common"], THREE.UniformsLib["fog"], {
          "diffuseMultiplier": {
            type: "f",
            value: 1
          },
          "lightMapMultiplier": {
            type: "f",
            value: 1
          },
          "additiveLightMap": {
            type: "i",
            value: 0
          },
          "lightMap2": {
            type: "t",
            value: null
          },
          "lightmapBlend": {
            type: "f",
            value: 0.0
          },
          "windMin": {
            type: "v2",
            value: new THREE.Vector2(-400, -800)
          },
          "windSize": {
            type: "v2",
            value: new THREE.Vector2(1000, 1000)
          },
          "windDirection": {
            type: "v3",
            value: new THREE.Vector3(1, 0, 0)
          },
          "tWindForce": {
            type: "t",
            value: null
          },
          "windScale": {
            type: "f",
            value: 1.0
          }
        }
      ]);
      this.fragmentShader = ["uniform vec3 diffuse;", "uniform float opacity;", "uniform float diffuseMultiplier;", "uniform bool additiveLightMap;", "uniform sampler2D lightMap2;", "uniform float lightmapBlend;", "uniform float lightMapMultiplier;", THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_pars_fragment"], THREE.ShaderChunk["lightmap_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], "void main() {", "gl_FragColor = vec4( diffuse, opacity );", "#ifdef USE_MAP", "gl_FragColor = gl_FragColor * ( texture2D( map, vUv ) * diffuseMultiplier );", "#endif", "#ifdef USE_LIGHTMAP", "vec4 map2col = mix( texture2D( lightMap, vUv2 ), texture2D( lightMap2, vUv2 ), lightmapBlend) * lightMapMultiplier;", "if( additiveLightMap ) {", "gl_FragColor += map2col;", "} else {", "gl_FragColor *= map2col;", "gl_FragColor.w = map2col.w;", "}", "#endif", THREE.ShaderChunk["alphatest_fragment"], THREE.ShaderChunk["fog_fragment"], "}"].join("\n");
    }

    return IFLBasicShaderDoubleLightmap;

  })(IFLBasicShader);

  IFLCloudsShader = (function() {

    IFLCloudsShader.prototype.uniforms = null;

    function IFLCloudsShader() {
      this.uniforms = {
        "tDiffuse": {
          type: "t",
          value: null
        },
        "scale": {
          type: "f",
          value: 100.0
        },
        "alpha": {
          type: "f",
          value: 1.0
        },
        "angle": {
          type: "f",
          value: 0.0
        },
        "rotation": {
          type: "f",
          value: 0.0
        },
        "dist": {
          type: "f",
          value: 200.0
        },
        "resolution": {
          type: "v2",
          value: new THREE.Vector2(1.0, 1.0)
        }
      };
    }

    IFLCloudsShader.prototype.vertexShader = ["varying vec2  vUV;", "varying float vAlpha;", "uniform float scale;", "uniform float alpha;", "uniform float angle;", "uniform float rotation;", "uniform float dist;", "uniform vec2  resolution;", "const float MINZ = 40.0;", "const float MAXZ = 100.0;", "void main() {", "vUV = uv;", "mat4 matRot = mat4( cos( angle ), -sin( angle ), 0.0, 0.0, sin( angle ), cos( angle ), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0 );", "gl_Position = projectionMatrix * modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);", "//float fScale = scale * dist / gl_Position.z;", "float fScale = dist;", "gl_Position = gl_Position + matRot * vec4((uv.x - 0.5) * fScale , (uv.y - 0.5) * fScale, 0.0, 0.0);", "vAlpha = alpha;", "/*if (gl_Position.z < MINZ)", "vAlpha = 0.0;", "if (gl_Position.z >= MINZ && gl_Position.z <= MAXZ) {", "vAlpha = (gl_Position.z - MINZ) / (MAXZ - MINZ);", "}*/", "}"].join("\n");

    IFLCloudsShader.prototype.fragmentShader = ["uniform sampler2D tDiffuse;", "varying vec2  vUV;", "varying float vAlpha;", "void main() {", "gl_FragColor = texture2D(tDiffuse, vUV);", "gl_FragColor.a *= vAlpha;", "}"].join("\n");

    return IFLCloudsShader;

  })();

  IFLColorCorrectionShader = (function() {

    IFLColorCorrectionShader.prototype.uniforms = null;

    function IFLColorCorrectionShader() {
      this.uniforms = {
        "tDiffuse": {
          type: "t",
          value: null
        },
        "saturation": {
          type: "v4",
          value: new THREE.Vector4(0, 0, 0, 1)
        },
        "powRGB": {
          type: "v3",
          value: new THREE.Vector3(1, 1, 1)
        },
        "mulRGB": {
          type: "v3",
          value: new THREE.Vector3(1, 1, 1)
        },
        "vignetteOffset": {
          type: "f",
          value: 1.2
        },
        "vignetteDarkness": {
          type: "f",
          value: 1.3
        },
        "volumetricLightX": {
          type: "f",
          value: 0.5
        },
        "volumetricLightY": {
          type: "f",
          value: 0.5
        },
        "enableVolumetricLight": {
          type: "f",
          value: 0
        },
        "tVolumetricLight": {
          type: "t",
          value: null
        },
        "tOverlay": {
          type: "t",
          value: null
        }
      };
    }

    IFLColorCorrectionShader.prototype.vertexShader = ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n");

    IFLColorCorrectionShader.prototype.fragmentShader = ["uniform sampler2D tDiffuse;", "varying vec2 vUv;", "uniform vec3 powRGB;", "uniform vec3 mulRGB;", "uniform vec4 saturation;", "uniform float vignetteOffset;", "uniform float vignetteDarkness;", "uniform float enableVolumetricLight;", "uniform float volumetricLightX;", "uniform float volumetricLightY;", "uniform sampler2D tVolumetricLight;", "const int iSamples = 10;", "const float volumetricEnabled = 1.0;", "uniform sampler2D tOverlay;", "void main() {", "gl_FragColor = texture2D( tDiffuse, vUv );", "gl_FragColor.xyz = mulRGB * pow( gl_FragColor.xyz, powRGB );", "gl_FragColor.r = clamp(gl_FragColor.r, 0.0, 1.0);", "gl_FragColor.g = clamp(gl_FragColor.g, 0.0, 1.0);", "gl_FragColor.b = clamp(gl_FragColor.b, 0.0, 1.0);", "vec3 luminanceWeights = vec3(0.2126,0.7152,0.0722);", "float luminance = dot(gl_FragColor.xyz,luminanceWeights);", "vec3 greyscale = vec3(luminance,luminance,luminance);", "gl_FragColor.xyz = mix(gl_FragColor.xyz,greyscale.xyz,saturation.xyz);", "gl_FragColor.r = clamp(gl_FragColor.r, 0.0, 1.0);", "gl_FragColor.g = clamp(gl_FragColor.g, 0.0, 1.0);", "gl_FragColor.b = clamp(gl_FragColor.b, 0.0, 1.0);", "if (enableVolumetricLight == volumetricEnabled){", "vec2 deltaTextCoord = vec2(vUv - vec2(volumetricLightX,volumetricLightY));", "deltaTextCoord *= 1.0 /  float(iSamples) * 0.99;", "vec2 coord = vUv;", "float illuminationDecay = 1.0;", "vec4 FragColor = vec4(0.0);", "for(int i=0; i < iSamples ; i++)", "{", "coord -= deltaTextCoord;", "vec4 texel = texture2D(tVolumetricLight, coord);", "texel *= illuminationDecay * 0.7;", "FragColor += texel;", "illuminationDecay *= 0.91;", "}", "FragColor *= 0.2;", "FragColor = clamp(FragColor, 0.0, 1.0);", "gl_FragColor += FragColor;", "}", "vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( vignetteOffset );", "gl_FragColor = vec4( mix( gl_FragColor.rgb, vec3( 1.0 - vignetteDarkness ), dot( uv, uv ) ), gl_FragColor.a );", "}"].join("\n");

    return IFLColorCorrectionShader;

  })();

  IFLDandelionParticlesShader = (function() {

    IFLDandelionParticlesShader.prototype.uniforms = null;

    function IFLDandelionParticlesShader() {
      this.uniforms = THREE.UniformsUtils.merge([THREE.UniformsLib["particle"], THREE.UniformsLib["shadowmap"], {}]);
    }

    IFLDandelionParticlesShader.prototype.vertexShader = ["attribute float rotation;", "uniform float size;", "uniform float scale;", "varying float vRotation;", THREE.ShaderChunk["color_pars_vertex"], THREE.ShaderChunk["shadowmap_pars_vertex"], "void main() {", "vRotation = rotation;", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "#ifdef USE_SIZEATTENUATION", "gl_PointSize = size * ( scale / length( mvPosition.xyz ) );", "#else", "gl_PointSize = size;", "#endif", "gl_Position = projectionMatrix * mvPosition;", THREE.ShaderChunk["worldpos_vertex"], THREE.ShaderChunk["shadowmap_vertex"], "}"].join("\n");

    IFLDandelionParticlesShader.prototype.fragmentShader = ["uniform vec3 psColor;", "uniform float opacity;", "varying float vRotation;", "const float mid = 0.5;", THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_particle_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], THREE.ShaderChunk["shadowmap_pars_fragment"], "void main() {", "gl_FragColor = vec4( psColor, opacity );", "#ifdef USE_MAP", "vec2 rotated = vec2(cos(vRotation) * (gl_PointCoord.x - mid) + sin(vRotation) * (gl_PointCoord.y - mid) + mid, cos(vRotation) * (gl_PointCoord.y - mid) - sin(vRotation) * (gl_PointCoord.x - mid) + mid);", "gl_FragColor = texture2D( map,  rotated);", "#endif", THREE.ShaderChunk["alphatest_fragment"], THREE.ShaderChunk["color_fragment"], THREE.ShaderChunk["shadowmap_fragment"], THREE.ShaderChunk["fog_fragment"], "}"].join("\n");

    return IFLDandelionParticlesShader;

  })();

  IFLNoiseShader = (function() {

    IFLNoiseShader.prototype.uniforms = null;

    function IFLNoiseShader() {
      this.uniforms = {
        "fTime": {
          type: "f",
          value: 1
        },
        "vScale": {
          type: "v2",
          value: new THREE.Vector2(1, 1)
        },
        "vOffset": {
          type: "v2",
          value: new THREE.Vector2(1, 1)
        }
      };
    }

    IFLNoiseShader.prototype.fragmentShader = ["uniform float fTime;", "varying vec2 vUv;", "vec4 permute( vec4 x ) {", "return mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );", "}", "vec4 taylorInvSqrt( vec4 r ) {", "return 1.79284291400159 - 0.85373472095314 * r;", "}", "float snoise( vec3 v ) {", "const vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );", "const vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );", "vec3 i  = floor( v + dot( v, C.yyy ) );", "vec3 x0 = v - i + dot( i, C.xxx );", "vec3 g = step( x0.yzx, x0.xyz );", "vec3 l = 1.0 - g;", "vec3 i1 = min( g.xyz, l.zxy );", "vec3 i2 = max( g.xyz, l.zxy );", "vec3 x1 = x0 - i1 + 1.0 * C.xxx;", "vec3 x2 = x0 - i2 + 2.0 * C.xxx;", "vec3 x3 = x0 - 1. + 3.0 * C.xxx;", "i = mod( i, 289.0 );", "vec4 p = permute( permute( permute( i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );", "float n_ = 1.0 / 7.0;", "vec3 ns = n_ * D.wyz - D.xzx;", "vec4 j = p - 49.0 * floor( p * ns.z *ns.z );", "vec4 x_ = floor( j * ns.z );", "vec4 y_ = floor( j - 7.0 * x_ );", "vec4 x = x_ *ns.x + ns.yyyy;", "vec4 y = y_ *ns.x + ns.yyyy;", "vec4 h = 1.0 - abs( x ) - abs( y );", "vec4 b0 = vec4( x.xy, y.xy );", "vec4 b1 = vec4( x.zw, y.zw );", "vec4 s0 = floor( b0 ) * 2.0 + 1.0;", "vec4 s1 = floor( b1 ) * 2.0 + 1.0;", "vec4 sh = -step( h, vec4( 0.0 ) );", "vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;", "vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;", "vec3 p0 = vec3( a0.xy, h.x );", "vec3 p1 = vec3( a0.zw, h.y );", "vec3 p2 = vec3( a1.xy, h.z );", "vec3 p3 = vec3( a1.zw, h.w );", "vec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );", "p0 *= norm.x;", "p1 *= norm.y;", "p2 *= norm.z;", "p3 *= norm.w;", "vec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );", "m = m * m;", "return 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 ), dot( p3, x3 ) ) );", "}", "float surface3( vec3 coord ) {", "float n = 0.0;", "n += 1.0 * abs( snoise( coord ) );", "n += 0.5 * abs( snoise( coord * 2.0 ) );", "n += 0.25 * abs( snoise( coord * 4.0 ) );", "n += 0.125 * abs( snoise( coord * 8.0 ) );", "return n;", "}", "void main( void ) {", "vec3 coord = vec3( vUv, -fTime );", "float n = surface3( coord );", "gl_FragColor = vec4( vec3( n, n, n ), 1.0 );", "}"].join("\n");

    IFLNoiseShader.prototype.vertexShader = ["varying vec2 vUv;", "uniform vec2 vScale;", "uniform vec2 vOffset;", "void main( void ) {", "vUv = (uv * vScale) + vOffset;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n");

    return IFLNoiseShader;

  })();

  IFLPhongFresnelShader = (function() {

    IFLPhongFresnelShader.prototype.uniforms = null;

    function IFLPhongFresnelShader() {
      this.uniforms = THREE.UniformsUtils.merge([
        THREE.UniformsLib["common"], THREE.UniformsLib["fog"], {
          "ambient": {
            type: "c",
            value: new THREE.Color(0xffffff)
          },
          "emissive": {
            type: "c",
            value: new THREE.Color(0x000000)
          },
          "specular": {
            type: "c",
            value: new THREE.Color(0x111111)
          },
          "shininess": {
            type: "f",
            value: 30
          },
          "wrapRGB": {
            type: "v3",
            value: new THREE.Vector3(1, 1, 1)
          },
          "diffuseMultiplier": {
            type: "f",
            value: 1
          },
          "envmapMultiplier": {
            type: "f",
            value: 2
          },
          "lightMapMultiplier": {
            type: "f",
            value: 1
          },
          "tAux": {
            type: "t",
            value: null
          },
          "mFresnelPower": {
            type: "f",
            value: -2.5
          },
          "windMin": {
            type: "v2",
            value: new THREE.Vector2(-400, -800)
          },
          "windSize": {
            type: "v2",
            value: new THREE.Vector2(1000, 1000)
          },
          "windDirection": {
            type: "v3",
            value: new THREE.Vector3(1, 0, 0)
          },
          "tWindForce": {
            type: "t",
            value: null
          },
          "windScale": {
            type: "f",
            value: 2.0
          }
        }
      ]);
    }

    IFLPhongFresnelShader.prototype.vertexShader = [THREE.ShaderChunk["map_pars_vertex"], THREE.ShaderChunk["lightmap_pars_vertex"], THREE.ShaderChunk["color_pars_vertex"], "uniform float mFresnelPower;", "uniform float windScale;", "uniform vec2 windMin;", "uniform vec2 windSize;", "uniform vec3 windDirection;", "varying float vFresnel;", "varying vec3 vReflect;", "varying vec3 vMvPosition;", "varying vec3 vTransformedNormal;", "#ifdef VERTEX_TEXTURES", "uniform sampler2D tAux;", "#ifdef USE_COLOR", "uniform sampler2D tWindForce;", "#endif", "#endif", "void main() {", THREE.ShaderChunk["map_vertex"], THREE.ShaderChunk["lightmap_vertex"], THREE.ShaderChunk["color_vertex"], THREE.ShaderChunk["defaultnormal_vertex"], "vec4 mvPosition;", "#ifdef USE_COLOR", "#ifdef VERTEX_TEXTURES", "vec4 wpos = modelMatrix * vec4( position.x ,position.y, -position.z, 1.0 );", "vec2 totPos = wpos.xz - windMin;", "vec2 windUV = totPos / windSize;", "float vWindForce = texture2D( tWindForce , windUV ).x;", "float windMod = ( (1.0 - vWindForce) * color.r) * windScale;", "vec4 pos = vec4( position.x + windMod * windDirection.x, position.y + windMod * windDirection.y , position.z + windMod * windDirection.z,  1.0);", "mvPosition = modelViewMatrix *  pos;", "#else", "mvPosition = modelViewMatrix * vec4( position, 1.0 );", "#endif", "#else", "mvPosition = modelViewMatrix * vec4( position, 1.0 );", "#endif", "gl_Position = projectionMatrix * mvPosition;", THREE.ShaderChunk["worldpos_vertex"], "#ifdef USE_ENVMAP", "vec3 nWorld = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;", "vReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );", "#else", "vReflect = vec3(0.0,0.0,0.0);", "#endif", "vFresnel = 0.0;", "#ifdef VERTEX_TEXTURES", "float fresnelFactor = 1.0 - texture2D( tAux, vUv ).r;", "float fresnelPow =  mFresnelPower + ( 5.0 * fresnelFactor );", "float fresnel = pow( 1.0 + dot( normalize( mvPosition.xyz ) , normalize( transformedNormal.xyz ) ), fresnelPow );", "vFresnel = clamp( fresnel, 0.0, 1.0 );", "#endif", "vMvPosition = normalize(mvPosition.xyz);", "vTransformedNormal = normalize(transformedNormal.xyz);", "}"].join("\n");

    IFLPhongFresnelShader.prototype.fragmentShader = [THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_pars_fragment"], THREE.ShaderChunk["lightmap_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], "uniform sampler2D specularMap;", "uniform vec3 diffuse;", "uniform float diffuseMultiplier;", "uniform float envmapMultiplier;", "uniform float lightMapMultiplier;", "uniform float mFresnelPower;", "uniform sampler2D tAux;", "varying float vFresnel;", "varying vec3 vMvPosition;", "varying vec3 vTransformedNormal;", "varying vec3 vReflect;", "#ifdef USE_ENVMAP", "uniform float reflectivity;", "uniform samplerCube envMap;", "uniform float flipEnvMap;", "uniform int combine;", "#endif", "void main() {", "gl_FragColor = texture2D( map, vUv ) * diffuseMultiplier;", "#ifdef USE_LIGHTMAP", "vec4 map2col = texture2D( lightMap, vUv2 );", "gl_FragColor *= map2col * lightMapMultiplier;", "gl_FragColor.w = map2col.w;", "#endif", THREE.ShaderChunk["alphatest_fragment"], "#ifdef VERTEX_TEXTURES", "vec4 texelSpecular = texture2D( specularMap, vUv );", "float specularStrength = texelSpecular.r;", "float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "vec4 cubeColor;", "#ifdef DOUBLE_SIDED", "cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * vReflect.x, vReflect.yz ) ) *  envmapMultiplier;", "#else", "cubeColor = textureCube( envMap, vec3( flipEnvMap * vReflect.x, vReflect.yz ) ) * envmapMultiplier;", "#endif", "float fresnel = flipNormal * vFresnel;", "vec4 reflectTexel = cubeColor * texelSpecular;", "float reflectFresnel =  clamp(fresnel * specularStrength,0.0,1.0);", "gl_FragColor.xyz = mix( gl_FragColor.xyz, reflectTexel.xyz , reflectFresnel );", "#endif", THREE.ShaderChunk["fog_fragment"], "}"].join("\n");

    return IFLPhongFresnelShader;

  })();

  IFLPhongFresnelShaderDoubleLightMap = (function(_super) {

    __extends(IFLPhongFresnelShaderDoubleLightMap, _super);

    IFLPhongFresnelShaderDoubleLightMap.prototype.uniforms = null;

    function IFLPhongFresnelShaderDoubleLightMap() {
      this.uniforms = THREE.UniformsUtils.merge([
        THREE.UniformsLib["common"], THREE.UniformsLib["fog"], {
          "ambient": {
            type: "c",
            value: new THREE.Color(0xffffff)
          },
          "emissive": {
            type: "c",
            value: new THREE.Color(0x000000)
          },
          "specular": {
            type: "c",
            value: new THREE.Color(0x111111)
          },
          "shininess": {
            type: "f",
            value: 30
          },
          "diffuseMultiplier": {
            type: "f",
            value: 1
          },
          "envmapMultiplier": {
            type: "f",
            value: 2
          },
          "lightMapMultiplier": {
            type: "f",
            value: 1
          },
          "wrapRGB": {
            type: "v3",
            value: new THREE.Vector3(1, 1, 1)
          },
          "lightmapBlend": {
            type: "f",
            value: 0.0
          },
          "lightMap2": {
            type: "t",
            value: null
          },
          "tAux": {
            type: "t",
            value: null
          },
          "mFresnelPower": {
            type: "f",
            value: -2.5
          },
          "windMin": {
            type: "v2",
            value: new THREE.Vector2(-400, -800)
          },
          "windSize": {
            type: "v2",
            value: new THREE.Vector2(1000, 1000)
          },
          "windDirection": {
            type: "v3",
            value: new THREE.Vector3(1, 0, 0)
          },
          "tWindForce": {
            type: "t",
            value: null
          },
          "windScale": {
            type: "f",
            value: 2.0
          }
        }
      ]);
      this.fragmentShader = [THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_pars_fragment"], THREE.ShaderChunk["lightmap_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], THREE.ShaderChunk["specularmap_pars_fragment"], "uniform float lightmapBlend;", "uniform sampler2D lightMap2;", "uniform vec3 diffuse;", "uniform float diffuseMultiplier;", "uniform float envmapMultiplier;", "uniform float lightMapMultiplier;", "uniform float mFresnelPower;", "uniform sampler2D tAux;", "varying float vFresnel;", "varying vec3 vMvPosition;", "varying vec3 vTransformedNormal;", "varying vec3 vReflect;", "#ifdef USE_ENVMAP", "uniform float reflectivity;", "uniform samplerCube envMap;", "uniform float flipEnvMap;", "uniform int combine;", "#endif", "void main() {", "gl_FragColor = texture2D( map, vUv ) * diffuseMultiplier;", "#ifdef USE_LIGHTMAP", "vec4 map2col = mix( texture2D( lightMap, vUv2 ), texture2D( lightMap2, vUv2 ), lightmapBlend);", "gl_FragColor *= map2col * lightMapMultiplier;", "gl_FragColor.w = map2col.w;", "#endif", THREE.ShaderChunk["alphatest_fragment"], "#ifdef VERTEX_TEXTURES", "vec4 texelSpecular = texture2D( specularMap, vUv );", "float specularStrength = texelSpecular.r;", "float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "vec4 cubeColor;", "#ifdef DOUBLE_SIDED", "cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * vReflect.x, vReflect.yz ) ) *  envmapMultiplier;", "#else", "cubeColor = textureCube( envMap, vec3( flipEnvMap * vReflect.x, vReflect.yz ) ) * envmapMultiplier;", "#endif", "float fresnel = flipNormal * vFresnel;", "vec4 reflectTexel = cubeColor * texelSpecular;", "float reflectFresnel =  clamp(fresnel * specularStrength,0.0,1.0);", "gl_FragColor.xyz = mix( gl_FragColor.xyz, reflectTexel.xyz, reflectFresnel );", "#endif", THREE.ShaderChunk["fog_fragment"], "}"].join("\n");
    }

    return IFLPhongFresnelShaderDoubleLightMap;

  })(IFLPhongFresnelShader);

  IFLSal2x = (function() {

    IFLSal2x.prototype.uniforms = null;

    function IFLSal2x() {
      this.uniforms = {
        "tDiffuse": {
          type: "t",
          value: null
        },
        "resolution": {
          type: "v2",
          value: new THREE.Vector2(0, 0)
        },
        "opacity": {
          type: "f",
          value: 1.0
        }
      };
    }

    IFLSal2x.prototype.vertexShader = ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\n");

    IFLSal2x.prototype.fragmentShader = ["#ifdef GL_ES", "precision mediump float;", "#endif", "uniform sampler2D tDiffuse;", "uniform vec2 resolution;", "uniform float opacity;", "varying vec2 vUv;", "void main()", "{", "vec2 UL, UR, DL, DR;", "float dx = pow(resolution.x, -1.0) * 0.25;", "float dy = pow(resolution.y, -1.0) * 0.25;", "vec4 dt = vec4(1.0, 1.0, 1.0, 1.0);", "UL = vUv + vec2(-dx,-dy);", "UR = vUv + vec2( dx,-dy);", "DL = vUv + vec2(-dx, dy);", "DR = vUv + vec2( dx, dy);", "vec4 c00 = texture2D(tDiffuse, UL);", "vec4 c20 = texture2D(tDiffuse, UR);", "vec4 c02 = texture2D(tDiffuse, DL);", "vec4 c22 = texture2D(tDiffuse, DR);", "float m1 = dot(abs(c00-c22), dt) + 0.001;", "float m2 = dot(abs(c02-c20), dt) + 0.001;", "gl_FragColor = (m1*(c02+c20) + m2*(c22+c00)) / (2.0*(m1+m2));", "gl_FragColor.a *= opacity;", "}"].join("\n");

    return IFLSal2x;

  })();

  IFLSkyCubeShader = (function() {

    IFLSkyCubeShader.prototype.uniforms = null;

    function IFLSkyCubeShader() {
      this.uniforms = {
        "tCube": {
          type: "t",
          value: null
        },
        "tFlip": {
          type: "f",
          value: -1
        }
      };
    }

    IFLSkyCubeShader.prototype.vertexShader = ["varying vec3 vViewPosition;", "void main() {", "vec4 mPosition = modelMatrix * vec4( position, 1.0 );", "vViewPosition = cameraPosition - mPosition.xyz;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n");

    IFLSkyCubeShader.prototype.fragmentShader = ["uniform samplerCube tCube;", "uniform float tFlip;", "varying vec3 vViewPosition;", "void main() {", "vec3 wPos = cameraPosition - vViewPosition;", "gl_FragColor = textureCube( tCube, vec3( tFlip * wPos.x, wPos.yz ) );", "}"].join("\n");

    return IFLSkyCubeShader;

  })();

  IFLStormFresnelShader = (function() {

    IFLStormFresnelShader.prototype.uniforms = null;

    function IFLStormFresnelShader() {
      this.uniforms = THREE.UniformsUtils.merge([
        THREE.UniformsLib["common"], THREE.UniformsLib["envmap"], {
          "envmapMul": {
            type: "f",
            value: 3.0
          },
          "envmapMix": {
            type: "f",
            value: 0.60
          },
          "envmapPow": {
            type: "f",
            value: 1.0
          },
          "specmapMul": {
            type: "f",
            value: 0.6
          },
          "specmapPow": {
            type: "f",
            value: 0.1
          },
          "fresnelPower": {
            type: "f",
            value: 0.0
          },
          "specMap": {
            type: "t",
            value: null
          },
          "cubeX": {
            type: "f",
            value: -126.0
          },
          "cubeY": {
            type: "f",
            value: 107.0
          },
          "cubeZ": {
            type: "f",
            value: 51.0
          }
        }
      ]);
    }

    IFLStormFresnelShader.prototype.vertexShader = ["#define PHONG", "#define USE_ENVMAP", THREE.ShaderChunk["map_pars_vertex"], THREE.ShaderChunk["lightmap_pars_vertex"], THREE.ShaderChunk["color_pars_vertex"], THREE.ShaderChunk["morphtarget_pars_vertex"], THREE.ShaderChunk["skinning_pars_vertex"], "varying vec3 vViewPosition;", "varying vec3 vNormal;", "varying vec3 vObjectNormal;", "varying vec3 vReflect;", "varying vec3 vWorldPosition;", "void main() {", THREE.ShaderChunk["map_vertex"], THREE.ShaderChunk["lightmap_vertex"], THREE.ShaderChunk["color_vertex"], THREE.ShaderChunk["morphnormal_vertex"], THREE.ShaderChunk["skinbase_vertex"], THREE.ShaderChunk["skinnormal_vertex"], THREE.ShaderChunk["defaultnormal_vertex"], "vNormal = transformedNormal;", "vObjectNormal = objectNormal;", THREE.ShaderChunk["morphtarget_vertex"], THREE.ShaderChunk["skinning_vertex"], THREE.ShaderChunk["default_vertex"], "vViewPosition = -mvPosition.xyz;", THREE.ShaderChunk["worldpos_vertex"], "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )", "vec3 nWorld = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;", "vReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );", "#endif", "vWorldPosition = mPosition.xyz;", "}"].join("\n");

    IFLStormFresnelShader.prototype.fragmentShader = [THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_pars_fragment"], THREE.ShaderChunk["lightmap_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], THREE.ShaderChunk["shadowmap_pars_fragment"], THREE.ShaderChunk["specularmap_pars_fragment"], "uniform vec3 diffuse;", "uniform float opacity;", "uniform float envmapMix;", "uniform float envmapMul;", "uniform float envmapPow;", "uniform float specmapMul;", "uniform float specmapPow;", "uniform float fresnelPower;", "uniform float cubeX;", "uniform float cubeY;", "uniform float cubeZ;", "uniform samplerCube specMap;", "varying vec3 vWorldPosition;", "varying vec3 vViewPosition;", "varying vec3 vNormal;", "varying vec3 vObjectNormal;", "#ifdef USE_ENVMAP", "varying vec3 vReflect;", "uniform float reflectivity;", "uniform samplerCube envMap;", "uniform float flipEnvMap;", "uniform int combine;", "#endif", "#ifdef USE_NORMALMAP", "uniform sampler2D normalMap;", "uniform vec2 normalScale;", "vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {", "vec3 q0 = dFdx( eye_pos.xyz );", "vec3 q1 = dFdy( eye_pos.xyz );", "vec2 st0 = dFdx( vUv.st );", "vec2 st1 = dFdy( vUv.st );", "vec3 S = normalize(  q0 * st1.t - q1 * st0.t );", "vec3 T = normalize( -q0 * st1.s + q1 * st0.s );", "vec3 N = normalize( surf_norm );", "vec3 nmap = texture2D( normalMap, vUv ).xyz;", "nmap.y = 1.0 - nmap.y;", "vec3 mapN = nmap * 2.0 - 1.0;", "mapN.xy = normalScale * mapN.xy;", "mat3 tsn = mat3( S, T, N );", "return normalize( tsn * mapN );", "}", "#endif", "void main() {", "gl_FragColor = vec4( diffuse, opacity );", "#ifdef USE_MAP", "gl_FragColor = texture2D( map, vUv );", "#endif", "#ifdef USE_LIGHTMAP", "vec4 map2col = texture2D( lightMap, vUv2 );", "gl_FragColor *= map2col;", "gl_FragColor.w = map2col.w;", "#endif", THREE.ShaderChunk["alphatest_fragment"], "vec3 viewPosition = normalize( vViewPosition );", "vec3 normal = normalize( vNormal );", "#ifdef USE_ENVMAP", "vec3 reflectVec;", "#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )", "vec3 objectNormal = normalize( vObjectNormal );", "objectNormal = perturbNormal2Arb( -viewPosition, objectNormal );", "vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );", "reflectVec = reflect( cameraToVertex, objectNormal );", "#else", "reflectVec = vReflect;", "#endif", "vec3 sunNormal = normalize( vec3( cubeX, cubeY, cubeZ ) );", "reflectVec = reflect( reflectVec, sunNormal );", "#ifdef DOUBLE_SIDED", "float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "vec4 envColor  = textureCube( envMap,  flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "vec4 specColor = textureCube( specMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#else", "vec4 envColor  = textureCube( envMap,  vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "vec4 specColor = textureCube( specMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#endif", "envColor.xyz  *= pow( envColor.xyz, vec3( envmapPow, envmapPow, envmapPow ) );", "envColor.xyz  *= envmapMul;", "specColor.xyz  = pow( specColor.xyz, vec3( specmapPow, specmapPow, specmapPow ) );", "specColor.xyz *= specmapMul;", "gl_FragColor.xyz *= mix( vec3(1.0, 1.0, 1.0), envColor.xyz, envmapMix);", "gl_FragColor.xyz *= specColor.xyz;", "#endif", THREE.ShaderChunk["fog_fragment"], "}"].join("\n");

    return IFLStormFresnelShader;

  })();

  IFLTerrainLambertShader = (function() {

    IFLTerrainLambertShader.prototype.uniforms = null;

    function IFLTerrainLambertShader() {
      this.uniforms = THREE.UniformsUtils.merge([
        THREE.UniformsLib["common"], THREE.UniformsLib["fog"], {
          "tBlendmap": {
            type: "t",
            value: null
          },
          "tDiffuseR": {
            type: "t",
            value: null
          },
          "tDiffuseG": {
            type: "t",
            value: null
          },
          "tDiffuseB": {
            type: "t",
            value: null
          },
          "lightMapMultiplier": {
            type: "f",
            value: 3.0
          },
          "offsetRepeatR": {
            type: "v4",
            value: new THREE.Vector4(1, 1, 1, 1)
          },
          "offsetRepeatG": {
            type: "v4",
            value: new THREE.Vector4(1, 1, 1, 1)
          },
          "offsetRepeatB": {
            type: "v4",
            value: new THREE.Vector4(1, 1, 1, 1)
          },
          "ambient": {
            type: "c",
            value: new THREE.Color(0xffffff)
          },
          "emissive": {
            type: "c",
            value: new THREE.Color(0x000000)
          },
          "wrapRGB": {
            type: "v3",
            value: new THREE.Vector3(1, 1, 1)
          }
        }
      ]);
    }

    IFLTerrainLambertShader.prototype.vertexShader = [THREE.ShaderChunk["map_pars_vertex"], THREE.ShaderChunk["color_pars_vertex"], "uniform vec4 offsetRepeatR;", "uniform vec4 offsetRepeatG;", "uniform vec4 offsetRepeatB;", "varying vec2 vUvUnscaled;", "varying vec2 vUvR;", "varying vec2 vUvG;", "varying vec2 vUvB;", "void main() {", "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "vUv  = uv * offsetRepeat.zw + offsetRepeat.xy;", "vUvR = uv * offsetRepeatR.zw + offsetRepeatR.xy;", "vUvG = uv * offsetRepeatG.zw + offsetRepeatG.xy;", "vUvB = uv * offsetRepeatB.zw + offsetRepeatB.xy;", "vUvUnscaled = uv;", "#endif", THREE.ShaderChunk["color_vertex"], THREE.ShaderChunk["defaultnormal_vertex"], THREE.ShaderChunk["default_vertex"], THREE.ShaderChunk["worldpos_vertex"], "}"].join("\n");

    IFLTerrainLambertShader.prototype.fragmentShader = [THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], "uniform sampler2D tBlendmap;", "uniform sampler2D tDiffuseR;", "uniform sampler2D tDiffuseG;", "uniform sampler2D tDiffuseB;", "uniform sampler2D lightMap;", "uniform float opacity;", "uniform float lightMapMultiplier;", "varying vec2 vUvUnscaled;", "varying vec2 vUvR;", "varying vec2 vUvG;", "varying vec2 vUvB;", "void main() {", "gl_FragColor = vec4( vec3 ( 1.0 ), opacity );", "#ifdef USE_MAP", "gl_FragColor = gl_FragColor * texture2D( map, vUv );", "vec4 vColor = texture2D( tBlendmap, vUvUnscaled );", "vec4 fragColorR = texture2D( tDiffuseR, vUvR );", "gl_FragColor.xyz = mix( gl_FragColor.xyz, fragColorR.xyz, vColor.r );", "vec4 fragColorG = texture2D( tDiffuseG, vUvG );", "gl_FragColor.xyz = mix( gl_FragColor.xyz, fragColorG.xyz, vColor.g );", "vec4 fragColorB = texture2D( tDiffuseB, vUvB );", "gl_FragColor.xyz = mix( gl_FragColor.xyz, fragColorB.xyz, vColor.b );", "#endif", THREE.ShaderChunk["alphatest_fragment"], "float specularStrength = 1.0;", "#ifdef USE_LIGHTMAP", "gl_FragColor = gl_FragColor * ( texture2D( lightMap, vUvUnscaled ) * lightMapMultiplier );", "#endif", THREE.ShaderChunk["envmap_fragment"], THREE.ShaderChunk["fog_fragment"], "}"].join("\n");

    return IFLTerrainLambertShader;

  })();

  IFLTornadoShader = (function() {

    IFLTornadoShader.prototype.uniforms = null;

    function IFLTornadoShader() {
      this.uniforms = {
        "tDiffuse": {
          type: "t",
          value: null
        },
        "time": {
          type: "f",
          value: 0
        },
        "resolution": {
          type: "v2",
          value: new THREE.Vector2(0, 0)
        },
        "camera_matrix": {
          type: "m4",
          value: new THREE.Matrix4()
        },
        "tornado_bounding_radius": {
          type: "f",
          value: 80.0
        },
        "light_harshness": {
          type: "f",
          value: 0.3
        },
        "light_darkness": {
          type: "f",
          value: 1.0
        },
        "cloud_edge_sharpness": {
          type: "f",
          value: 1.0
        },
        "storm_tint": {
          type: "v3",
          value: new THREE.Vector3(1, 1, 1)
        },
        "final_colour_scale": {
          type: "f",
          value: 10.0
        },
        "gamma_correction": {
          type: "f",
          value: 1.7
        },
        "environment_rotation": {
          type: "f",
          value: 0.2
        },
        "storm_alpha_correction": {
          type: "f",
          value: 1.7
        },
        "tornado_density": {
          type: "f",
          value: 0.2
        },
        "tornado_height": {
          type: "f",
          value: 120.0
        },
        "spin_speed": {
          type: "f",
          value: 0.2
        },
        "base_step_scaling": {
          type: "f",
          value: 0.7
        },
        "min_step_size": {
          type: "f",
          value: 1.0
        },
        "cam_fov": {
          type: "f",
          value: 60.0
        },
        "dist_approx": {
          type: "f",
          value: 1.0
        }
      };
    }

    IFLTornadoShader.prototype.vertexShader = ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\n");

    IFLTornadoShader.prototype.fragmentShader = ["// The 'Storm Shader' by Dmytry Lavrov, Copyright 2012 (http://dmytry.com/) with permission from Moritz Helmsteadter at The Max Plank Institute", "// is licensed under a Creative Commons attribution license http://creativecommons.org/licenses/by/3.0", "// free to share and remix for any purpose as long as it includes this note.", "#ifdef GL_ES", "precision mediump float;", "#endif", "// change these to 0 to disable specific features", "#define BENT 0", "#define FAKE_DIRECTIONAL_LIGHT 0", "#define ENVIRONMENT_TEXTURE 1", "#define NEGATE_Z 1  /// set to 1 for production viewer to match opengl convention", "#define USE_BOUNDING_VOLUME 1", "uniform float cam_fov;", "const float pi=3.141592654;", "#if BENT", "const float bend_height=50.0;", "const float bend_displacement=20.0;/// Watch out for bounding volume. The tornado's radius is about 25 units.", "#endif", "uniform float tornado_bounding_radius; /// = max(pow(tornado_height,1.5)*0.03, bend_displacement)+10;", "uniform float light_harshness;/// adjust these two parameters to chage the look of tornado.", "uniform float light_darkness;", "uniform float cloud_edge_sharpness;/// decrease to make fuzzier edge.", "uniform vec3 storm_tint;", "uniform float final_colour_scale;", "uniform float gamma_correction;", "uniform float environment_rotation;", "uniform float storm_alpha_correction;", "uniform float tornado_density;", "uniform float tornado_height;", "uniform float spin_speed;", "const int number_of_steps=180;/// number of isosurface raytracing steps", "uniform float base_step_scaling;/// Larger values allow for faster rendering but cause rendering artifacts. When stepping the isosurface, the value is multiplied by this number to obtain the distance of each step", "uniform float min_step_size;/// Minimal step size, this value is added to the step size, larger values allow to speed up the rendering at expense of artifacts.", "uniform float dist_approx;", "// input values passed into this shader", "uniform float time;/// use for blinking effects", "uniform vec2 resolution;/// screen resolution", "uniform mat4 camera_matrix; /// transform from camera to the world (not from the world to the camera", "const vec3 towards_sun=vec3(1,5.0,1.0);", "#if ENVIRONMENT_TEXTURE", "uniform sampler2D tDiffuse;", "#endif", "float hash( float n )", "{", "return fract(sin(n)*43758.5453);", "}", "float snoise( in vec3 x )", "{", "vec3 p = floor(x);", "vec3 f = fract(x);", "f = f*f*(3.0-2.0*f);", "float n = p.x + p.y*57.0+p.z*137.0;", "float res = 1.0-2.0*mix(", "mix(mix( hash(n+  0.0), hash(n+  1.0),f.x), mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),", "mix(mix( hash(n+  137.0), hash(n+  138.0),f.x), mix( hash(n+ 57.0+137.0), hash(n+ 58.0+137.0),f.x),f.y),", "f.z", ");", "return res;", "}", "mat2 Spin(float angle){", "return mat2(cos(angle),-sin(angle),sin(angle),cos(angle));", "}", "float ridged(float f){", "return 1.0-2.0*abs(f);", "}", "float sigmoid(float f){", "if(f<0.0)return 0.0;", "if(f>1.0)return 1.0;", "return f*f*(3.0-f*2.0);", "}", "float Shape(vec3 q)/// the isosurface shape function, the surface is at o(q)=0", "{ ", "float t=time;", "if(q.z<0.0)return length(q);", "#if BENT", "q.x+=sigmoid(1.0-q.z/bend_height)*bend_displacement;", "#endif", "vec3 spin_pos=vec3(Spin(t-sqrt(q.z))*q.xy,q.z-t*5.0);", "float zcurve=pow(q.z,1.5)*0.03;", "float v1=clamp(zcurve*0.2,0.1,1.0)*snoise(spin_pos*vec3(0.1,0.1,0.1))*5.0;", "float v=abs(length(q.xy)-zcurve)-5.5-v1;", "v=v-ridged(snoise(vec3(Spin(t*1.5+0.1*q.z)*q.xy,q.z-t*4.0)*0.3))*1.2;", "//v+=max(0.0,q.z-tornado_height);", "return v;", "}", "vec2 TextureCoord(vec3 q){", "#if BENT", "q.x+=sigmoid(1.0-q.z/bend_height)*bend_displacement;", "#endif", "//return vec2(atan(q.y,q.x)*(0.5/pi), 1.0-q.z/tornado_height);", "return vec2(mod(atan(q.y,q.x)*(0.5/pi)+environment_rotation,1.0), mod(1.0-q.z/tornado_height,1.0));", "}", "//Normalized gradient of the field at the point q , used as surface normal", "vec3 GetNormal(vec3 q)", "{", "vec3 f=vec3(0.5,0.0,0.0);", "float b=Shape(q);", "return normalize(vec3(Shape(q+f.xyy)-b, Shape(q+f.yxy)-b, Shape(q+f.yyx)-b));", "}", "void Fog_(float dist, out vec3 colour, out vec3 multiplier){/// calculates fog colour, and the multiplier for the colour of item behind the fog. If you do two intervals consecutively it will calculate the result correctly.", "vec3 fog=exp(-dist*vec3(0.03,0.05,0.1)*0.2);", "colour=vec3(1.0)-fog;", "multiplier=fog;/// (1.0-a)+a*(1.0-b + b*x) = 1.0-a+a-ab+abx = 1.0-ab+abx", "}", "void FogStep(float dist, vec3 fog_absorb, vec3 fog_reemit, inout vec3 colour, inout vec3 multiplier){/// calculates fog colour, and the multiplier for the colour of item behind the fog. If you do two intervals consecutively it will calculate the result correctly.", "vec3 fog=exp(-dist*fog_absorb);", "colour+=multiplier*(storm_tint-fog)*fog_reemit;", "multiplier*=fog;/// (1.0-a)+a*(1.0-b + b*x) = 1.0-a+a-ab+abx = 1.0-ab+abx", "}", "bool RayCylinderIntersect(vec3 org, vec3 dir, out float min_dist, out float max_dist){ ", "vec2 p=org.xy;", "vec2 d=dir.xy;", "float r=tornado_bounding_radius;", "float a=dot(d,d)+1.0E-10;/// A in quadratic formula , with a small constant to avoid division by zero issue", "float det, b;", "b = -dot(p,d); /// -B/2 in quadratic formula", "/// AC = (p.x*p.x + p.y*p.y + p.z*p.z)*dd + r*r*dd ", "det=(b*b) - dot(p,p)*a + r*r*a;/// B^2/4 - AC = determinant / 4", "if (det<0.0){", "return false;", "}", "det= sqrt(det); /// already divided by 2 here", "min_dist= (b - det)/a; /// still needs to be divided by A", "max_dist= (b + det)/a;  ", "if(max_dist>0.0){", "return true;", "}else{", "return false;", "}", "}", "void RaytraceFoggy(vec3 org, vec3 dir, float min_dist, float max_dist, inout vec3 colour, inout vec3 multiplier){", "vec3 q=org+dir*min_dist;", "vec3 pp;", "float d=0.0;", "float old_d=d;", "float dist=min_dist;", "#if ENVIRONMENT_TEXTURE", "vec3 tx_colour = vec3(0.0, 0.0, 0.0);", "float rrr=180.0/5.0;", "for(int i=0;i<5;i++)", "tx_colour += texture2D(tDiffuse, TextureCoord(org+dir*(min_dist+min_step_size*rrr*dist_approx))).xyz;", "tx_colour = (tx_colour / 5.0) * 0.35;", "#endif", "float step_scaling=base_step_scaling;", "float extra_step=min_step_size;", "for(int i=0;i<number_of_steps;i++)", "{", "old_d=d;", "float density=-Shape(q);", "d=max(density*step_scaling,0.0);", "float step_dist=d+extra_step;", "if(density>0.0){", "float d2=-Shape(q+towards_sun);", "//float brightness=exp(-0.7*clamp(d2,-10.0,20.0));", "float v=-0.6*density;", "#if FAKE_DIRECTIONAL_LIGHT", "v-=clamp(d2*light_harshness,0.0,light_darkness);", "#endif", "float brightness=exp(v);", "vec3 fog_colour=vec3(brightness);", "#if ENVIRONMENT_TEXTURE", "//vec3 tx_colour=texture2D(tDiffuse, TextureCoord(q)).xyz;", "fog_colour *= tx_colour;", "#endif", "//FogStep(step_dist*0.2, clamp(density*cloud_edge_sharpness, 0.0, 1.0)*vec3(1,1,1), fog_colour, colour, multiplier);", "FogStep(step_dist*tornado_density, clamp(density*cloud_edge_sharpness, 0.0, 1.0)*vec3(1,1,1), fog_colour, colour, multiplier);", "}", "if(dist>max_dist || multiplier.x<0.01){", "return;", "}", "dist+=step_dist; ", "q=org+dist*dir;", "}   ", "return;", "}", "void main(void)", "{", "vec2 p = -1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;", "p.y *= resolution.y/resolution.x;", "float dirz=1.0/tan(cam_fov*0.5*pi/180.0);", "#if NEGATE_Z", "dirz=-dirz;", "#endif", "//dirz=-2.5;", "vec3 dir=normalize(vec3(p.x,p.y,dirz));", "dir=(camera_matrix*vec4(dir,0.0)).xyz;", "//Raymarching the isosurface:", "float dist;", "vec3 multiplier=vec3(1.0);", "vec3 color=vec3(0.0);", "vec3 org=camera_matrix[3].xyz;/// origin of the ray", "float min_dist=0.0, max_dist=1.0E4;", "#if USE_BOUNDING_VOLUME", "if(!RayCylinderIntersect(org, dir, min_dist, max_dist)) {", "discard;", "return;", "}", "min_dist=max(min_dist,0.0);", "#endif", "RaytraceFoggy(org, dir, min_dist, max_dist, color, multiplier);", "vec3 col = pow(color, vec3(gamma_correction))*final_colour_scale;", "float a = 1.0 - (multiplier.r);", "gl_FragColor = vec4(col, pow(a, storm_alpha_correction));", "}"].join("\n");

    return IFLTornadoShader;

  })();

  IFLTornadoShaderWin = (function() {

    IFLTornadoShaderWin.prototype.uniforms = null;

    function IFLTornadoShaderWin() {
      this.uniforms = {
        "tDiffuse": {
          type: "t",
          value: null
        },
        "time": {
          type: "f",
          value: 0
        },
        "resolution": {
          type: "v2",
          value: new THREE.Vector2(0, 0)
        },
        "camera_matrix": {
          type: "m4",
          value: new THREE.Matrix4()
        },
        "light_harshness": {
          type: "f",
          value: 0.3
        },
        "light_darkness": {
          type: "f",
          value: 1.0
        },
        "cloud_edge_sharpness": {
          type: "f",
          value: 1.0
        },
        "storm_tint": {
          type: "v3",
          value: new THREE.Vector3(1, 1, 1)
        },
        "final_colour_scale": {
          type: "f",
          value: 10.0
        },
        "gamma_correction": {
          type: "f",
          value: 1.7
        },
        "environment_rotation": {
          type: "f",
          value: 0.2
        }
      };
    }

    IFLTornadoShaderWin.prototype.vertexShader = ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\n");

    IFLTornadoShaderWin.prototype.fragmentShader = ["#ifdef GL_ES", "precision mediump float;", "#endif", "/// change these to 0 to disable specific features", "#define BENT 1", "#define FAKE_DIRECTIONAL_LIGHT 1", "#define ENVIRONMENT_TEXTURE 0", "#define NEGATE_Z 1  /// set to 1 for production viewer to match opengl convention", "#define USE_BOUNDING_VOLUME 1", "const float cam_fov=60.0;", "const float pi=3.141592654;", "const float tornado_height=80.0;/// how tall is the tornado", "#if BENT", "const float bend_height=50.0;", "const float bend_displacement=20.0;/// Watch out for bounding volume. The tornado's radius is about 25 units.", "#endif", "const float tornado_bounding_radius=30.0; /// = max(pow(tornado_height,1.5)*0.03, bend_displacement)+10;", "uniform float environment_rotation; // 0 is 0 degrees, 0.5 is 180 degrees, 1 is 360 degrees", "uniform float light_harshness;/// adjust these two parameters to chage the look of tornado.", "uniform float light_darkness;", "uniform float cloud_edge_sharpness;/// decrease to make fuzzier edge.", "uniform vec3 storm_tint;", "uniform float final_colour_scale;", "uniform float gamma_correction;", "const float spin_speed=0.2;", "const int number_of_steps=180;/// number of isosurface raytracing steps", "const float base_step_scaling=0.9;/// Larger values allow for faster rendering but cause rendering artifacts. When stepping the isosurface, the value is multiplied by this number to obtain the distance of each step", "const float min_step_size=1.0;/// Minimal step size, this value is added to the step size, larger values allow to speed up the rendering at expense of artifacts.", "/// input values passed into this shader", "uniform float time;/// use for blinking effects", "uniform vec2 resolution;/// screen resolution", "uniform mat4 camera_matrix; /// transform from camera to the world (not from the world to the camera", "uniform sampler2D tDiffuse;", "const vec3 towards_sun=vec3(1,1,5.0);", "float hash( float n )", "{", "return fract(sin(n)*43758.5453);", "}", "float snoise( in vec3 x )", "{", "vec3 p = floor(x);", "vec3 f = fract(x);", "f = f*f*(3.0-2.0*f);", "float n = p.x + p.y*57.0+p.z*137.0;", "float res = 1.0-2.0*mix(", "mix(mix( hash(n+  0.0), hash(n+  1.0),f.x), mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),", "mix(mix( hash(n+  137.0), hash(n+  138.0),f.x), mix( hash(n+ 57.0+137.0), hash(n+ 58.0+137.0),f.x),f.y),", "f.z", ");", "return res;", "}", "mat2 Spin(float angle){", "return mat2(cos(angle),-sin(angle),sin(angle),cos(angle));", "}", "float ridged(float f){", "return 1.0-2.0*abs(f);", "}", "float sigmoid(float f){", "if(f<0.0)return 0.0;", "if(f>1.0)return 1.0;", "return f*f*(3.0-f*2.0);", "}", "float Shape(vec3 q)/// the isosurface shape function, the surface is at o(q)=0", "{ ", "float t=time;", "if(q.z<0.0)return length(q);", "#if BENT", "q.x+=sigmoid(1.0-q.z/bend_height)*bend_displacement;", "#endif", "vec3 spin_pos=vec3(Spin(t-sqrt(q.z))*q.xy,q.z-t*5.0);", "float zcurve=pow(q.z,1.5)*0.03;", "float v1=clamp(zcurve*0.2,0.1,1.0)*snoise(spin_pos*vec3(0.1,0.1,0.1))*5.0;", "float v=abs(length(q.xy)-zcurve)-5.5-v1;", "v=v-ridged(snoise(vec3(Spin(t*1.5+0.1*q.z)*q.xy,q.z-t*4.0)*0.3))*1.2;", "v+=max(0.0,q.z-tornado_height);", "return v;", "}", "vec2 TextureCoord(vec3 q){", "#if BENT", "q.x+=sigmoid(1.0-q.z/bend_height)*bend_displacement;", "#endif", "return vec2(atan(q.y,q.x)*(0.5/pi)+environment_rotation, 1.0-q.z/tornado_height);", "}", "//Normalized gradient of the field at the point q , used as surface normal", "vec3 GetNormal(vec3 q)", "{", "vec3 f=vec3(0.5,0.0,0.0);", "float b=Shape(q);", "return normalize(vec3(Shape(q+f.xyy)-b, Shape(q+f.yxy)-b, Shape(q+f.yyx)-b));", "}", "void Fog_(float dist, out vec3 colour, out vec3 multiplier){/// calculates fog colour, and the multiplier for the colour of item behind the fog. If you do two intervals consecutively it will calculate the result correctly.", "vec3 fog=exp(-dist*vec3(0.03,0.05,0.1)*0.2);", "colour=vec3(1.0)-fog;", "multiplier=fog;/// (1.0-a)+a*(1.0-b + b*x) = 1.0-a+a-ab+abx = 1.0-ab+abx", "}", "void FogStep(float dist, vec3 fog_absorb, vec3 fog_reemit, inout vec3 colour, inout vec3 multiplier){/// calculates fog colour, and the multiplier for the colour of item behind the fog. If you do two intervals consecutively it will calculate the result correctly.", "vec3 fog=exp(-dist*fog_absorb);", "colour+=multiplier*(storm_tint-fog)*fog_reemit;", "multiplier*=fog;/// (1.0-a)+a*(1.0-b + b*x) = 1.0-a+a-ab+abx = 1.0-ab+abx", "}", "bool RayCylinderIntersect(vec3 org, vec3 dir, out float min_dist, out float max_dist){ ", "vec2 p=org.xy;", "vec2 d=dir.xy;", "float r=tornado_bounding_radius;", "float a=dot(d,d)+1.0E-10;/// A in quadratic formula , with a small constant to avoid division by zero issue", "float det, b;", "b = -dot(p,d); /// -B/2 in quadratic formula", "/// AC = (p.x*p.x + p.y*p.y + p.z*p.z)*dd + r*r*dd ", "det=(b*b) - dot(p,p)*a + r*r*a;/// B^2/4 - AC = determinant / 4", "if (det<0.0){", "return false;", "}", "det= sqrt(det); /// already divided by 2 here", "min_dist= (b - det)/a; /// still needs to be divided by A", "max_dist= (b + det)/a;  ", "if(max_dist>0.0){", "return true;", "}else{", "return false;", "}", "}", "void RaytraceFoggy(vec3 org, vec3 dir, float min_dist, float max_dist, inout vec3 colour, inout vec3 multiplier){", "vec3 q=org+dir*min_dist;", "vec3 pp;", "float d=0.0;", "float old_d=d;", "float dist=min_dist;", "float step_scaling=base_step_scaling;", "const float extra_step=min_step_size;", "for(int i=0;i<number_of_steps;i++)", "{", "old_d=d;", "float density=-Shape(q);", "d=max(density*step_scaling,0.0);", "float step_dist=d+extra_step;", "if(density>0.0){", "float d2=-Shape(q+towards_sun);", "//float brightness=exp(-0.7*clamp(d2,-10.0,20.0));", "float v=-0.6*density;", "#if FAKE_DIRECTIONAL_LIGHT", "v-=clamp(d2*light_harshness,0.0,light_darkness);", "#endif", "float brightness=exp(v);", "vec3 fog_colour=vec3(brightness);", "#if ENVIRONMENT_TEXTURE", "vec3 tx_colour=texture2D(tDiffuse, TextureCoord(q)).xyz;", "fog_colour*=tx_colour;          ", "#endif", "FogStep(step_dist*0.2, clamp(density*cloud_edge_sharpness, 0.0, 1.0)*vec3(1,1,1), fog_colour, colour, multiplier);", "}", "if(dist>max_dist || multiplier.x<0.01){", "return;", "}", "dist+=step_dist; ", "q=org+dist*dir;", "}   ", "return;", "}", "void main(void)", "{", "vec2 p = -1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;", "p.y *= resolution.y/resolution.x;", "float dirz=1.0/tan(cam_fov*0.5*pi/180.0);", "#if NEGATE_Z", "dirz=-dirz;", "#endif", "//dirz=-2.5;", "vec3 dir=normalize(vec3(p.x,p.y,dirz));", "dir=(camera_matrix*vec4(dir,0.0)).xyz;", "//Raymarching the isosurface:", "float dist;", "vec3 multiplier=vec3(1.0);", "vec3 color=vec3(0.0);", "vec3 org=camera_matrix[3].xyz;/// origin of the ray", "float min_dist=0.0, max_dist=1.0E4;", "#if USE_BOUNDING_VOLUME", "if(!RayCylinderIntersect(org, dir, min_dist, max_dist)){", "return;", "}", "min_dist=max(min_dist,0.0);", "#endif", "RaytraceFoggy(org, dir, min_dist, max_dist, color, multiplier);", "//vec3 col=color*brightness+multiplier*vec3(0.05,0.07,0.2);", "//gl_FragColor=vec4(col , 1.0);", "vec3 col = pow(color, vec3(gamma_correction))*final_colour_scale; //ContrastSaturationBrightness(color, 0.9, 1.4); // Adjust contrast / brightness", "float a = 1.01 - 1.01*multiplier.r;", "gl_FragColor = vec4(col, a);", "}"].join("\n");

    return IFLTornadoShaderWin;

  })();

  IFLWindyParticlesShader = (function() {

    IFLWindyParticlesShader.prototype.uniforms = null;

    function IFLWindyParticlesShader() {
      this.uniforms = THREE.UniformsUtils.merge([
        THREE.UniformsLib["particle"], THREE.UniformsLib["shadowmap"], {
          "diffuseMultiplier": {
            type: "f",
            value: 2
          },
          "alphaMultiplier": {
            type: "f",
            value: 0.3
          },
          "windMin": {
            type: "v2",
            value: new THREE.Vector2(-400, -800)
          },
          "windSize": {
            type: "v2",
            value: new THREE.Vector2(1000, 1000)
          },
          "windDirection": {
            type: "v3",
            value: new THREE.Vector3(1, 0, 0)
          },
          "tWindForce": {
            type: "t",
            value: null
          },
          "windScale": {
            type: "f",
            value: 10.0
          },
          "time": {
            type: "f",
            value: 0.0
          }
        }
      ]);
    }

    IFLWindyParticlesShader.prototype.vertexShader = ["uniform float size;", "uniform float scale;", "#ifdef VERTEX_TEXTURES", "uniform vec2 windMin;", "uniform vec2 windSize;", "uniform vec3 windDirection;", "uniform sampler2D tWindForce;", "uniform float windScale;", "#endif", "uniform float time;", "attribute float speed;", "varying float fSpeed;", THREE.ShaderChunk["color_pars_vertex"], THREE.ShaderChunk["shadowmap_pars_vertex"], "void main() {", "vec4 pos = vec4(position , 1.0);", "vec4 mvPosition;", "#ifdef VERTEX_TEXTURES", "vec4 wpos = modelMatrix * vec4( position, 1.0 );", "wpos.z = -wpos.z;", "vec2 totPos = wpos.xz - windMin;", "vec2 windUV = totPos / windSize;", "float vWindForce = texture2D(tWindForce,windUV).x;", "float windMod = (1.0 - vWindForce) * windScale;", "pos.x += windMod * windDirection.x;", "pos.y += windMod * windDirection.y;", "pos.z += windMod * windDirection.z;", "#endif", "mvPosition = modelViewMatrix *  pos;", "fSpeed = speed;", "float fSize = size * (1.0 + sin(time * speed));", "#ifdef USE_SIZEATTENUATION", "gl_PointSize = fSize * ( scale / length( mvPosition.xyz ) );", "#else", "gl_PointSize = fSize;", "#endif", "gl_Position = projectionMatrix * mvPosition;", THREE.ShaderChunk["worldpos_vertex"], THREE.ShaderChunk["shadowmap_vertex"], "}"].join("\n");

    IFLWindyParticlesShader.prototype.fragmentShader = ["uniform vec3 psColor;", "uniform float opacity;", "uniform float diffuseMultiplier;", "uniform float alphaMultiplier;", "varying float fSpeed;", "uniform float time;", THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_particle_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], THREE.ShaderChunk["shadowmap_pars_fragment"], "void main() {", "gl_FragColor = vec4( psColor, opacity );", "#ifdef USE_MAP", "gl_FragColor = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ) * diffuseMultiplier;", "gl_FragColor.w = alphaMultiplier * (1.0 + sin(time * fSpeed));", "#endif", THREE.ShaderChunk["alphatest_fragment"], THREE.ShaderChunk["color_fragment"], THREE.ShaderChunk["shadowmap_fragment"], THREE.ShaderChunk["fog_fragment"], "}"].join("\n");

    return IFLWindyParticlesShader;

  })();

  IFLLoader = (function() {

    IFLLoader.prototype.IFLVertexAttribute = {
      POSITION: 0,
      UV: 1,
      NORMALS: 2,
      TANGENTS: 3,
      BINORMALS: 4,
      TEX_TANGENTS: 5,
      TEX_BINORMALS: 6,
      COLOR: 7,
      JOINT_0: 8,
      JOINT_1: 9,
      JOINT_2: 10,
      JOINT_3: 11,
      JOINT_4: 12,
      JOINT_INDICES: 13,
      JOINT_WEIGHTS: 14,
      SECONDARY_UV: 15
    };

    IFLLoader.prototype.library = null;

    IFLLoader.prototype.callback = null;

    IFLLoader.prototype.xhrCallback = null;

    IFLLoader.prototype.callbackProgress = null;

    IFLLoader.prototype.worker = null;

    IFLLoader.prototype.convertTextureIndex = 0;

    IFLLoader.prototype.t = 0;

    IFLLoader.prototype.url = null;

    IFLLoader.prototype.loadingPhase = 0;

    IFLLoader.prototype.totalLoadingPhases = 3;

    IFLLoader.prototype.sky = null;

    IFLLoader.prototype.customMaterialInstancer = null;

    IFLLoader.prototype.pickableObjects = null;

    IFLLoader.prototype.enableMaterialCache = true;

    IFLLoader.prototype.matCache = null;

    IFLLoader.prototype.enableTextureCache = true;

    IFLLoader.prototype.texCache = null;

    IFLLoader.prototype.geometryLib = null;

    IFLLoader.prototype.doCreateModel = true;

    IFLLoader.prototype.debugWarnings = false;

    IFLLoader.prototype.disposed = false;

    IFLLoader.prototype.finalCallBack = null;

    function IFLLoader() {
      this.getNeedsUpdateFlag = __bind(this.getNeedsUpdateFlag, this);
      this.geometryAttributeEnabled = __bind(this.geometryAttributeEnabled, this);
      this.doParseLibrary = __bind(this.doParseLibrary, this);
      this.onXHRReadyStatusChange = __bind(this.onXHRReadyStatusChange, this);
      this.onXHRProgress = __bind(this.onXHRProgress, this);
      this.onWorkerMessage = __bind(this.onWorkerMessage, this);      this.texCache = {};
      this.matCache = {};
      this.geometryLib = [];
      this.t = new Date().getTime();
    }

    IFLLoader.prototype.initWorker = function() {
      this.worker = new Worker('/js/workers/iflworker.js');
      return this.worker.onmessage = this.onWorkerMessage;
    };

    IFLLoader.prototype.onWorkerMessage = function(event) {
      var loaded, subtype, total;
      switch (event.data.type) {
        case "console":
          return console[event.data.action](event.data.msg);
        case "progress":
          loaded = event.data.data.progress;
          total = event.data.data.total;
          subtype = event.data.subtype;
          return this.handleProgress(loaded, total);
        default:
          return this[event.data.callback](event.data.data);
      }
    };

    IFLLoader.prototype.handleProgress = function(loaded, total) {
      var currentUnitBase, currentUnitProgress, totalLoaded, unit;
      if (this.callbackProgress != null) {
        unit = 100 / this.totalLoadingPhases;
        currentUnitBase = unit * this.loadingPhase;
        currentUnitProgress = (loaded * unit) / total;
        totalLoaded = currentUnitBase + currentUnitProgress;
        return this.callbackProgress(totalLoaded, 100);
      }
    };

    IFLLoader.prototype.load = function(url, callback, callbackProgress) {
      if (this.disposed) {
        return;
      }
      this.loadingPhase = 0;
      this.url = url;
      this.callback = callback;
      this.callbackProgress = callbackProgress;
      this.xhr = new XMLHttpRequest();
      this.xhr.onreadystatechange = this.onXHRReadyStatusChange;
      this.xhr.onprogress = this.onXHRProgress;
      this.xhr.open("GET", url, true);
      this.xhr.responseType = "arraybuffer";
      return this.xhr.send(null);
    };

    IFLLoader.prototype.onXHRProgress = function(event) {
      if (event.lengthComputable) {
        return this.handleProgress(event.loaded, event.total);
      }
    };

    IFLLoader.prototype.onXHRReadyStatusChange = function() {
      var response, _ref;
      if (this.disposed) {
        return;
      }
      if (this.xhr.readyState === this.xhr.DONE) {
        if (this.xhr.status === 200 || this.xhr.status === 0) {
          response = (_ref = this.xhr.response) != null ? _ref : this.xhr.mozResponseArrayBuffer;
          if (this.xhrCallback != null) {
            this.xhrCallback(response);
          }
          this.xhrCallback = null;
          this.decompressLibrary(response);
        } else {
          console.error("[ IFLLoader ]: Couldn't load [ " + url + " ] [ " + this.xhr.status + " ]");
        }
      }
      return null;
    };

    IFLLoader.prototype.decompressLibrary = function(data) {
      if (this.disposed) {
        return;
      }
      if ((data == null) || data.length === 0) {
        throw "Error Loading File, length is 0";
      }
      this.t = new Date().getTime();
      this.loadingPhase++;
      this.initWorker();
      this.worker.postMessage({
        type: "inflate",
        data: data,
        callback: "parseLibrary"
      });
      return null;
    };

    IFLLoader.prototype.parseLibrary = function(data) {
      var time;
      if (this.disposed) {
        return;
      }
      if ((data == null) || data.length === 0) {
        throw "Error Decompressing Library, length is 0";
      }
      time = (new Date().getTime() - this.t) / 1000;
      if (this.debugWarnings) {
        console.log("[" + this.url + "] decompression time: " + time + " , raw data length: " + data.length);
      }
      this.loadingPhase++;
      this.t = new Date().getTime();
      this.worker.postMessage({
        type: "kill"
      });
      this.initWorker();
      this.rawData = data;
      this.timer = setTimeout(this.doParseLibrary, 500);
      return null;
    };

    IFLLoader.prototype.doParseLibrary = function() {
      var _ref;
      if (this.disposed) {
        return;
      }
      clearTimeout(this.timer);
      if ((_ref = this.worker) != null) {
        _ref.postMessage({
          type: "convert_library",
          data: this.rawData,
          callback: "onLibraryParsed"
        });
      }
      return null;
    };

    IFLLoader.prototype.onLibraryParsed = function(data) {
      var content, func, time, _i, _len, _ref;
      if (this.disposed) {
        return;
      }
      if (data == null) {
        "Error Parsing library, is null";
      }
      this.library = data;
      time = (new Date().getTime() - this.t) / 1000;
      if (this.debugWarnings) {
        console.log("[" + this.url + "] Library Parse time: " + time);
      }
      for (func in this.IFLLibraryFuncs) {
        this.library[func] = this.IFLLibraryFuncs[func];
      }
      this.library._contentByID = {};
      _ref = this.library._content;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        content = _ref[_i];
        this.library._contentByID[content._reference.id] = content;
      }
      this.t = new Date().getTime();
      this.worker.postMessage({
        type: "kill"
      });
      this.initWorker();
      this.convertTextures();
      return null;
    };

    IFLLoader.prototype.convertTextures = function() {
      var bmp, i, _i, _ref, _ref1, _ref2;
      if (this.disposed) {
        return;
      }
      for (i = _i = _ref = this.convertTextureIndex, _ref1 = this.library._content.length; _i < _ref1; i = _i += 1) {
        if (this.library._content[i].iflType === "IFLBitmap") {
          bmp = this.library._content[i];
          this.convertTextureIndex = i + 1;
          if (bmp._hasOriginalByteArray) {
            this.worker.postMessage({
              type: "parse_jpg",
              image: bmp._savedBytes,
              w: bmp._width,
              h: bmp._height,
              callback: "onTextureConverted"
            });
          } else {
            this.worker.postMessage({
              type: "convert_argb",
              image: bmp._savedBytes,
              w: bmp._width,
              h: bmp._height,
              callback: "onTextureConverted"
            });
          }
          return;
        }
        this.handleProgress(i, this.library._content.length);
      }
      if (this.doCreateModel) {
        this.createModel();
      } else {
        this.callback(this, null);
        if (this.callbackProgress != null) {
          this.callbackProgress(100, 100);
        }
        if ((_ref2 = this.worker) != null) {
          _ref2.postMessage({
            type: "kill"
          });
        }
      }
      return null;
    };

    IFLLoader.prototype.onTextureConverted = function(data) {
      var bmp;
      if (this.disposed) {
        return;
      }
      bmp = this.library._content[this.convertTextureIndex - 1];
      if (data == null) {
        throw "Bitmap " + bmp._reference.id + " contains invalid data";
      }
      bmp.converted = data;
      this.convertTextures();
      return null;
    };

    IFLLoader.prototype.createModel = function(skipCallBack) {
      var root, rootObject, rootObjects, _i, _len, _ref;
      if (this.disposed) {
        return;
      }
      if (this.debugWarnings) {
        console.log(("[" + this.url + "] convert textures time: ") + (new Date().getTime() - this.t) / 1000);
      }
      this.t = new Date().getTime();
      root = new THREE.Object3D();
      rootObjects = this.library.getRootNodes();
      for (_i = 0, _len = rootObjects.length; _i < _len; _i++) {
        rootObject = rootObjects[_i];
        root.add(this.convertNode(rootObject));
      }
      if (this.debugWarnings) {
        console.log(("[" + this.url + "] convert node time: ") + (new Date().getTime() - this.t) / 1000);
      }
      if (!skipCallBack) {
        this.callback(this, root);
        if (this.callbackProgress != null) {
          this.callbackProgress(100, 100);
        }
      }
      if ((_ref = this.worker) != null) {
        _ref.postMessage({
          type: "kill"
        });
      }
      return root;
    };

    IFLLoader.prototype.convertNode = function(iflnode) {
      var child, childID, mat, retEntity, _i, _len, _ref;
      switch (iflnode.iflType) {
        case "IFLMesh":
          retEntity = this.convertMesh(iflnode);
          break;
        default:
          retEntity = new THREE.Object3D();
      }
      retEntity.name = iflnode._reference.id;
      retEntity.matrix = this.convertMatrix4(iflnode._transformMatrix);
      retEntity.scale.getScaleFromMatrix(retEntity.matrix);
      mat = new THREE.Matrix4().extractRotation(retEntity.matrix);
      retEntity.rotation.setEulerFromRotationMatrix(retEntity.matrix, retEntity.eulerOrder);
      retEntity.position.getPositionFromMatrix(retEntity.matrix);
      _ref = iflnode.childIDs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        childID = _ref[_i];
        child = this.library.getContent(childID.id);
        if (child) {
          retEntity.add(this.convertNode(child));
        }
      }
      return retEntity;
    };

    IFLLoader.prototype.convertMatrix4 = function(m) {
      return new THREE.Matrix4(m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]);
    };

    IFLLoader.prototype.convertMesh = function(iflmesh) {
      var bone, color_length, colors, geometry, index, isSkinnedMesh, material, normals, positions, ret, seconduvs, skinIndices, skinWeights, tangents, uvs, _i, _len, _ref;
      positions = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.POSITION];
      uvs = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.UV];
      if (uvs == null) {
        if (this.debugWarnings) {
          console.warn("Mesh " + iflmesh._reference.id + " has no UVs");
        }
      }
      seconduvs = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.SECONDARY_UV];
      normals = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.NORMALS];
      if (normals == null) {
        if (this.debugWarnings) {
          console.warn("Mesh " + iflmesh._reference.id + " has no Normals");
        }
      }
      tangents = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.TEX_TANGENTS];
      colors = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.COLOR];
      color_length = 0;
      if (colors != null) {
        color_length = iflmesh.verticesDecomposed._vertexAttributeLengths[this.IFLVertexAttribute.COLOR];
      }
      skinWeights = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.JOINT_WEIGHTS];
      skinIndices = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.JOINT_INDICES];
      isSkinnedMesh = (skinWeights != null) && (skinIndices != null);
      if (positions.length < 65535 && !isSkinnedMesh && iflmesh.subMeshes.length === 1 && !this.pickableObjects[iflmesh._reference.id] && (seconduvs == null)) {
        geometry = this.convertBufferGeometry(iflmesh, positions, uvs, normals, tangents, colors, color_length, isSkinnedMesh, skinWeights, skinIndices, seconduvs);
      } else {
        geometry = this.convertGeometry(iflmesh, positions, uvs, normals, tangents, colors, color_length, isSkinnedMesh, skinWeights, skinIndices, seconduvs);
      }
      geometry.hasTangents = tangents != null;
      this.geometryLib.push(geometry);
      material = iflmesh.subMeshes.length === 1 ? geometry.materials[0] : new THREE.MeshFaceMaterial;
      if (material != null) {
        material.skinning = isSkinnedMesh;
      }
      if (isSkinnedMesh) {
        ret = new THREE.SkinnedMesh(geometry, material);
      } else {
        ret = new THREE.Mesh(geometry, material);
      }
      if (isSkinnedMesh) {
        _ref = ret.geometry.bones;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          bone = _ref[index];
          ret.boneInverses[index] = bone.invBindMatrix;
        }
      }
      ret.castShadow = ret.receiveShadow = true;
      if (this.pickableObjects[iflmesh._reference.id] === true) {
        ret.pickable = true;
      }
      return ret;
    };

    IFLLoader.prototype.convertBufferGeometry = function(iflmesh, positions, uvs, normals, tangents, colors, color_length, isSkinnedMesh, skinWeights, skinIndices, seconduvs) {
      var geometry, indexBuffer, mat;
      geometry = new THREE.BufferGeometry;
      geometry.dynamic = false;
      indexBuffer = iflmesh.subMeshes[0].indexBuffer._rawData;
      geometry.attributes = {};
      geometry.attributes.index = {
        itemSize: 1,
        array: new Int16Array(indexBuffer.length),
        numItems: indexBuffer.length
      };
      geometry.attributes.index.array.set(indexBuffer);
      geometry.attributes.position = {
        itemSize: 3,
        array: positions,
        numItems: positions.length
      };
      if (uvs) {
        geometry.attributes.uv = {
          itemSize: 2,
          array: uvs,
          numItems: uvs.length
        };
      }
      if (normals) {
        geometry.attributes.normal = {
          itemSize: 3,
          array: normals,
          numItems: normals.length
        };
      }
      if (colors) {
        geometry.attributes.color = {
          itemSize: color_length,
          array: colors,
          numItems: colors.length
        };
      }
      if (tangents) {
        geometry.attributes.tangent = {
          itemSize: 3,
          array: tangents,
          numItems: tangents.length
        };
      }
      geometry.offsets = [
        {
          start: 0,
          count: indexBuffer.length,
          index: 0
        }
      ];
      mat = this.convertMaterial(iflmesh.subMeshes[0], iflmesh._reference.id);
      geometry.materials = [mat];
      return geometry;
    };

    IFLLoader.prototype.convertGeometry = function(iflmesh, positions, uvs, normals, tangents, colors, color_length, isSkinnedMesh, skinWeights, skinIndices, seconduvs) {
      var cachedColors, cachedNormals, cachedPositions, cachedSecondUVs, cachedTangents, cachedUVs, face, faceIndex, fakeUV, fvUV2, fvUVs, geometry, i, i1, i12, i13, i14, i2, i22, i23, i24, i3, i32, i33, i34, ib, ibi, material, maxRadiusSq, p1, p2, p3, positionRearrangment, positionVec, primaryUVIndex, radiusSq, reasons, second, secondaryUVIndex, stepSize, subMesh, subMeshIndex, switchUVs, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2, _step;
      reasons = "";
      if (positions.length >= 65535) {
        reasons += "[Vertices > 65535]";
      }
      if (isSkinnedMesh) {
        reasons += "[Is Skinned Mesh]";
      }
      if (iflmesh.subMeshes.length > 1) {
        reasons += "[Has Submeshes]";
      }
      if (this.pickableObjects[iflmesh._reference.id] === true) {
        reasons += "[Is Marked as Pickable]";
      }
      if (seconduvs != null) {
        reasons += "[Has Second UVs]";
      }
      if (this.debugWarnings) {
        console.warn("[" + this.url + "] Warning: [" + iflmesh._reference.id + "] is not using BufferGeometry (faster method) because " + reasons);
      }
      geometry = new THREE.Geometry;
      geometry.dynamic = false;
      if (seconduvs != null) {
        geometry.faceVertexUvs[1] = [];
      }
      cachedUVs = [];
      cachedSecondUVs = [];
      cachedNormals = [];
      cachedTangents = [];
      cachedColors = [];
      cachedPositions = {};
      positionRearrangment = {};
      maxRadiusSq = 0;
      if (positions) {
        for (i = _i = 0, _ref = positions.length; _i < _ref; i = _i += 3) {
          if (isSkinnedMesh) {
            positionVec = new THREE.Vector3(positions[i], positions[i + 1], positions[i + 2]);
            geometry.vertices.push(positionVec);
            radiusSq = positionVec.lengthSq();
            if (radiusSq > maxRadiusSq) {
              maxRadiusSq = radiusSq;
            }
          } else {
            p1 = positions[i];
            p2 = positions[i + 1];
            p3 = positions[i + 2];
            if (!cachedPositions[p1 + "_" + p2 + "_" + p3]) {
              positionVec = new THREE.Vector3(p1, p2, p3);
              radiusSq = positionVec.lengthSq();
              if (radiusSq > maxRadiusSq) {
                maxRadiusSq = radiusSq;
              }
              cachedPositions[p1 + "_" + p2 + "_" + p3] = {
                index: geometry.vertices.length,
                vertex: positionVec
              };
              geometry.vertices.push(cachedPositions[p1 + "_" + p2 + "_" + p3].vertex);
            }
            positionRearrangment[i / 3] = cachedPositions[p1 + "_" + p2 + "_" + p3].index;
          }
        }
      } else {
        return new THREE.Object3D();
      }
      geometry.boundingSphere = {
        radius: Math.sqrt(maxRadiusSq)
      };
      if (isSkinnedMesh) {
        stepSize = iflmesh.verticesDecomposed._vertexAttributeLengths[this.IFLVertexAttribute.JOINT_INDICES];
        if (stepSize <= 2) {
          for (i = _j = 0, _ref1 = skinIndices.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = _j += stepSize) {
            second = Math.floor(i + stepSize / 2);
            geometry.skinWeights.push(new THREE.Vector4(skinWeights[i], skinWeights[second], 0, 0));
            geometry.skinIndices.push(new THREE.Vector4(skinIndices[i], skinIndices[second], 0, 0));
          }
        }
        geometry.bones = this.convertBones(iflmesh);
        geometry.animation = this.convertAnimations(geometry.bones, iflmesh);
      }
      fakeUV = new THREE.UV(0, 0);
      _ref2 = iflmesh.subMeshes;
      for (subMeshIndex = _k = 0, _len = _ref2.length; _k < _len; subMeshIndex = ++_k) {
        subMesh = _ref2[subMeshIndex];
        material = this.convertMaterial(subMesh, iflmesh._reference.id);
        material.skinning = isSkinnedMesh;
        switchUVs = material.switchUVs === true;
        geometry.materials.push(material);
        ib = subMesh.indexBuffer._rawData;
        for (ibi = _l = 0, _len1 = ib.length, _step = 3; _l < _len1; ibi = _l += _step) {
          i1 = ib[ibi];
          i2 = ib[ibi + 1];
          i3 = ib[ibi + 2];
          i12 = i1 * 2;
          i22 = i2 * 2;
          i32 = i3 * 2;
          i13 = i1 * 3;
          i23 = i2 * 3;
          i33 = i3 * 3;
          i14 = i1 * 4;
          i24 = i2 * 4;
          i34 = i3 * 4;
          if (isSkinnedMesh) {
            face = new THREE.Face3(i1, i2, i3, null, null, subMeshIndex);
          } else {
            face = new THREE.Face3(positionRearrangment[i1], positionRearrangment[i2], positionRearrangment[i3], null, null, subMeshIndex);
          }
          faceIndex = geometry.faces.length;
          primaryUVIndex = switchUVs ? 1 : 0;
          secondaryUVIndex = switchUVs ? 0 : 1;
          fvUVs = geometry.faceVertexUvs[primaryUVIndex][faceIndex] = [];
          if (uvs != null) {
            fvUVs.push(cachedUVs[i12] ? cachedUVs[i12] : cachedUVs[i12] = new THREE.UV(uvs[i12], uvs[i12 + 1]));
            fvUVs.push(cachedUVs[i22] ? cachedUVs[i22] : cachedUVs[i22] = new THREE.UV(uvs[i22], uvs[i22 + 1]));
            fvUVs.push(cachedUVs[i32] ? cachedUVs[i32] : cachedUVs[i32] = new THREE.UV(uvs[i32], uvs[i32 + 1]));
          } else {
            fvUVs.push(fakeUV);
            fvUVs.push(fakeUV);
            fvUVs.push(fakeUV);
          }
          if (seconduvs != null) {
            fvUV2 = geometry.faceVertexUvs[secondaryUVIndex][faceIndex] = [];
            fvUV2.push(cachedSecondUVs[i12] ? cachedSecondUVs[i12] : cachedSecondUVs[i12] = new THREE.UV(seconduvs[i12], seconduvs[i12 + 1]));
            fvUV2.push(cachedSecondUVs[i22] ? cachedSecondUVs[i22] : cachedSecondUVs[i22] = new THREE.UV(seconduvs[i22], seconduvs[i22 + 1]));
            fvUV2.push(cachedSecondUVs[i32] ? cachedSecondUVs[i32] : cachedSecondUVs[i32] = new THREE.UV(seconduvs[i32], seconduvs[i32 + 1]));
          }
          if (normals != null) {
            face.vertexNormals.push(cachedNormals[i13] ? cachedNormals[i13] : cachedNormals[i13] = new THREE.Vector3(normals[i13], normals[i13 + 1], normals[i13 + 2]));
            face.vertexNormals.push(cachedNormals[i23] ? cachedNormals[i23] : cachedNormals[i23] = new THREE.Vector3(normals[i23], normals[i23 + 1], normals[i23 + 2]));
            face.vertexNormals.push(cachedNormals[i33] ? cachedNormals[i33] : cachedNormals[i33] = new THREE.Vector3(normals[i33], normals[i33 + 1], normals[i33 + 2]));
          }
          if (tangents != null) {
            face.vertexTangents.push(cachedTangents[i13] ? cachedTangents[i13] : cachedTangents[i13] = new THREE.Vector4(tangents[i13], tangents[i13 + 1], tangents[i13 + 2], 1));
            face.vertexTangents.push(cachedTangents[i23] ? cachedTangents[i23] : cachedTangents[i23] = new THREE.Vector4(tangents[i23], tangents[i23 + 1], tangents[i23 + 2], 1));
            face.vertexTangents.push(cachedTangents[i33] ? cachedTangents[i33] : cachedTangents[i33] = new THREE.Vector4(tangents[i33], tangents[i33 + 1], tangents[i33 + 2], 1));
          }
          if (colors != null) {
            if (color_length === 3) {
              face.vertexColors.push(cachedColors[i13] ? cachedColors[i13] : cachedColors[i13] = new THREE.Color().setRGB(colors[i13], colors[i13 + 1], colors[i13 + 2]));
              face.vertexColors.push(cachedColors[i23] ? cachedColors[i23] : cachedColors[i23] = new THREE.Color().setRGB(colors[i23], colors[i23 + 1], colors[i23 + 2]));
              face.vertexColors.push(cachedColors[i33] ? cachedColors[i33] : cachedColors[i33] = new THREE.Color().setRGB(colors[i33], colors[i33 + 1], colors[i33 + 2]));
            }
            if (color_length === 4) {
              face.vertexColors.push(cachedColors[i14] ? cachedColors[i14] : cachedColors[i14] = new THREE.Color().setRGB(colors[i14], colors[i14 + 1], colors[i14 + 2]));
              face.vertexColors.push(cachedColors[i24] ? cachedColors[i24] : cachedColors[i24] = new THREE.Color().setRGB(colors[i24], colors[i24 + 1], colors[i24 + 2]));
              face.vertexColors.push(cachedColors[i34] ? cachedColors[i34] : cachedColors[i34] = new THREE.Color().setRGB(colors[i34], colors[i34 + 1], colors[i34 + 2]));
            }
          }
          geometry.faces.push(face);
        }
      }
      try {
        geometry.computeCentroids();
      } catch (e) {
        if (this.debugWarnings) {
          console.warn("[" + this.url + "] error computing centroids for " + iflmesh._reference.id);
        }
      }
      try {
        geometry.computeFaceNormals();
      } catch (e) {
        if (this.debugWarnings) {
          console.warn("[" + this.url + "] error computing face normals for " + iflmesh._reference.id);
        }
      }
      return geometry;
    };

    IFLLoader.prototype.convertBones = function(iflmesh) {
      var bind, bindingToJoint, bindings, bindpose, decomp, i, iflparent, invBindMatrix, jo, joint, jointMatrix, jointToBinding, jointToIndex, joints, p, parent, pos, root, rotq, scale, sk, skeletonJoint, _i, _j, _k, _l, _len, _m, _ref, _ref1, _ref2, _ref3;
      joints = [];
      jointToBinding = [];
      bindingToJoint = [];
      bindings = iflmesh.jointBindings;
      for (i = _i = 0, _ref = bindings.length; _i < _ref; i = _i += 1) {
        jo = this.library.getContent(bindings[i].jointID.id);
        if (jo == null) {
          return null;
        }
        jointToBinding[jo._reference.id] = i;
        bindingToJoint[i] = jo._reference.id;
        joints.push(jo);
      }
      for (_j = 0, _len = joints.length; _j < _len; _j++) {
        joint = joints[_j];
        if (!this.library.findJointParent(joint)) {
          root = joint;
          break;
        }
      }
      bindpose = this.convertMatrix4(iflmesh.bindPoseMatrix);
      sk = [];
      sk.name = root.id;
      jointToIndex = [];
      skeletonJoint;
      for (i = _k = 0, _ref1 = bindings.length; _k < _ref1; i = _k += 1) {
        skeletonJoint = {};
        skeletonJoint.name = joints[i]._reference.id;
        jointMatrix = this.convertMatrix4(joints[i]._transformMatrix);
        invBindMatrix = this.convertMatrix4(bindings[i].inverseBindMatrix);
        decomp = jointMatrix.decompose();
        skeletonJoint.pos = [decomp[0].x, decomp[0].y, decomp[0].z];
        skeletonJoint.rotq = [decomp[1].x, decomp[1].y, decomp[1].z, decomp[1].w];
        jointToIndex[skeletonJoint.name] = sk.length;
        skeletonJoint.invBindMatrix = invBindMatrix;
        skeletonJoint.jointMatrix = jointMatrix;
        sk.push(skeletonJoint);
      }
      for (i = _l = 0, _ref2 = bindings.length; _l < _ref2; i = _l += 1) {
        skeletonJoint = sk[i];
        parent = this.library.findJointParent(joints[i]);
        if (parent == null) {
          skeletonJoint.parent = -1;
        } else {
          if (parent.iflType === "IFLJoint") {
            if (jointToIndex[parent._reference.id] !== void 0) {
              skeletonJoint.parent = jointToIndex[parent._reference.id];
            } else {
              skeletonJoint.parent = -1;
            }
          } else {
            skeletonJoint.parent = -1;
          }
        }
      }
      for (i = _m = 0, _ref3 = bindings.length; _m < _ref3; i = _m += 1) {
        skeletonJoint = sk[i];
        bind = skeletonJoint.invBindMatrix.clone();
        scale = this.setScale1(bind);
        bind.getInverse(bind);
        if (i !== 0) {
          p = sk[skeletonJoint.parent];
          bind.multiply(p.invBindMatrix, bind);
          iflparent = this.library.findParent(this.library.getContent(skeletonJoint.name));
          if (iflparent.iflType !== "IFLJoint") {
            this.prependNonJointParents(bind, iflparent);
          }
        } else {
          bind.multiply(bindpose, bind);
        }
        decomp = bind.decompose();
        pos = [decomp[0].x, decomp[0].y, decomp[0].z];
        rotq = [decomp[1].x, decomp[1].y, decomp[1].z, decomp[1].w];
        skeletonJoint.pos = pos;
        skeletonJoint.rotq = rotq;
      }
      return sk;
    };

    IFLLoader.prototype.prependNonJointParents = function(bind, iflparent) {
      var otherparent, parentmat, prepended;
      parentmat = this.convertMatrix4(iflparent._transformMatrix);
      prepended = new THREE.Matrix4().multiply(parentmat, bind);
      bind.copy(prepended);
      otherparent = this.library.findParent(iflparent);
      if (otherparent.iflType !== "IFLJoint") {
        this.prependNonJointParents(bind, otherparent);
      }
      return null;
    };

    IFLLoader.prototype.setScale1 = function(m) {
      var x, y, z;
      x = new THREE.Vector3(m.elements[0], m.elements[1], m.elements[2]).length();
      y = new THREE.Vector3(m.elements[4], m.elements[5], m.elements[6]).length();
      z = new THREE.Vector3(m.elements[8], m.elements[9], m.elements[10]).length();
      m.elements[0] /= x;
      m.elements[1] /= x;
      m.elements[2] /= x;
      m.elements[4] /= y;
      m.elements[5] /= y;
      m.elements[6] /= y;
      m.elements[8] /= z;
      m.elements[9] /= z;
      m.elements[10] /= z;
      m.elements[12] /= x;
      m.elements[13] /= y;
      m.elements[14] /= z;
      m.elements[15] = 1;
      return new THREE.Vector3(x, y, z);
    };

    IFLLoader.prototype.findJointParent = function(joint, root) {
      var childID, p, _i, _len, _ref;
      if (root == null) {
        return null;
      }
      _ref = root.childIDs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        childID = _ref[_i];
        if (childID.id === joint._reference.id) {
          return root;
        } else {
          p = findJointParent(joint, this.library.getContent(childID.id));
          if (p) {
            return p;
          }
        }
      }
      return null;
    };

    IFLLoader.prototype.convertAnimations = function(skeleton, iflMesh) {
      var anim, anim3js, anims, bindpose, firstKey, i, j, k, key3js, keys, lastkey, maxTime, numTimes, r, sampler, stillMatDec, stillPos, stillRot, timePerFrame, totalMaxTime, track, track3js, trackLength, _i, _j, _k, _l, _m, _ref, _ref1, _ref2, _ref3;
      anims = this.library.getAnimationsForSkinJoints(iflMesh);
      r = [];
      bindpose = this.convertMatrix4(iflMesh.bindPoseMatrix);
      if (anims.length === 0) {
        anims[0] = {
          _reference: {
            id: "fake"
          },
          tracks: []
        };
      }
      for (i = _i = 0; _i < 1; i = _i += 1) {
        anim3js = {};
        anim3js.name = iflMesh._reference.id + "_" + anims[i]._reference.id;
        anim3js.fps = 30;
        anim3js.hierarchy = [];
        totalMaxTime = 0;
        for (k = _j = 0, _ref = skeleton.length; _j < _ref; k = _j += 1) {
          track = this.getTrackForJoint(skeleton[k], anims[i]);
          stillMatDec = skeleton[k].jointMatrix.decompose();
          maxTime = 0;
          stillPos = skeleton[k].pos;
          stillRot = skeleton[k].rotq;
          if (track != null) {
            track3js = {};
            track3js.parent = skeleton[k].parent;
            track3js.name = "track_" + skeleton[k].name;
            track3js.keys = [];
            sampler = track.sampler;
            trackLength = track.end - track.start;
            numTimes = sampler.times.length;
            timePerFrame = (trackLength / numTimes) * 1000;
            for (j = _k = 0, _ref1 = sampler.times.length; _k < _ref1; j = _k += 1) {
              key3js = {};
              key3js.time = sampler.times[j];
              maxTime = Math.max(key3js.time, maxTime);
              totalMaxTime = Math.max(maxTime, totalMaxTime);
              key3js.pos = [sampler.positions[j].x, sampler.positions[j].y, sampler.positions[j].z];
              key3js.rot = [sampler.orientations[j].x, sampler.orientations[j].y, sampler.orientations[j].z, sampler.orientations[j].w];
              key3js.scl = [1, 1, 1];
              track3js.keys.push(key3js);
            }
          } else {
            console.log("no track for joint " + skeleton[k].name + " creating a fake one");
            anim = anims[i];
            sampler = anim.tracks.length > 0 ? anim.tracks[0].sampler : {
              times: [0, 1]
            };
            track3js = {};
            track3js.name = "fake_track_" + skeleton[k].name;
            track3js.parent = skeleton[k].parent;
            track3js.keys = [];
            for (j = _l = 0, _ref2 = sampler.times.length; _l < _ref2; j = _l += 1) {
              key3js = {};
              key3js.time = sampler.times[j];
              maxTime = Math.max(key3js.time, maxTime);
              totalMaxTime = Math.max(maxTime, totalMaxTime);
              key3js.pos = [stillPos[0], stillPos[1], stillPos[2]];
              key3js.rot = [stillRot[0], stillRot[1], stillRot[2], stillRot[3]];
              key3js.scl = [1, 1, 1];
              track3js.keys.push(key3js);
            }
          }
          anim3js.length = maxTime;
          anim3js.hierarchy.push(track3js);
        }
        for (k = _m = 0, _ref3 = anim3js.hierarchy.length; _m < _ref3; k = _m += 1) {
          keys = anim3js.hierarchy[k].keys;
          lastkey = keys[keys.length - 1];
          firstKey = keys[0];
          if (lastkey.time < totalMaxTime) {
            keys.push({
              time: totalMaxTime,
              pos: lastkey.pos,
              rot: lastkey.rot,
              scl: lastkey.scl
            });
          }
          if (firstKey.time > 0) {
            keys.unshift({
              time: 0,
              pos: firstKey.pos,
              rot: firstKey.rot,
              scl: firstKey.scl
            });
          }
        }
        anim3js.length = totalMaxTime;
        r.push(anim3js);
      }
      return r[0];
    };

    IFLLoader.prototype.getTrackForJoint = function(joint, anim) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = anim.tracks.length; _i < _ref; i = _i += 1) {
        if (anim.tracks[i].target.id === joint.name) {
          return anim.tracks[i];
        }
      }
      return null;
    };

    IFLLoader.prototype.convertMaterial = function(subMesh, meshname) {
      var instanced, matid;
      matid = subMesh.material._reference.id;
      if (!this.matCache[matid] || !this.enableMaterialCache) {
        if (this.customMaterialInstancer != null) {
          instanced = this.customMaterialInstancer.apply(this, [subMesh, meshname]);
          if (instanced != null) {
            this.matCache[matid] = instanced;
          } else {
            this.matCache[matid] = this.convertGenericMaterial(subMesh);
          }
        } else {
          this.matCache[matid] = this.convertGenericMaterial(subMesh);
        }
      }
      return this.matCache[matid];
    };

    IFLLoader.prototype.getMaterialParams = function(subMesh) {
      var params;
      params = {
        color: subMesh.material.diffuse.uintValue,
        ambient: subMesh.material.ambient.uintValue,
        specular: subMesh.material.specular.uintValue,
        map: this.getSubmeshTexture(subMesh.diffuseTextures),
        normalMap: this.getSubmeshTexture(subMesh.normalTextures),
        specularMap: this.getSubmeshTexture(subMesh.specularTextures),
        lightMap: null,
        bumpMap: null,
        reflectivity: subMesh.material.reflectivity,
        shininess: subMesh.material.shininess,
        opacity: subMesh.material.transparency !== 0 && subMesh.material.transparency !== 1 ? 1 - subMesh.material.transparency : 1
      };
      return params;
    };

    IFLLoader.prototype.convertGenericMaterial = function(subMesh) {
      var mat, params;
      params = this.getMaterialParams(subMesh);
      mat = new THREE.MeshLambertMaterial(params);
      if (params.map) {
        mat.transparent = params.map.transparent;
      }
      return mat;
    };

    IFLLoader.prototype.getSubmeshTexture = function(from) {
      if (from.length > 0) {
        return this.getTexture(from[0].id, false);
      }
      return null;
    };

    IFLLoader.prototype.getTexture = function(id) {
      var ret, tex;
      tex = this.library.getContent(id);
      if (tex == null) {
        if (this.debugWarnings) {
          console.warn("[" + this.url + "] Texture " + id + " not found");
        }
        return null;
      }
      if (tex.converted != null) {
        if ((this.texCache[tex._reference.id] == null) || !this.enableTextureCache) {
          this.texCache[tex._reference.id] = ret = new THREE.DataTexture(tex.converted, tex._width, tex._height, tex._hasOriginalByteArray ? THREE.RGBFormat : THREE.RGBAFormat);
        } else {
          ret = this.texCache[tex._reference.id];
        }
      } else {
        if (this.debugWarnings) {
          console.warn("[" + this.url + "] Texture " + id + " was not converted");
        }
      }
      if (ret) {
        ret.needsUpdate = true;
        ret.flipY = false;
        ret.transparent = tex.transparent;
      }
      return ret;
    };

    IFLLoader.prototype.disabledGeometryAttributes = [];

    IFLLoader.prototype.disabledGeometryAttributesValues = [];

    IFLLoader.prototype.geometryAttributeEnabled = function(attrib, value) {
      var geom, index, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      if (!value) {
        this.disabledGeometryAttributes = [];
        this.disabledGeometryAttributesValues = [];
        _ref = this.geometryLib;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          geom = _ref[_i];
          if (((_ref1 = geom.attributes) != null ? _ref1[attrib] : void 0) != null) {
            this.disabledGeometryAttributes.push(geom);
            this.disabledGeometryAttributesValues.push(geom.attributes[attrib]);
            geom.attributes[attrib] = null;
            geom[this.getNeedsUpdateFlag(attrib)] = true;
          }
        }
      } else {
        _ref2 = this.disabledGeometryAttributes;
        for (index = _j = 0, _len1 = _ref2.length; _j < _len1; index = ++_j) {
          geom = _ref2[index];
          geom.attributes[attrib] = this.disabledGeometryAttributesValues[index];
          geom[this.getNeedsUpdateFlag(attrib)] = true;
        }
      }
      return null;
    };

    IFLLoader.prototype.getNeedsUpdateFlag = function(attrib) {
      switch (attrib) {
        case "colors":
          return "colorsNeedUpdate";
        case "vertices":
          return "verticesNeedUpdate";
        case "uv":
          return "uvsNeedUpdate";
        case "uv2":
          return "uvsNeedUpdate";
        case "normals":
          return "normalsNeedUpdate";
      }
      return null;
    };

    IFLLoader.prototype.dispose = function() {
      var obj, _ref, _ref1, _ref2;
      if ((_ref = this.worker) != null) {
        _ref.onmessage = function() {
          return console.log("[" + this.url + "] Message aborted");
        };
      }
      try {
        if ((_ref1 = this.xhr) != null) {
          _ref1.abort();
        }
      } catch (_error) {}
      try {
        if ((_ref2 = this.worker) != null) {
          _ref2.terminate();
        }
      } catch (_error) {}
      delete this.worker;
      delete this.matCache;
      delete this.texCache;
      delete this.geometryLib;
      delete this.customMaterialInstancer;
      delete this.library;
      delete this.callback;
      delete this.callbackProgress;
      delete this.sky;
      delete this.finalCallBack;
      this.disposed = true;
      for (obj in this) {
        delete this[obj];
      }
      return null;
    };

    IFLLoader.prototype.IFLLibraryFuncs = {
      getContent: function(id) {
        return this._contentByID[id];
      },
      getRootNodes: function() {
        return this.getRootNodesIn(this._content);
      },
      isIFLNode: function(object) {
        return object.iflType === "IFLNode" || object.iflType === "IFLJoint" || object.iflType === "IFLMesh" || object.iflType === "IFLMeshContainer" || object.iflType === "IFLLight" || object.iflType === "IFLCamera";
      },
      getDiffuseTexture: function(subMesh) {
        return this.getContent(subMesh._diffuseTextures[0].id);
      },
      getRootNodesIn: function(lib) {
        var k, m, meshesChildrenOfSomeone, meshesNotChildrenOfSomeone, tm, _i, _j, _len, _len1, _ref;
        meshesChildrenOfSomeone = [];
        meshesNotChildrenOfSomeone = [];
        for (_i = 0, _len = lib.length; _i < _len; _i++) {
          tm = lib[_i];
          if (!(this.isIFLNode(tm))) {
            continue;
          }
          if (meshesChildrenOfSomeone.indexOf(tm._reference.id) === -1) {
            meshesNotChildrenOfSomeone.push(tm._reference.id);
          }
          _ref = tm.childIDs;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            m = _ref[_j];
            if (meshesNotChildrenOfSomeone.indexOf(m.id) !== -1) {
              meshesNotChildrenOfSomeone.splice(meshesNotChildrenOfSomeone.indexOf(m.id), 1);
            }
            meshesChildrenOfSomeone.push(m.id);
          }
        }
        return (function() {
          var _k, _ref1, _results;
          _results = [];
          for (k = _k = 0, _ref1 = meshesNotChildrenOfSomeone.length; _k < _ref1; k = _k += 1) {
            _results.push(this.getContent(meshesNotChildrenOfSomeone[k]));
          }
          return _results;
        }).call(this);
      },
      isRoot: function(contentID) {
        return this.isRootWithin(contentID, this._content);
      },
      isRootWithin: function(contentID, context) {
        var childID, content, _i, _j, _len, _len1, _ref;
        for (_i = 0, _len = context.length; _i < _len; _i++) {
          content = context[_i];
          if (this.isIFLNode(content)) {
            _ref = content.childIDs;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              childID = _ref[_j];
              if (childID.id === contentID) {
                return false;
              }
            }
          }
        }
        return true;
      },
      findParent: function(node, parent) {
        var ch, childID, p, rootNode, rootNodes, _i, _j, _len, _len1, _ref;
        if (parent == null) {
          rootNodes = this.getRootNodes();
          for (_i = 0, _len = rootNodes.length; _i < _len; _i++) {
            rootNode = rootNodes[_i];
            p = this.findParent(node, rootNode);
            if (p != null) {
              return p;
            }
          }
        } else {
          _ref = parent.childIDs;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            childID = _ref[_j];
            if (childID.id === node._reference.id) {
              return parent;
            } else {
              ch = this.getContent(childID.id);
              if (ch) {
                p = this.findParent(node, ch);
                if (p != null) {
                  return p;
                }
              }
            }
          }
        }
        return null;
      },
      getAnimationsForSkinJoints: function(skin) {
        var animRet, doneAnims, jobj, joint, jointAnimation, jointAnimations, r, track, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        r = [];
        doneAnims = [];
        _ref = skin.jointBindings;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          jobj = _ref[_i];
          joint = jobj.jointID;
          jointAnimations = this.getAnimationsForID(joint.id, false);
          if ((jointAnimations != null)) {
            for (_j = 0, _len1 = jointAnimations.length; _j < _len1; _j++) {
              jointAnimation = jointAnimations[_j];
              if (!doneAnims[jointAnimation._reference.id]) {
                doneAnims[jointAnimation._reference.id] = {
                  tracks: [],
                  iflType: "IFLAnimation"
                };
                doneAnims[jointAnimation._reference.id]._reference = {
                  id: jointAnimation._reference.id,
                  iflType: "IFLID"
                };
                r.push(doneAnims[jointAnimation._reference.id]);
              }
              animRet = doneAnims[jointAnimation._reference.id];
              _ref1 = jointAnimation.tracks;
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                track = _ref1[_k];
                if (animRet.tracks.indexOf(track) === -1) {
                  animRet.tracks.push(track);
                }
              }
            }
          }
        }
        return r;
      },
      getAnimationsForID: function(id) {
        var animation, r, track, tracks, _i, _j, _len, _len1, _ref;
        r = [];
        _ref = this._content;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          animation = _ref[_i];
          if (!(animation.iflType === "IFLAnimation")) {
            continue;
          }
          tracks = animation.tracks;
          for (_j = 0, _len1 = tracks.length; _j < _len1; _j++) {
            track = tracks[_j];
            if (track.target.id === id && r.indexOf(animation) === -1) {
              r.push(animation);
            }
          }
        }
        if (r.length > 0) {
          return r;
        }
        return null;
      },
      findJointParent: function(node) {
        var childID, content, _i, _j, _len, _len1, _ref, _ref1;
        _ref = this._content;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          content = _ref[_i];
          if (this.isIFLNode(content)) {
            _ref1 = content.childIDs;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              childID = _ref1[_j];
              if (childID.id === node._reference.id) {
                if (content.iflType === "IFLJoint") {
                  return content;
                } else {
                  return this.findJointParent(content);
                }
              }
            }
          }
        }
        return null;
      }
    };

    return IFLLoader;

  })();

  IFLHotspotManager = (function() {

    function IFLHotspotManager() {}

    IFLHotspotManager.prototype.settings = null;

    IFLHotspotManager.prototype.scene = null;

    IFLHotspotManager.prototype.camera = null;

    IFLHotspotManager.prototype.materialManager = null;

    IFLHotspotManager.prototype.localeTexture = null;

    IFLHotspotManager.prototype.hotspots = null;

    IFLHotspotManager.prototype.clickedHotspot = null;

    IFLHotspotManager.prototype.hotspotRolloutAlpha = 1;

    IFLHotspotManager.prototype.dispose = function() {
      this.settings = null;
      this.scene = null;
      this.camera = null;
      this.materialManager = null;
      this.localeTexture = null;
      this.hotspots = null;
      return this.clickedHotspot = null;
    };

    IFLHotspotManager.prototype.update = function(delta) {
      var hotspot, _i, _len, _ref;
      if (this.hotspots != null) {
        _ref = this.hotspots;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          hotspot = _ref[_i];
          hotspot.lookAt(this.camera.position);
        }
      }
    };

    IFLHotspotManager.prototype.handleMouseUp = function(mouseUpObjects, mouseDownObjects) {
      var hotspot, mouseUpHotspot, mousedownhotspot, _i, _len, _ref;
      if (this.hotspots != null) {
        _ref = this.hotspots;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          hotspot = _ref[_i];
          mouseUpHotspot = mouseUpObjects[hotspot.name] != null ? mouseUpObjects[hotspot.name] : false;
          mousedownhotspot = mouseDownObjects[hotspot.name] != null ? mouseDownObjects[hotspot.name] : false;
          if (mousedownhotspot !== false && mouseUpHotspot !== false && this.is3DMouseClick(mousedownhotspot, mouseUpHotspot)) {
            this.clickedHotspot = hotspot.link;
            return true;
          }
        }
      }
      return false;
    };

    IFLHotspotManager.prototype.hotspotsAlpha = function(alpha) {
      var hotspot, _i, _len, _ref;
      _ref = this.hotspots;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        hotspot = _ref[_i];
        if (hotspot.rollovered) {
          new TWEEN.Tween(hotspot.material).to({
            opacity: alpha
          }, 500).start();
        } else {
          new TWEEN.Tween(hotspot.material).to({
            opacity: alpha
          }, 500).start();
        }
      }
      return null;
    };

    IFLHotspotManager.prototype.is3DMouseClick = function(intersectionDown, intersectionUp) {
      var dist;
      if (!(((intersectionDown != null ? intersectionDown.point : void 0) != null) && ((intersectionUp != null ? intersectionUp.point : void 0) != null))) {
        return false;
      }
      dist = intersectionDown.point.distanceTo(intersectionUp.point);
      return Math.abs(dist) < 2;
    };

    IFLHotspotManager.prototype.zoomInHotspot = function(view, onCompleteCallback, mouseInteraction) {
      var afterInteractiveLookat, afterInteractivePosition;
      switch (view) {
        case 'cutout':
          Analytics.track('scene3D_1_title_cutout');
          SoundController.send("cutout_zoom_in");
          afterInteractivePosition = new THREE.Vector3(this.settings.cutout.middle.position[0], this.settings.cutout.middle.position[1], this.settings.cutout.middle.position[2]);
          afterInteractiveLookat = new THREE.Vector3(this.settings.cutout.middle.lookat[0], this.settings.cutout.middle.lookat[1], this.settings.cutout.middle.lookat[2]);
          this.interactiveCameraTween(mouseInteraction.currentLookAt, afterInteractivePosition, afterInteractiveLookat, 50, 1500).onComplete(onCompleteCallback);
          this.hotspotsAlpha(0);
          mouseInteraction.currentLookAt = afterInteractiveLookat.clone();
          return true;
        case 'music':
          SoundController.send("musicbox_zoom_in");
          Analytics.track('scene3D_1_title_music');
          afterInteractivePosition = new THREE.Vector3(this.settings.music.position[0], this.settings.music.position[1], this.settings.music.position[2]);
          afterInteractiveLookat = new THREE.Vector3(this.settings.music.lookat[0], this.settings.music.lookat[1], this.settings.music.lookat[2]);
          this.interactiveCameraTween(mouseInteraction.currentLookAt, afterInteractivePosition, afterInteractiveLookat, 50, 1500).onComplete(onCompleteCallback);
          this.hotspotsAlpha(0);
          mouseInteraction.currentLookAt = afterInteractiveLookat.clone();
          return true;
        case 'zoetrope':
          SoundController.send("zoetrope_zoom_in");
          Analytics.track('scene3D_2_title_zoe');
          afterInteractivePosition = new THREE.Vector3(this.settings.zoetrope.position[0], this.settings.zoetrope.position[1], this.settings.zoetrope.position[2]);
          afterInteractiveLookat = new THREE.Vector3(this.settings.zoetrope.lookat[0], this.settings.zoetrope.lookat[1], this.settings.zoetrope.lookat[2]);
          this.interactiveCameraTween(mouseInteraction.currentLookAt, afterInteractivePosition, afterInteractiveLookat, 50, 1500).onComplete(onCompleteCallback);
          this.hotspotsAlpha(0);
          mouseInteraction.currentLookAt = afterInteractiveLookat.clone();
          return true;
      }
      return false;
    };

    IFLHotspotManager.prototype.interactiveCameraTween = function(currentLookAt, position, lookat, fov, time) {
      var end, start, tween,
        _this = this;
      if (this.camera == null) {
        return;
      }
      if (this.camera.position == null) {
        return;
      }
      start = {
        positionX: this.camera.position.x,
        positionY: this.camera.position.y,
        positionZ: this.camera.position.z,
        lookAtX: currentLookAt.x,
        lookAtY: currentLookAt.y,
        lookAtZ: currentLookAt.z,
        fov: this.camera.fov
      };
      end = {
        positionX: position.x,
        positionY: position.y,
        positionZ: position.z,
        lookAtX: lookat.x,
        lookAtY: lookat.y,
        lookAtZ: lookat.z,
        fov: fov
      };
      tween = new TWEEN.Tween(start).to(end, time).easing(TWEEN.Easing.Quadratic.InOut);
      tween.onUpdate(function() {
        _this.camera.fov = start.fov;
        _this.camera.updateProjectionMatrix();
        _this.camera.position.x = start.positionX;
        _this.camera.position.y = start.positionY;
        _this.camera.position.z = start.positionZ;
        _this.camera.updateMatrix();
        _this.camera.lookAt(new THREE.Vector3(start.lookAtX, start.lookAtY, start.lookAtZ));
        return _this.camera.updateMatrix();
      });
      tween.start();
      return tween;
    };

    IFLHotspotManager.prototype.init = function(settings, scene, materialManager, localeTexture, camera) {
      var config, customTexture, diffX, geom, localizedCanvas, localizedCanvasBounds, localizedTexture, mat, oX, plane, tex, texName, vertex, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      this.settings = settings;
      this.scene = scene;
      this.materialManager = materialManager;
      this.localeTexture = localeTexture;
      this.camera = camera;
      this.hotspots = [];
      _ref = this.settings.hotspots;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        config = _ref[_i];
        if ((config.overrideMap != null) && config.overrideMap.length > 0) {
          tex = this.materialManager.getPreloadedTexture(config.overrideMap);
          customTexture = true;
        } else {
          texName = config.localizedTexture != null ? config.localizedTexture : config.link;
          customTexture = false;
          localizedTexture = this.localeTexture.get(texName);
          localizedCanvas = localizedTexture.canvas;
          localizedCanvasBounds = localizedTexture.bound;
          diffX = localizedCanvas.width - localizedCanvasBounds.width;
          oX = diffX / localizedCanvas.width;
          tex = new THREE.Texture(localizedCanvas);
          tex.name = config.name + "_localizedtex";
          tex.needsUpdate = true;
          tex.offset.x = tex.offset.y = oX / 2;
          tex.repeat.x = tex.repeat.y = 1 - oX;
        }
        mat = new THREE.MeshBasicMaterial({
          map: tex,
          lights: false,
          transparent: true,
          opacity: this.hotspotRolloutAlpha,
          side: THREE.DoubleSide
        });
        this.materialManager.matLib.push(mat);
        this.materialManager.texLib.push(mat.map);
        geom = new THREE.PlaneGeometry(config.size, config.size);
        plane = new THREE.Mesh(geom, mat);
        if (config.reverse === true) {
          _ref1 = geom.vertices;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            vertex = _ref1[_j];
            vertex.x = -vertex.x;
          }
        }
        if (customTexture === true) {
          _ref2 = geom.vertices;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            vertex = _ref2[_k];
            vertex.y = -vertex.y;
          }
        }
        plane.rollovered = false;
        plane.pickable = config.disabled === true ? false : true;
        plane.name = config.name;
        plane.link = config.link;
        plane.position.set(config.position[0], config.position[1], config.position[2]);
        this.hotspots.push(plane);
        this.scene.add(plane);
      }
      return null;
    };

    return IFLHotspotManager;

  })();

  IFLMaterialManager = (function() {

    IFLMaterialManager.prototype.params = null;

    IFLMaterialManager.prototype.matLib = null;

    IFLMaterialManager.prototype.texLib = null;

    IFLMaterialManager.prototype.onProgress = null;

    IFLMaterialManager.prototype.onComplete = null;

    IFLMaterialManager.prototype.ddsBasePath = null;

    IFLMaterialManager.prototype.jpgBasePath = null;

    IFLMaterialManager.prototype.auxBasePath = null;

    IFLMaterialManager.prototype.pickables = null;

    IFLMaterialManager.prototype.loadTextureIndex = 0;

    IFLMaterialManager.prototype.loadTextures = null;

    IFLMaterialManager.prototype.loadedTextures = null;

    IFLMaterialManager.prototype.renderer = null;

    IFLMaterialManager.prototype.skyCubeTexture = null;

    IFLMaterialManager.prototype.skyCubePath = null;

    IFLMaterialManager.prototype.skyCubeFormat = null;

    IFLMaterialManager.prototype.enableDiffuse = true;

    IFLMaterialManager.prototype.materialInstancerNames = null;

    IFLMaterialManager.prototype.textureQuality = null;

    IFLMaterialManager.prototype.loadingPercentages = null;

    IFLMaterialManager.prototype.forcePNGTextures = false;

    IFLMaterialManager.prototype.enableTextureFiltering = true;

    function IFLMaterialManager(params) {
      this.vertexColorsEnabled = __bind(this.vertexColorsEnabled, this);
      this.changeNormalScale = __bind(this.changeNormalScale, this);
      this.changeFresnelPower = __bind(this.changeFresnelPower, this);
      this.instanceFresnelMaterial = __bind(this.instanceFresnelMaterial, this);
      this.instanceFresnelDoubleLightmapMaterial = __bind(this.instanceFresnelDoubleLightmapMaterial, this);
      this.instanceSimpleDobleLightmapMaterial = __bind(this.instanceSimpleDobleLightmapMaterial, this);
      this.instanceSimpleMaterial = __bind(this.instanceSimpleMaterial, this);
      this.instanceMeshBasicMaterial = __bind(this.instanceMeshBasicMaterial, this);
      this.instanceTerrainMaterial = __bind(this.instanceTerrainMaterial, this);
      this.instanceMaterial = __bind(this.instanceMaterial, this);
      this.onTextureComplete = __bind(this.onTextureComplete, this);
      this.onTextureProgress = __bind(this.onTextureProgress, this);
      this.onTextureError = __bind(this.onTextureError, this);      if (params != null) {
        this.init(params);
      }
      this.texLib = [];
      this.matLib = [];
    }

    IFLMaterialManager.prototype.init = function(params) {
      var auxQuality, ddsQuality;
      this.params = params;
      this.textureQuality = params.textureQuality != null ? params.textureQuality : "med";
      this.loadTextures = params.loadTextures != null ? params.loadTextures : [];
      this.pickables = params.pickables != null ? params.pickables : {};
      this.onProgress = params.onProgress != null ? params.onProgress : {};
      this.onComplete = params.onComplete != null ? params.onComplete : {};
      this.ddsBasePath = params.ddsBasePath != null ? params.ddsBasePath : "";
      this.auxBasePath = params.auxBasePath != null ? params.auxBasePath : "";
      this.jpgBasePath = params.jpgBasePath != null ? params.jpgBasePath : "";
      ddsQuality = this.ddsBasePath.indexOf("#QUALITY#");
      if (ddsQuality !== -1) {
        this.ddsBasePath = this.ddsBasePath.substr(0, ddsQuality) + this.textureQuality;
      }
      auxQuality = this.auxBasePath.indexOf("#QUALITY#");
      if (auxQuality !== -1) {
        this.auxBasePath = this.auxBasePath.substr(0, auxQuality) + this.textureQuality;
      }
      this.renderer = params.renderer != null ? params.render : null;
      this.skyCubePath = params.skyCubePath != null ? params.skyCubePath : "/";
      this.skyCubeFormat = params.skyCubeFormat != null ? params.skyCubeFormat : ".png";
      this.materialInstancerNames = params.materialInstancerNames != null ? params.materialInstancerNames : {
        "default": "instanceSimpleMaterial"
      };
      return null;
    };

    IFLMaterialManager.prototype.load = function() {
      var ddsPathIndex, index, tex, url, urls, _i, _len, _ref;
      urls = [this.skyCubePath + 'posx' + this.skyCubeFormat, this.skyCubePath + 'negx' + this.skyCubeFormat, this.skyCubePath + 'posy' + this.skyCubeFormat, this.skyCubePath + 'negy' + this.skyCubeFormat, this.skyCubePath + 'negz' + this.skyCubeFormat, this.skyCubePath + 'posz' + this.skyCubeFormat];
      this.skyCubeTexture = THREE.ImageUtils.loadTextureCube(urls);
      this.skyCubeTexture.format = THREE.RGBFormat;
      this.loadedTextures = [];
      this.loadingPercentages = [];
      _ref = this.loadTextures;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        url = _ref[index];
        if (this.forcePNGTextures) {
          ddsPathIndex = url.indexOf(".dds");
          if (ddsPathIndex !== -1) {
            this.loadTextures[index] = url = url.substr(0, ddsPathIndex) + ".png";
          }
        }
        tex = null;
        if (url.indexOf("/") !== -1) {
          if (url.indexOf(".dds") !== -1) {
            tex = CustomImageUtils.loadCompressedTexture("" + url, null, this.onTextureComplete, this.onTextureProgress, this.onTextureError, false, index);
          } else {
            tex = CustomImageUtils.loadTexture("" + url, null, this.onTextureComplete, this.onTextureProgress, this.onTextureError, index);
            tex.flipY = false;
          }
        } else {
          if (url.indexOf(".dds") !== -1) {
            tex = CustomImageUtils.loadCompressedTexture("" + this.ddsBasePath + "/" + url, null, this.onTextureComplete, this.onTextureProgress, this.onTextureError, false, index);
          } else {
            tex = CustomImageUtils.loadTexture("" + this.ddsBasePath + "/" + url, null, this.onTextureComplete, this.onTextureProgress, this.onTextureError, index);
            tex.flipY = false;
          }
        }
        if (!this.enableTextureFiltering) {
          tex.magFilter = THREE.LinearFilter;
          tex.minFilter = THREE.LinearFilter;
          tex.anisotropy = 0;
        }
      }
      return null;
    };

    IFLMaterialManager.prototype.onTextureError = function(texture, error) {
      console.warn("Texture Failed to load: " + error);
      this.onTextureComplete(texture);
    };

    IFLMaterialManager.prototype.onTextureProgress = function(progress, index) {
      var i, singletexProg, texPerc, totalpercentage, _i, _ref;
      singletexProg = progress / (1 / this.loadTextures.length);
      this.loadingPercentages[index] = progress;
      totalpercentage = 0;
      for (i = _i = 0, _ref = this.loadTextures.length; _i < _ref; i = _i += 1) {
        texPerc = this.loadingPercentages[i];
        totalpercentage += texPerc != null ? texPerc : 0;
      }
      totalpercentage /= this.loadTextures.length;
      return typeof this.onProgress === "function" ? this.onProgress(totalpercentage) : void 0;
    };

    IFLMaterialManager.prototype.numLoadedTextures = 0;

    IFLMaterialManager.prototype.onTextureComplete = function(texture, index) {
      this.loadedTextures[index] = texture;
      this.numLoadedTextures++;
      if (this.numLoadedTextures === this.loadTextures.length) {
        if (typeof this.onComplete === "function") {
          this.onComplete();
        }
        return;
      }
    };

    IFLMaterialManager.prototype.getPreloadedTexture = function(texName) {
      var ddsPathIndex, index, tex;
      if (this.forcePNGTextures) {
        ddsPathIndex = texName.indexOf(".dds");
        if (ddsPathIndex !== -1) {
          texName = texName.substr(0, ddsPathIndex) + ".png";
        }
      }
      index = this.loadTextures.indexOf(texName);
      if (index !== -1) {
        return this.loadedTextures[index];
      }
      tex = null;
      if (texName.indexOf("/") !== -1) {
        if (texName.indexOf(".dds") !== -1) {
          tex = CustomImageUtils.loadCompressedTexture("" + texName);
        } else {
          tex = CustomImageUtils.loadTexture("" + texName);
          tex.flipY = false;
        }
      } else {
        if (texName.indexOf(".dds") !== -1) {
          tex = CustomImageUtils.loadCompressedTexture("" + this.ddsBasePath + "/" + texName);
        } else {
          tex = CustomImageUtils.loadTexture("" + this.ddsBasePath + "/" + texName);
          tex.flipY = false;
        }
      }
      if (!this.enableTextureFiltering) {
        tex.magFilter = THREE.LinearFilter;
        tex.minFilter = THREE.LinearFilter;
        tex.anisotropy = 0;
      }
      return tex;
    };

    IFLMaterialManager.prototype.instanceMaterial = function(subMesh, meshname) {
      var func, match, _ref;
      while (meshname.indexOf("1") === meshname.length - 1) {
        meshname = meshname.substr(0, meshname.length - 1);
      }
      _ref = this.materialInstancerNames;
      for (match in _ref) {
        func = _ref[match];
        if (meshname.toLowerCase().indexOf(match.toLowerCase()) !== -1) {
          switch (func) {
            case "simple":
              return this.instanceSimpleMaterial(subMesh, meshname);
            case "simple_doublelightmap":
              return this.instanceSimpleDobleLightmapMaterial(subMesh, meshname);
            case "terrain":
              return this.instanceTerrainMaterial(subMesh, meshname);
            case "meshbasic":
              return this.instanceMeshBasicMaterial(subMesh, meshname);
            case "fresnel":
              return this.instanceFresnelMaterial(subMesh, meshname);
            case "fresnel_doublelightmap":
              return this.instanceFresnelDoubleLightmapMaterial(subMesh, meshname);
          }
          break;
        }
      }
      return this.instanceSimpleMaterial(subMesh, meshname);
    };

    IFLMaterialManager.prototype.applyMaterialOverrides = function(material, meshname) {
      var overrides, settingName, settingValue, _ref, _ref1;
      overrides = this.getMaterialOverrides(meshname);
      for (settingName in overrides) {
        settingValue = overrides[settingName];
        if (material[settingName] != null) {
          material[settingName] = settingValue;
        }
        if ((_ref = material.uniforms) != null) {
          if ((_ref1 = _ref[settingName]) != null) {
            _ref1.value = settingValue;
          }
        }
      }
      return null;
    };

    IFLMaterialManager.prototype.getMaterialOverrides = function(meshname) {
      var match, ret, settingName, settingValue, settings, _ref;
      ret = [];
      _ref = this.params.materialOverrides;
      for (match in _ref) {
        settings = _ref[match];
        if (meshname.toLowerCase().indexOf(match.toLowerCase()) !== -1) {
          for (settingName in settings) {
            settingValue = settings[settingName];
            ret[settingName] = settingValue;
          }
        }
      }
      return ret;
    };

    IFLMaterialManager.prototype.instanceTerrainMaterial = function(subMesh, meshname) {
      var blendMap, difftex, difftexB, difftexG, difftexR, lightex, material, overrides, parameters, repeats, shader, uniforms;
      overrides = this.getMaterialOverrides(meshname);
      shader = new IFLTerrainLambertShader;
      uniforms = THREE.UniformsUtils.clone(shader.uniforms);
      uniforms["ambient"].value = new THREE.Color(0xFFFFFF);
      uniforms["diffuse"].value = new THREE.Color(0xFFFFFF);
      blendMap = this.getPreloadedTexture("terrain_blend.dds");
      lightex = this.getPreloadedTexture("terrain_lightmap.dds");
      difftex = this.getPreloadedTexture("terrain_base.dds");
      difftexR = this.getPreloadedTexture("terrain_diffuseR.dds");
      difftexG = this.getPreloadedTexture("terrain_diffuseG.dds");
      difftexB = this.getPreloadedTexture("terrain_diffuseB.dds");
      if (this.enableTextureFiltering) {
        difftex.anisotropy = difftexR.anisotropy = difftexG.anisotropy = difftexB.anisotropy = 16;
      }
      this.texLib.push(difftex);
      this.texLib.push(difftexR);
      this.texLib.push(difftexG);
      this.texLib.push(difftexB);
      this.texLib.push(blendMap);
      difftex.flipY = blendMap.flipY = lightex.flipY = difftexR.flipY = difftexG.flipY = difftexB.flipY = false;
      difftex.wrapS = difftex.wrapT = THREE.RepeatWrapping;
      difftexR.wrapS = difftexR.wrapT = THREE.RepeatWrapping;
      difftexG.wrapS = difftexG.wrapT = THREE.RepeatWrapping;
      difftexB.wrapS = difftexB.wrapT = THREE.RepeatWrapping;
      uniforms["map"].value = difftex;
      uniforms["lightMap"].value = lightex;
      uniforms["tBlendmap"].value = blendMap;
      uniforms["tDiffuseR"].value = difftexR;
      uniforms["tDiffuseG"].value = difftexG;
      uniforms["tDiffuseB"].value = difftexB;
      repeats = 20;
      if (overrides.offset_repeat != null) {
        repeats = overrides.offset_repeat.z;
      }
      uniforms["offsetRepeat"].value = new THREE.Vector4(0, 0, repeats, repeats);
      uniforms["offsetRepeatR"].value = new THREE.Vector4(0, 0, repeats, repeats);
      uniforms["offsetRepeatG"].value = new THREE.Vector4(0, 0, repeats, repeats);
      uniforms["offsetRepeatB"].value = new THREE.Vector4(0, 0, repeats, repeats);
      uniforms["lightMapMultiplier"].value = 2;
      parameters = {
        fragmentShader: shader.fragmentShader,
        vertexShader: shader.vertexShader,
        uniforms: uniforms,
        name: meshname + "_terrainshader"
      };
      material = new THREE.ShaderMaterial(parameters);
      material.map = difftex;
      material.lightMap = lightex;
      material.fog = true;
      this.applyMaterialOverrides(material, meshname);
      this.matLib.push(material);
      return material;
    };

    IFLMaterialManager.prototype.instanceMeshBasicMaterial = function(subMesh, meshname) {
      var mat, _ref;
      mat = new THREE.MeshBasicMaterial({
        map: this.getPreloadedTexture("" + meshname + "_diff.dds")
      });
      if ((_ref = mat.map) != null) {
        _ref.flipY = false;
      }
      mat.side = THREE.DoubleSide;
      mat.fog = false;
      mat.lights = false;
      this.texLib.push(mat.map);
      this.matLib.push(mat);
      this.applyMaterialOverrides(mat, meshname);
      return mat;
    };

    IFLMaterialManager.prototype.instanceSimpleMaterial = function(subMesh, meshname) {
      var material, overrides, params, shader, uniforms, _ref;
      shader = new IFLBasicShader;
      uniforms = shader.uniforms;
      params = {};
      params.fragmentShader = shader.fragmentShader;
      params.vertexShader = shader.vertexShader;
      params.uniforms = uniforms;
      material = new THREE.ShaderMaterial(params);
      material.side = THREE.DoubleSide;
      material.lights = false;
      material.fog = true;
      material.alphaTest = 0.5;
      material.enableIllustration = false;
      material.name = meshname + "_basicshader";
      uniforms["diffuse"].value = new THREE.Color(0xFFFFFF);
      overrides = this.getMaterialOverrides(meshname);
      if (overrides["overrideMap"] != null) {
        if (overrides["overrideMap"] !== "null") {
          uniforms["map"].value = material.map = this.getPreloadedTexture(overrides["overrideMap"]);
        }
      } else {
        uniforms["map"].value = material.map = this.getPreloadedTexture("" + meshname + "_diff.dds");
      }
      if ((_ref = uniforms["map"].value) != null) {
        _ref.flipY = false;
      }
      uniforms["diffuseMultiplier"].value = 1;
      this.texLib.push(material.map);
      this.matLib.push(material);
      this.applyMaterialOverrides(material, meshname);
      if (material.enableIllustration !== false) {
        uniforms["lightMap"].value = material.lightMap = this.getPreloadedTexture(material.enableIllustration);
        material.lightMap.flipY = false;
      }
      return material;
    };

    IFLMaterialManager.prototype.instanceSimpleDobleLightmapMaterial = function(subMesh, meshname) {
      var material, overrides, params, shader, uniforms, _ref;
      shader = new IFLBasicShaderDoubleLightmap;
      uniforms = shader.uniforms;
      params = {};
      params.fragmentShader = shader.fragmentShader;
      params.vertexShader = shader.vertexShader;
      params.uniforms = uniforms;
      material = new THREE.ShaderMaterial(params);
      material.side = THREE.DoubleSide;
      material.lights = false;
      material.fog = true;
      material.alphaTest = 0.5;
      material.enableIllustration = false;
      material.enableIllustration2 = false;
      material.name = meshname + "_basicdoublelightmapshader";
      uniforms["diffuse"].value = new THREE.Color(0xFFFFFF);
      overrides = this.getMaterialOverrides(meshname);
      if (overrides["overrideMap"] != null) {
        if (overrides["overrideMap"] !== "null") {
          uniforms["map"].value = material.map = this.getPreloadedTexture(overrides["overrideMap"]);
        }
      } else {
        uniforms["map"].value = material.map = this.getPreloadedTexture("" + meshname + "_diff.dds");
      }
      if ((_ref = uniforms["map"].value) != null) {
        _ref.flipY = false;
      }
      uniforms["diffuseMultiplier"].value = 1;
      this.texLib.push(material.map);
      this.matLib.push(material);
      this.applyMaterialOverrides(material, meshname);
      if (material.enableIllustration !== false) {
        uniforms["lightMap"].value = material.lightMap = this.getPreloadedTexture(material.enableIllustration);
        material.lightMap.flipY = false;
      }
      if (material.enableIllustration2 !== false) {
        uniforms["lightMap2"].value = material.lightMap2 = this.getPreloadedTexture(material.enableIllustration2);
        material.lightMap2.flipY = false;
      }
      return material;
    };

    IFLMaterialManager.prototype.instanceFresnelDoubleLightmapMaterial = function(subMesh, meshname) {
      var material, originalmeshname, overrides, params, shader, uniforms, _ref, _ref1, _ref2;
      shader = new IFLPhongFresnelShaderDoubleLightMap;
      uniforms = shader.uniforms;
      params = {};
      params.fragmentShader = shader.fragmentShader;
      params.vertexShader = shader.vertexShader;
      params.uniforms = uniforms;
      material = new THREE.ShaderMaterial(params);
      material.side = THREE.DoubleSide;
      material.lights = false;
      material.alphaTest = 0.5;
      material.fog = true;
      material.enableIllustration = false;
      material.enableIllustration2 = false;
      material.switchUVs = false;
      material.name = meshname + "_fresneldoublelightmapshader";
      uniforms["diffuse"].value = new THREE.Color(0xFFFFFF);
      uniforms["ambient"].value = new THREE.Color(0xFFFFFF);
      uniforms["specular"].value = new THREE.Color(0xFFFFFF);
      overrides = this.getMaterialOverrides(meshname);
      originalmeshname = meshname;
      if (overrides["overrideMap"] != null) {
        meshname = overrides["overrideMap"];
      }
      uniforms["map"].value = material.map = this.getPreloadedTexture("" + meshname + "_diff.dds");
      uniforms["envMap"].value = material.envMap = this.skyCubeTexture;
      uniforms["specularMap"].value = material.specularMap = this.getPreloadedTexture("" + this.auxBasePath + "/" + meshname + "_spec.dds");
      uniforms["tAux"].value = this.getPreloadedTexture("" + this.auxBasePath + "/" + meshname + "_aux.dds");
      uniforms["envmapMultiplier"].value = 5;
      uniforms["diffuseMultiplier"].value = 1;
      meshname = originalmeshname;
      if ((_ref = material.map) != null) {
        _ref.flipY = false;
      }
      if ((_ref1 = material.specularMap) != null) {
        _ref1.flipY = false;
      }
      if ((_ref2 = uniforms["tAux"].value) != null) {
        _ref2.flipY = false;
      }
      this.texLib.push(uniforms["tAux"].value);
      this.texLib.push(uniforms["specularMap"].value);
      this.texLib.push(uniforms["envMap"].value);
      this.texLib.push(uniforms["map"].value);
      this.matLib.push(material);
      this.applyMaterialOverrides(material, meshname);
      if (material.enableIllustration !== false) {
        uniforms["lightMap"].value = material.lightMap = this.getPreloadedTexture(material.enableIllustration);
        material.lightMap.flipY = false;
      }
      if (material.enableIllustration2 !== false) {
        uniforms["lightMap2"].value = material.lightMap2 = this.getPreloadedTexture(material.enableIllustration2);
        material.lightMap2.flipY = false;
      }
      return material;
    };

    IFLMaterialManager.prototype.instanceFresnelMaterial = function(subMesh, meshname) {
      var material, originalmeshname, overrides, params, shader, uniforms, _ref, _ref1, _ref2;
      shader = new IFLPhongFresnelShader;
      uniforms = shader.uniforms;
      params = {};
      params.fragmentShader = shader.fragmentShader;
      params.vertexShader = shader.vertexShader;
      params.uniforms = uniforms;
      material = new THREE.ShaderMaterial(params);
      material.side = THREE.DoubleSide;
      material.lights = false;
      material.alphaTest = 0.5;
      material.fog = true;
      material.enableIllustration = false;
      material.switchUVs = false;
      material.name = meshname + "_fresnelshader";
      uniforms["diffuse"].value = new THREE.Color(0xFFFFFF);
      uniforms["ambient"].value = new THREE.Color(0xFFFFFF);
      uniforms["specular"].value = new THREE.Color(0xFFFFFF);
      overrides = this.getMaterialOverrides(meshname);
      originalmeshname = meshname;
      if (overrides["overrideMap"] != null) {
        meshname = overrides["overrideMap"];
      }
      uniforms["map"].value = material.map = this.getPreloadedTexture("" + meshname + "_diff.dds");
      uniforms["envMap"].value = material.envMap = this.skyCubeTexture;
      uniforms["specularMap"].value = material.specularMap = this.getPreloadedTexture("" + this.auxBasePath + "/" + meshname + "_spec.dds");
      uniforms["tAux"].value = this.getPreloadedTexture("" + this.auxBasePath + "/" + meshname + "_aux.dds");
      uniforms["envmapMultiplier"].value = 5;
      uniforms["diffuseMultiplier"].value = 1;
      meshname = originalmeshname;
      if ((_ref = material.map) != null) {
        _ref.flipY = false;
      }
      if ((_ref1 = material.specularMap) != null) {
        _ref1.flipY = false;
      }
      if ((_ref2 = uniforms["tAux"].value) != null) {
        _ref2.flipY = false;
      }
      this.texLib.push(uniforms["tAux"].value);
      this.texLib.push(uniforms["specularMap"].value);
      this.texLib.push(uniforms["envMap"].value);
      this.texLib.push(uniforms["map"].value);
      this.matLib.push(material);
      this.applyMaterialOverrides(material, meshname);
      if (material.enableIllustration !== false) {
        uniforms["lightMap"].value = material.lightMap = this.getPreloadedTexture(material.enableIllustration);
        material.lightMap.flipY = false;
      }
      return material;
    };

    IFLMaterialManager.prototype.changeFresnelPower = function(value) {
      var mat, _i, _len, _ref, _ref1, _ref2;
      _ref = this.matLib;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mat = _ref[_i];
        if ((_ref1 = mat.uniforms) != null) {
          if ((_ref2 = _ref1.mFresnelPower) != null) {
            _ref2.value = value;
          }
        }
      }
      return null;
    };

    IFLMaterialManager.prototype.changeNormalScale = function(value) {
      var mat, _i, _len, _ref, _ref1, _ref2;
      _ref = this.matLib;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mat = _ref[_i];
        if ((_ref1 = mat.uniforms) != null) {
          if ((_ref2 = _ref1.normalScale) != null) {
            _ref2.value.set(value, value);
          }
        }
      }
      return null;
    };

    IFLMaterialManager.prototype.disabledVertexColors = [];

    IFLMaterialManager.prototype.vertexColorsEnabled = function(value) {
      var mat, mat2, _i, _j, _len, _len1, _ref, _ref1;
      if (!value) {
        this.disabledVertexColors = [];
        _ref = this.matLib;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mat = _ref[_i];
          if (mat.vertexColors === THREE.VertexColors) {
            mat.vertexColors = THREE.NoColors;
            mat.needsUpdate = true;
            this.disabledVertexColors.push(mat);
          }
        }
      } else {
        _ref1 = this.disabledVertexColors;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          mat2 = _ref1[_j];
          mat2.vertexColors = THREE.VertexColors;
          mat2.needsUpdate = true;
        }
      }
      return null;
    };

    IFLMaterialManager.prototype.dispose = function(renderer) {
      var mat, obj, tex, _i, _j, _len, _len1, _ref, _ref1;
      if (this.matLib != null) {
        _ref = this.matLib;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mat = _ref[_i];
          if (mat != null) {
            renderer.deallocateMaterial(mat);
          }
        }
      }
      if (this.texLib != null) {
        _ref1 = this.texLib;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          tex = _ref1[_j];
          if (tex != null) {
            renderer.deallocateTexture(tex);
          }
        }
      }
      renderer.deallocateTexture(this.skyCubeTexture);
      this.matLib = null;
      this.texLib = null;
      this.onProgress = null;
      this.onComplete = null;
      this.params.onProgress = null;
      this.params.onComplete = null;
      this.params = null;
      for (obj in this) {
        delete this[obj];
      }
      return null;
    };

    return IFLMaterialManager;

  })();

  IFLModelManager = (function() {

    function IFLModelManager() {
      this.localCallBack = __bind(this.localCallBack, this);
      this.batchLoadingPhaseManager = __bind(this.batchLoadingPhaseManager, this);
    }

    IFLModelManager.prototype.BatchLoadingPhase = {
      SETTINGS: 0,
      MATERIALS: 1,
      MATERIALS_DONE: 2,
      MODELS: 3
    };

    IFLModelManager.prototype.BatchState = {
      RUNNING: 0,
      PAUSED: 1,
      COMPLETED: 2
    };

    IFLModelManager._instance = null;

    IFLModelManager.prototype.modelLibraries = {};

    IFLModelManager.prototype.batchLoadTextureIndex = 0;

    IFLModelManager.prototype.batchLoadTextures = [];

    IFLModelManager.prototype.batchDDSPath = null;

    IFLModelManager.prototype.batchJPGPath = null;

    IFLModelManager.prototype.cachingTextures = true;

    IFLModelManager.prototype.batchLoader = null;

    IFLModelManager.prototype.batchLoadingIndex = -1;

    IFLModelManager.prototype.batchLoadingPhaseIndex = 0;

    IFLModelManager.prototype.batchLoadingSettings = {};

    IFLModelManager.prototype.batchSettings = null;

    IFLModelManager.prototype.batchMaterialManager = null;

    IFLModelManager.prototype.batchLoader = null;

    IFLModelManager.prototype.oz = null;

    IFLModelManager.prototype.state = null;

    IFLModelManager.prototype.loader = null;

    IFLModelManager.prototype.urlLoading = null;

    IFLModelManager.prototype.prefetchEnabled = true;

    IFLModelManager.getInstance = function() {
      if (this._instance == null) {
        this._instance = new this;
        this._instance.init();
      }
      return this._instance;
    };

    IFLModelManager.prototype.init = function() {
      this.oz = (window || document).oz;
      this.state = this.BatchState.PAUSED;
      CustomImageUtils.cacheTextures = true;
      return this.batchLoadingSettings = ["/models/s001_settings.json", "/models/s002_settings.json", "/models/s003_settings.json"];
    };

    IFLModelManager.prototype.batchLoadingPhaseManager = function(value) {
      var ddsQuality, tex, textureQuality;
      if (!this.prefetchEnabled) {
        return;
      }
      if (this.state === this.BatchState.PAUSED) {
        return;
      }
      switch (this.batchLoadingPhaseIndex) {
        case this.BatchLoadingPhase.SETTINGS:
          this.batchSettings = value;
          if (this.modelLibraries[this.batchSettings.modelURL] != null) {
            return this.nextBatchLoading();
          } else {
            this.batchLoadingPhaseIndex = this.BatchLoadingPhase.MATERIALS;
            textureQuality = this.oz.appView.textureQuality;
            this.batchLoadTextures = this.batchSettings.loadTextures != null ? this.batchSettings.loadTextures : [];
            this.batchDDSPath = this.batchSettings.ddsBasePath != null ? this.batchSettings.ddsBasePath : "";
            this.batchJPGPath = this.batchSettings.jpgBasePath != null ? this.batchSettings.jpgBasePath : "";
            ddsQuality = this.batchDDSPath.indexOf("#QUALITY#");
            if (ddsQuality !== -1) {
              this.batchDDSPath = this.batchDDSPath.substr(0, ddsQuality) + textureQuality;
            }
            this.batchLoadTextureIndex = -1;
            return this.batchLoadingPhaseManager();
          }
          break;
        case this.BatchLoadingPhase.MATERIALS:
          this.batchLoadTextureIndex++;
          if ((this.batchLoadTextureIndex < this.batchLoadTextures.length) && this.cachingTextures) {
            tex = this.batchLoadTextures[this.batchLoadTextureIndex];
            if (tex.indexOf(".dds") !== -1) {
              return CustomImageUtils.loadCompressedTexture("" + this.batchDDSPath + "/" + tex, null, this.batchLoadingPhaseManager, null, null, true);
            } else {
              return CustomImageUtils.loadTexture("" + this.batchJPGPath + "/" + tex, null, this.batchLoadingPhaseManager);
            }
          } else {
            this.batchLoadingPhaseIndex = this.BatchLoadingPhase.MATERIALS_DONE;
            return this.batchLoadingPhaseManager();
          }
          break;
        case this.BatchLoadingPhase.MATERIALS_DONE:
          this.batchLoadingPhaseIndex = this.BatchLoadingPhase.MODELS;
          this.batchLoader = new IFLLoader();
          this.batchLoader.enableMaterialCache = false;
          this.batchLoader.enableTextureCache = false;
          this.batchLoader.doCreateModel = false;
          this.batchLoader.pickableObjects = this.batchSettings.pickables;
          this.batchLoader.customMaterialInstancer = null;
          return this.batchLoader.load(this.batchSettings.modelURL, this.batchLoadingPhaseManager, null);
        case this.BatchLoadingPhase.MODELS:
          this.modelLibraries[this.batchSettings.modelURL] = this.batchLoader.library;
          return this.nextBatchLoading();
      }
    };

    IFLModelManager.prototype.nextBatchLoading = function() {
      if (this.state === this.BatchState.PAUSED) {
        return;
      }
      this.batchLoadingIndex++;
      if (this.batchLoadingIndex < this.batchLoadingSettings.length) {
        this.batchLoadingPhaseIndex = this.BatchLoadingPhase.SETTINGS;
        return $.ajax({
          url: this.batchLoadingSettings[this.batchLoadingIndex],
          dataType: 'json',
          success: this.batchLoadingPhaseManager
        });
      } else {
        return this.state = this.BatchState.COMPLETED;
      }
    };

    IFLModelManager.prototype.resume = function() {
      this.state = this.BatchState.RUNNING;
      return this.nextBatchLoading();
    };

    IFLModelManager.prototype.pause = function() {
      var _ref, _ref1;
      this.state = this.BatchState.PAUSED;
      try {
        if ((_ref = this.batchLoader) != null) {
          _ref.dispose();
        }
      } catch (_error) {}
      try {
        return (_ref1 = this.loader) != null ? _ref1.dispose() : void 0;
      } catch (_error) {}
    };

    IFLModelManager.prototype.load = function(pickables, instanceMaterial, url, callback, callbackProgress) {
      this.urlLoading = url;
      if (this.modelLibraries[url] != null) {
        console.log("CACHED library");
        this.loader = new IFLLoader();
        this.loader.enableMaterialCache = false;
        this.loader.enableTextureCache = false;
        this.loader.pickableObjects = pickables;
        this.loader.customMaterialInstancer = instanceMaterial;
        this.loader.callback = callback;
        this.loader.callbackProgress = callbackProgress;
        this.loader.library = this.modelLibraries[url];
        this.loader.doCreateModel = false;
        if (typeof callback === "function") {
          callback(this.loader, null);
        }
      } else {
        this.pause();
        this.loader = new IFLLoader();
        this.loader.enableMaterialCache = false;
        this.loader.enableTextureCache = false;
        this.loader.pickableObjects = pickables;
        this.loader.customMaterialInstancer = instanceMaterial;
        this.loader.finalCallBack = callback;
        this.loader.doCreateModel = false;
        this.loader.load(url, this.localCallBack, callbackProgress);
      }
    };

    IFLModelManager.prototype.localCallBack = function(loader, data) {
      this.modelLibraries[this.urlLoading] = loader.library;
      loader.finalCallBack(loader, data);
      loader.finalCallBack = null;
      loader.callback = null;
      loader.callbackProgress = null;
      if (this.state !== this.BatchState.COMPLETED) {
        return this.resume();
      }
    };

    IFLModelManager.prototype.dispose = function() {
      var _ref;
      return (_ref = this.loader) != null ? _ref.dispose() : void 0;
    };

    IFLModelManager.prototype.cacheTextures = function(value) {
      this.cachingTextures = value;
      return CustomImageUtils.cacheTextures = value;
    };

    return IFLModelManager;

  })();

  IFLWindGenerator = (function() {

    IFLWindGenerator.prototype.enabled = true;

    IFLWindGenerator.prototype.noiseMap = null;

    IFLWindGenerator.prototype.noiseShader = null;

    IFLWindGenerator.prototype.noiseScene = null;

    IFLWindGenerator.prototype.noiseMaterial = null;

    IFLWindGenerator.prototype.noiseCameraOrtho = null;

    IFLWindGenerator.prototype.noiseQuadTarget = null;

    IFLWindGenerator.prototype.noiseRenderTarget = null;

    IFLWindGenerator.prototype.noiseSpeed = 0.005;

    IFLWindGenerator.prototype.noiseOffsetSpeed = 0.1;

    IFLWindGenerator.prototype.windDirection = null;

    function IFLWindGenerator() {
      this.windDirection = new THREE.Vector3(1, 0, 0);
      this.noiseMap = new THREE.WebGLRenderTarget(64, 64, {
        minFilter: THREE.LinearMipmapLinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBFormat
      });
      this.noiseShader = new IFLNoiseShader();
      this.noiseShader.uniforms.vScale.value.set(2, 2);
      this.noiseScene = new THREE.Scene();
      this.noiseCameraOrtho = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, -10000, 10000);
      this.noiseCameraOrtho.position.z = 100;
      this.noiseScene.add(this.noiseCameraOrtho);
      this.noiseMaterial = new THREE.ShaderMaterial({
        fragmentShader: this.noiseShader.fragmentShader,
        vertexShader: this.noiseShader.vertexShader,
        uniforms: this.noiseShader.uniforms,
        lights: false
      });
      this.noiseMaterial.name = "noise_shader";
      this.noiseQuadTarget = new THREE.Mesh(new THREE.PlaneGeometry(window.innerWidth, window.innerHeight, 1, 1), this.noiseMaterial);
      this.noiseQuadTarget.name = "noise_quad_target";
      this.noiseQuadTarget.position.z = -9000;
      this.noiseScene.add(this.noiseQuadTarget);
    }

    IFLWindGenerator.prototype.update = function(renderer, delta) {
      if (!this.enabled) {
        return;
      }
      this.noiseShader.uniforms.fTime.value += delta * this.noiseSpeed;
      this.noiseShader.uniforms.vOffset.value.x -= (delta * this.noiseOffsetSpeed) * this.windDirection.x;
      this.noiseShader.uniforms.vOffset.value.y += (delta * this.noiseOffsetSpeed) * this.windDirection.z;
      renderer.render(this.noiseScene, this.noiseCameraOrtho, this.noiseMap, false);
      return null;
    };

    IFLWindGenerator.prototype.dispose = function(renderer) {
      var obj, _i, _len, _ref;
      renderer.deallocateRenderTarget(this.noiseMap);
      renderer.deallocateMaterial(this.noiseMaterial);
      renderer.deallocateObject(this.noiseQuadTarget);
      _ref = this.noiseScene.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        this.noiseScene.remove(obj);
      }
      this.noiseScene.__webglObjects = null;
      this.noiseScene.__objects = null;
      this.noiseScene.__objectsRemoved = null;
      this.noiseScene.children = [];
      return null;
    };

    return IFLWindGenerator;

  })();

  IFLAutomaticPerformanceAdjust = (function() {

    IFLAutomaticPerformanceAdjust.prototype.maxFrameTime = 1 / 15;

    IFLAutomaticPerformanceAdjust.prototype.emergencyFramerate = 1 / 9;

    IFLAutomaticPerformanceAdjust.prototype.MAXSAMPLES = 400;

    IFLAutomaticPerformanceAdjust.prototype.tickindex = 0;

    IFLAutomaticPerformanceAdjust.prototype.ticksum = 0;

    IFLAutomaticPerformanceAdjust.prototype.ticklist = null;

    IFLAutomaticPerformanceAdjust.prototype.steps = null;

    IFLAutomaticPerformanceAdjust.prototype.ignoreticks = 0;

    IFLAutomaticPerformanceAdjust.prototype.resetTime = 0;

    function IFLAutomaticPerformanceAdjust() {
      this.steps = [];
      this.reset();
    }

    IFLAutomaticPerformanceAdjust.prototype.update = function(delta) {
      var average, halfTicksDone, step, timeOutPassed, _i, _len, _ref;
      this.resetTime += delta;
      average = this.calcAverageFrametime(delta);
      this.steps.sort(function(a, b) {
        return b.priority - a.priority;
      });
      halfTicksDone = this.tickindex > this.MAXSAMPLES / 2;
      timeOutPassed = this.resetTime > 20000;
      _ref = this.steps;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        step = _ref[_i];
        if (step.enabled && (halfTicksDone || timeOutPassed)) {
          if (average > this.maxFrameTime) {
            step.enabled = false;
            if (step.disableFunc != null) {
              step.disableFunc();
            } else {
              step.object[step.property] = false;
            }
            console.info("[IFLAutomaticPerformanceAdjust] Disabled " + step.name + " as average Frame time [" + average + "] is above maximum [" + this.maxFrameTime + "] after [" + this.tickindex + "] ticks out of [" + this.MAXSAMPLES + "]");
            this.reset();
          }
          break;
        }
      }
    };

    IFLAutomaticPerformanceAdjust.prototype.reset = function() {
      var i, _i, _ref;
      this.resetTime = 0;
      this.ignoreticks = 0;
      this.tickindex = 0;
      this.ticksum = 0;
      this.ticklist = [];
      for (i = _i = 0, _ref = this.MAXSAMPLES; _i < _ref; i = _i += 1) {
        this.ticklist[i] = 0;
      }
    };

    IFLAutomaticPerformanceAdjust.prototype.calcAverageFrametime = function(newtick) {
      this.ignoreticks++;
      if (!(this.ignoreticks > 10)) {
        return;
      }
      this.ticksum -= this.ticklist[this.tickindex];
      this.ticksum += newtick;
      this.ticklist[this.tickindex] = newtick;
      if (++this.tickindex === this.MAXSAMPLES) {
        this.tickindex = 0;
      }
      return this.ticksum / this.MAXSAMPLES;
    };

    return IFLAutomaticPerformanceAdjust;

  })();

  IFLCameraPathInteraction = (function() {

    IFLCameraPathInteraction.prototype.cameraPositionPoints = null;

    IFLCameraPathInteraction.prototype.cameraLookatPoints = null;

    IFLCameraPathInteraction.prototype.lookDeviationY = null;

    IFLCameraPathInteraction.prototype.lookDeviationX = null;

    IFLCameraPathInteraction.prototype.bobSpeed = null;

    IFLCameraPathInteraction.prototype.currentLookAt = null;

    IFLCameraPathInteraction.prototype.motionspeedelastic = null;

    IFLCameraPathInteraction.prototype.lookRectangle = null;

    IFLCameraPathInteraction.prototype.normalVector = null;

    IFLCameraPathInteraction.prototype.transformedVector = null;

    IFLCameraPathInteraction.prototype.interpolationVector = null;

    IFLCameraPathInteraction.prototype.camera = null;

    IFLCameraPathInteraction.prototype.motionspeed = 0.0;

    IFLCameraPathInteraction.prototype.maxspeed = 0.14;

    IFLCameraPathInteraction.prototype.maxYLookDeviation = 15;

    IFLCameraPathInteraction.prototype.maxXLookDeviation = 50;

    IFLCameraPathInteraction.prototype.constantSpeed = false;

    IFLCameraPathInteraction.prototype.minIndex = 0;

    IFLCameraPathInteraction.prototype.maxIndex = 95;

    IFLCameraPathInteraction.prototype.currentIndex = 20;

    IFLCameraPathInteraction.prototype.currentProgress = 0.0;

    IFLCameraPathInteraction.prototype.delta = 0;

    IFLCameraPathInteraction.prototype.APP_WIDTH = 800;

    IFLCameraPathInteraction.prototype.APP_HEIGHT = 600;

    IFLCameraPathInteraction.prototype.APP_HALF_X = 400;

    IFLCameraPathInteraction.prototype.APP_HALF_Y = 300;

    IFLCameraPathInteraction.prototype.mouseX = 0;

    IFLCameraPathInteraction.prototype.mouseY = 0;

    IFLCameraPathInteraction.prototype.forcePathYLookAt = 0;

    IFLCameraPathInteraction.prototype.forcePathYPosition = 0;

    IFLCameraPathInteraction.prototype.mouseEnabled = true;

    function IFLCameraPathInteraction(camera) {
      this.camera = camera;
      this.cameraPositionPoints = [];
      this.cameraLookatPoints = [];
      this.currentLookAt = new THREE.Vector3;
      this.normalVector = new THREE.Vector3;
      this.transformedVector = new THREE.Vector3;
      this.interpolationVector = new THREE.Vector3;
      this.lookDeviationY = new ElasticNumber;
      this.lookDeviationX = new ElasticNumber;
      this.bobSpeed = new ElasticNumber;
      this.motionspeedelastic = new ElasticNumber;
      this.lookDeviationY.spring = this.lookDeviationX.spring = this.bobSpeed.spring = 0.0015;
      this.lookDeviationY.damping = this.lookDeviationX.damping = this.bobSpeed.damping = 0.07;
      this.motionspeedelastic.spring = 0.002;
      this.motionspeedelastic.damping = 0.07;
      this.lookRectangle = new THREE.Rectangle();
      this.lookRectangle.containsPoint = function(x, y) {
        return x > this.getLeft() && x < this.getRight() && y > this.getTop() && y < this.getBottom();
      };
    }

    IFLCameraPathInteraction.prototype.update = function(delta, mouseX, mouseY) {
      var devX, motionspeed, movementMouseAreaWidth;
      this.mouseX = mouseX;
      this.mouseY = mouseY;
      this.delta = delta;
      this.normalMouseInteraction();
      movementMouseAreaWidth = this.maxXLookDeviation / 6;
      this.lookRectangle.set(movementMouseAreaWidth, 0, this.maxXLookDeviation - movementMouseAreaWidth, this.maxYLookDeviation);
      devX = this.lookDeviationX._value + (this.maxXLookDeviation / 2);
      motionspeed = this.calcMotionSpeed(devX, movementMouseAreaWidth);
      if (this.cameraPositionPoints && this.cameraLookatPoints) {
        this.advanceProgress(motionspeed);
        this.camera.position.copy(this.interpolate(this.cameraPositionPoints));
        this.camera.updateMatrix();
        this.currentLookAt = this.interpolate(this.cameraLookatPoints);
        this.camera.lookAt(this.currentLookAt);
        this.camera.updateMatrix();
        this.normalVector.set(0, 0, 0);
        this.camera.matrix.multiplyVector3(this.normalVector);
        this.transformedVector.set(this.lookDeviationX._value, this.lookDeviationY._value, 0);
        this.camera.matrix.multiplyVector3(this.transformedVector);
        this.transformedVector.subSelf(this.normalVector);
        this.currentLookAt.addSelf(this.transformedVector);
        this.camera.lookAt(this.currentLookAt);
        this.camera.updateMatrix();
      }
      return null;
    };

    IFLCameraPathInteraction.prototype.advanceProgress = function(motionspeed) {
      var distance, numskip;
      if (this.constantSpeed) {
        distance = this.cameraPositionPoints[this.currentIndex].distanceTo(this.cameraPositionPoints[this.currentIndex + 1]);
        this.currentProgress += (motionspeed * (this.delta * 100)) / distance;
      } else {
        this.currentProgress += motionspeed * (this.delta * 100);
      }
      if (this.currentProgress < 0) {
        numskip = Math.abs(Math.floor(this.currentProgress));
        this.currentIndex -= numskip;
        this.currentProgress = this.currentProgress + numskip;
      }
      if (this.currentProgress > 1) {
        numskip = Math.floor(this.currentProgress);
        this.currentIndex += numskip;
        this.currentProgress = this.currentProgress - numskip;
      }
      if (this.currentIndex > this.maxIndex) {
        this.currentIndex = this.maxIndex;
        return this.currentProgress = 1;
      } else if (this.currentIndex < this.minIndex) {
        this.currentIndex = this.minIndex;
        return this.currentProgress = 0;
      }
    };

    IFLCameraPathInteraction.prototype.calcMotionSpeed = function(devX, movementMouseAreaWidth) {
      var ret;
      ret = 0;
      if (devX > this.lookRectangle.getRight()) {
        ret = ((devX - this.lookRectangle.getRight()) * this.maxspeed) / movementMouseAreaWidth;
      } else if (devX < this.lookRectangle.getLeft()) {
        ret = ((devX - this.lookRectangle.getLeft()) * this.maxspeed) / movementMouseAreaWidth;
      }
      return ret * Math.abs(ret);
    };

    IFLCameraPathInteraction.prototype.goToIndexAndPosition = function(indexAndPosition) {
      this.currentIndex = Math.floor(indexAndPosition);
      this.currentProgress = indexAndPosition - this.currentIndex;
      return null;
    };

    IFLCameraPathInteraction.prototype.findNearestPathPoint = function() {
      var dist, index, mindistance, mindistanceindex, mindistancepoint, point, pos, _i, _len, _ref;
      pos = this.camera.position.clone();
      mindistance = 10000000000000;
      mindistancepoint = null;
      mindistanceindex = -1;
      _ref = this.cameraPositionPoints;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        point = _ref[index];
        dist = Math.abs(point.distanceTo(pos));
        if (dist < mindistance) {
          mindistancepoint = point;
          mindistance = dist;
          mindistanceindex = index;
        }
      }
      if (mindistanceindex > this.maxIndex) {
        mindistanceindex = this.maxIndex;
      }
      if (mindistanceindex < this.minIndex) {
        mindistanceindex = this.minIndex;
      }
      return mindistanceindex;
    };

    IFLCameraPathInteraction.prototype.swipeMouseInteraction = function() {
      var aimX, aimY, thrustX, thrustY;
      thrustX = 0;
      thrustY = 0;
      if (this.mouseDown && !this.mouseLeft) {
        thrustX = (this.mouseDownPoint.x - this.mouseX) / 25;
        thrustY = -(this.mouseDownPoint.y - this.mouseY) / 25;
        thrustX *= this.delta * 100;
        thrustY *= this.delta * 100;
        aimX = Math.min(this.maxXLookDeviation, Math.max(-this.maxXLookDeviation, this.lookDeviationX._value + thrustX));
        aimY = Math.min(this.maxYLookDeviation, Math.max(-this.maxYLookDeviation, this.lookDeviationY._value + thrustY));
        this.lookDeviationX.aimAt(aimX);
        this.lookDeviationY.aimAt(aimY);
      }
      this.lookDeviationY.step(this.delta);
      this.lookDeviationX.step(this.delta);
      this.lookDeviationX._value = Math.min(this.maxXLookDeviation, Math.max(-this.maxXLookDeviation, this.lookDeviationX._value));
      this.lookDeviationY._value = Math.min(this.maxYLookDeviation, Math.max(-this.maxYLookDeviation, this.lookDeviationY._value));
      return null;
    };

    IFLCameraPathInteraction.prototype.normalMouseInteraction = function() {
      var mmx, mmy, mx, my;
      if (this.mouseEnabled === true) {
        mmx = this.mouseX;
        mmy = this.mouseY;
        mx = this.mouseX + this.APP_HALF_X;
        my = this.mouseY + this.APP_HALF_Y;
      } else {
        mmx = 0;
        mmy = 0;
        mx = this.APP_HALF_X;
        my = this.APP_HALF_Y;
      }
      this.lookDeviationY.aimAt(-(mmy * this.maxYLookDeviation) / this.APP_HALF_Y);
      this.lookDeviationX.aimAt((mmx * this.maxXLookDeviation) / this.APP_HALF_X);
      this.lookDeviationY.step(this.delta);
      this.lookDeviationX.step(this.delta);
      this.lookDeviationX._value = Math.min(this.maxXLookDeviation, Math.max(-this.maxXLookDeviation, this.lookDeviationX._value));
      this.lookDeviationY._value = Math.min(this.maxYLookDeviation, Math.max(-this.maxYLookDeviation, this.lookDeviationY._value));
      return null;
    };

    IFLCameraPathInteraction.prototype.p1 = new THREE.Vector3;

    IFLCameraPathInteraction.prototype.p2 = new THREE.Vector3;

    IFLCameraPathInteraction.prototype.interpolate = function(arr) {
      this.p1.copy(arr[this.currentIndex]);
      this.p2.copy(arr[this.currentIndex + 1]);
      if (arr === this.cameraPositionPoints) {
        this.p1.y += this.forcePathYPosition;
        this.p2.y += this.forcePathYPosition;
      }
      if (arr === this.cameraLookatPoints) {
        this.p1.y += this.forcePathYLookAt;
        this.p2.y += this.forcePathYLookAt;
      }
      this.interpolationVector.sub(this.p2, this.p1);
      this.interpolationVector.multiplyScalar(this.currentProgress);
      return this.interpolationVector.addSelf(this.p1);
    };

    IFLCameraPathInteraction.prototype.handleResize = function(w, h) {
      this.APP_WIDTH = w;
      this.APP_HEIGHT = h;
      this.APP_HALF_X = this.APP_WIDTH / 2;
      this.APP_HALF_Y = this.APP_HEIGHT / 2;
      return null;
    };

    return IFLCameraPathInteraction;

  })();

  IFLOzifyParticleSystem = (function() {

    IFLOzifyParticleSystem.prototype.centerMesh = null;

    IFLOzifyParticleSystem.prototype.scene = null;

    IFLOzifyParticleSystem.prototype.particleSystem = null;

    IFLOzifyParticleSystem.prototype.startTime = null;

    function IFLOzifyParticleSystem(centerMesh, scene, appHeight) {
      this.finalize = __bind(this.finalize, this);
      this.updateParticles = __bind(this.updateParticles, this);      this.centerMesh = centerMesh;
      this.scene = scene;
      this.initParticleSystem(appHeight);
    }

    IFLOzifyParticleSystem.prototype.initParticleSystem = function(appHeight) {
      var boundingBox, center, density, geometry, k, material, params, shader, vertex, volume, _i,
        _this = this;
      shader = new IFLWindyParticlesShader();
      shader.uniforms["windScale"].value = 0;
      shader.uniforms["diffuseMultiplier"].value = 2;
      shader.uniforms["alphaMultiplier"].value = 0;
      params = {};
      params.fragmentShader = shader.fragmentShader;
      params.vertexShader = shader.vertexShader;
      params.uniforms = shader.uniforms;
      params.attributes = {
        speed: {
          type: 'f',
          value: []
        }
      };
      material = new THREE.ShaderMaterial(params);
      material.map = shader.uniforms["map"].value = THREE.ImageUtils.loadTexture("/models/textures/particles/ozify.png");
      material.size = shader.uniforms["size"].value = 0.5;
      material.transparent = true;
      material.blending = THREE.AdditiveBlending;
      material.depthWrite = false;
      material.scale = shader.uniforms["scale"].value = appHeight / 2;
      material.sizeAttenuation = true;
      this.centerMesh.geometry.computeBoundingBox();
      boundingBox = this.centerMesh.geometry.boundingBox;
      center = new THREE.Vector3();
      center.x = boundingBox.min.x + ((boundingBox.max.x - boundingBox.min.x) / 2);
      center.y = boundingBox.min.y + ((boundingBox.max.y - boundingBox.min.y) / 2);
      center.z = boundingBox.min.z + ((boundingBox.max.z - boundingBox.min.z) / 2);
      volume = (boundingBox.max.x - boundingBox.min.x) * (boundingBox.max.z - boundingBox.min.z);
      density = (500 * volume) / 43;
      geometry = new THREE.Geometry();
      geometry.centroid = center;
      geometry.vertices = [];
      for (k = _i = 0; 0 <= density ? _i < density : _i > density; k = 0 <= density ? ++_i : --_i) {
        vertex = new THREE.Vector3;
        vertex.x = vertex.startX = this.randRange(boundingBox.min.x - 2, boundingBox.max.x + 2);
        vertex.y = vertex.startY = this.randRange(boundingBox.min.y - 2, boundingBox.max.y + 2);
        vertex.z = vertex.startZ = this.randRange(boundingBox.min.z - 2, boundingBox.max.z + 2);
        vertex.speedX = 0.001 + Math.random() * 0.005;
        vertex.speedY = 0.001 + Math.random() * 0.005;
        vertex.speedZ = 0.001 + Math.random() * 0.005;
        vertex.randSpreadX = 0.001 + Math.random() * 0.002;
        vertex.randSpreadY = 0.001 + Math.random() * 0.002;
        vertex.randSpreadZ = 0.001 + Math.random() * 0.002;
        vertex.CCW = Math.random() > 0.5 ? 1 : -1;
        params.attributes.speed.value[k] = 1 + Math.random() * 10;
        geometry.vertices.push(vertex);
      }
      this.particleSystem = new THREE.ParticleSystem(geometry, material);
      this.particleSystem.position.copy(this.centerMesh.position);
      this.particleSystem.rotation.copy(this.centerMesh.rotation);
      this.scene.add(this.particleSystem);
      new TWEEN.Tween(shader.uniforms["alphaMultiplier"]).to({
        value: 0.2
      }, 1000).onUpdate(this.updateParticles).onComplete(function() {
        return new TWEEN.Tween(shader.uniforms["alphaMultiplier"]).to({
          value: 0
        }, 1000).onUpdate(_this.updateParticles).onComplete(_this.finalize).easing(TWEEN.Easing.Cubic.InOut).start();
      }).easing(TWEEN.Easing.Cubic.InOut).start();
      return this.startTime = Date.now();
    };

    IFLOzifyParticleSystem.prototype.updateParticles = function() {
      var dir, spreadX, spreadY, spreadZ, time, timeNormX, timeNormY, timeNormZ, vertex, _i, _len, _ref;
      time = Date.now() - this.startTime;
      this.particleSystem.material.uniforms["time"].value = time / 1000;
      _ref = this.particleSystem.geometry.vertices;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vertex = _ref[_i];
        timeNormX = time * vertex.speedX;
        timeNormY = time * vertex.speedY;
        timeNormZ = time * vertex.speedZ;
        spreadX = time * vertex.randSpreadX;
        spreadY = time * vertex.randSpreadY;
        spreadZ = time * vertex.randSpreadZ;
        dir = new THREE.Vector3(vertex.startX, vertex.startY, vertex.startZ);
        dir.sub(dir, this.particleSystem.geometry.centroid);
        dir.normalize();
        dir.x *= spreadX;
        dir.y *= spreadY;
        dir.z *= spreadZ;
        vertex.x = vertex.startX + dir.x + (Math.sin(timeNormX) * vertex.CCW);
        vertex.y = vertex.startY + dir.y + (Math.sin(timeNormY) * vertex.CCW);
        vertex.z = vertex.startZ + dir.z + (Math.sin(timeNormZ) * vertex.CCW);
      }
      return this.particleSystem.geometry.verticesNeedUpdate = true;
    };

    IFLOzifyParticleSystem.prototype.finalize = function() {
      this.scene.remove(this.particleSystem);
      this.scene = null;
      this.particleSystem = null;
      return this.centerMesh = null;
    };

    IFLOzifyParticleSystem.prototype.randRange = function(minNum, maxNum) {
      return Math.random() * (maxNum - minNum + 1) + minNum;
    };

    return IFLOzifyParticleSystem;

  })();

  BatchLoadModel = (function(_super) {

    __extends(BatchLoadModel, _super);

    function BatchLoadModel() {
      return BatchLoadModel.__super__.constructor.apply(this, arguments);
    }

    BatchLoadModel.prototype.defaults = {
      id: null,
      list: null
    };

    return BatchLoadModel;

  })(Backbone.Model);

  LocaleModel = (function(_super) {

    __extends(LocaleModel, _super);

    function LocaleModel() {
      return LocaleModel.__super__.constructor.apply(this, arguments);
    }

    LocaleModel.prototype.defaults = {
      lang: null,
      strings: null
    };

    return LocaleModel;

  })(Backbone.Model);

  SpriteSheetModel = (function(_super) {

    __extends(SpriteSheetModel, _super);

    function SpriteSheetModel() {
      return SpriteSheetModel.__super__.constructor.apply(this, arguments);
    }

    SpriteSheetModel.prototype.defaults = {
      frames: null,
      animations: null,
      images: null
    };

    SpriteSheetModel.prototype.id = null;

    return SpriteSheetModel;

  })(Backbone.Model);

  TemplateModel = (function(_super) {

    __extends(TemplateModel, _super);

    function TemplateModel() {
      return TemplateModel.__super__.constructor.apply(this, arguments);
    }

    TemplateModel.prototype.defaults = {
      id: "",
      text: ""
    };

    return TemplateModel;

  })(Backbone.Model);

  CollectionBatchLoad = (function(_super) {

    __extends(CollectionBatchLoad, _super);

    function CollectionBatchLoad() {
      return CollectionBatchLoad.__super__.constructor.apply(this, arguments);
    }

    CollectionBatchLoad.prototype.model = BatchLoadModel;

    return CollectionBatchLoad;

  })(Backbone.Collection);

  CollectionSpriteSheets = (function(_super) {

    __extends(CollectionSpriteSheets, _super);

    function CollectionSpriteSheets() {
      this.get = __bind(this.get, this);      return CollectionSpriteSheets.__super__.constructor.apply(this, arguments);
    }

    CollectionSpriteSheets.prototype.model = SpriteSheetModel;

    CollectionSpriteSheets.prototype.add = function(models, options) {
      var m;
      m = JSON.parse(models.result);
      m.id = models.id;
      return CollectionSpriteSheets.__super__.add.call(this, m, options);
    };

    CollectionSpriteSheets.prototype.get = function(from, id) {
      var image, model, ss;
      model = (this.where({
        id: from
      }))[0];
      ss = {};
      image = window.oz.baseAssets.get(model.id + "Assets");
      ss.image = image.src;
      ss.fullSize = [image.result.width, image.result.height];
      if (window.devicePixelRatio === 2) {
        ss.image2x = window.oz.baseAssets.get(model.id + "Assets2x").src;
      }
      ss.frame = model.get('animations')[id][0];
      ss.coord = model.get('frames')[ss.frame];
      ss.x = ss.coord[0];
      ss.y = ss.coord[1];
      ss.width = ss.coord[2];
      ss.height = ss.coord[3];
      return ss;
    };

    return CollectionSpriteSheets;

  })(Backbone.Collection);

  CollectionTemplates = (function(_super) {

    __extends(CollectionTemplates, _super);

    function CollectionTemplates() {
      return CollectionTemplates.__super__.constructor.apply(this, arguments);
    }

    CollectionTemplates.prototype.model = TemplateModel;

    return CollectionTemplates;

  })(Backbone.Collection);

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      this.navigateTo = __bind(this.navigateTo, this);
      this.hashChanged = __bind(this.hashChanged, this);      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.EVENT_HASH_CHANGED = 'EVENT_HASH_CHANGED';

    Router.prototype.firstEnter = true;

    Router.prototype.showInstructions = true;

    Router.prototype.routes = {
      ':area': 'hashChanged',
      ':area/': 'hashChanged',
      '/:area': 'hashChanged',
      '/:area/': 'hashChanged',
      '*actions': 'hashChanged'
    };

    Router.prototype.start = function() {
      Backbone.history.start({
        pushState: true,
        root: window.oz.BASE_PATH
      });
      return null;
    };

    Router.prototype.hashChanged = function(area, sub) {
      var parametersIndex;
      this.area = area != null ? area : null;
      this.sub = sub != null ? sub : null;
      if (this.firstEnter && this.area !== "" && this.area !== null) {
        this.showInstructions = false;
        this.firstEnter = false;
      }
      parametersIndex = this.area.indexOf("?");
      if (parametersIndex !== -1) {
        this.area = this.area.substr(0, parametersIndex);
      }
      this.trigger(Router.EVENT_HASH_CHANGED, this.area, this.sub);
      return null;
    };

    Router.prototype.navigateTo = function(where, trigger) {
      if (trigger == null) {
        trigger = true;
      }
      if (!trigger) {
        this.trigger(Router.EVENT_HASH_CHANGED, where);
        return;
      }
      window.oz.appView.showMap(where === "");
      if (where.charAt(where.length - 1) !== "/") {
        where += '/';
      }
      this.navigate(where, {
        trigger: true
      });
      return null;
    };

    return Router;

  })(Backbone.Router);

  AssetLoader = (function() {

    AssetLoader.prototype.preload = null;

    function AssetLoader() {
      this.handleFileError = __bind(this.handleFileError, this);
      this.handleFileLoaded = __bind(this.handleFileLoaded, this);
      this.handleOverallProgress = __bind(this.handleOverallProgress, this);
      this.loadFiles = __bind(this.loadFiles, this);      _.extend(this, Backbone.Events);
      this.preload = new createjs.PreloadJS;
      this.preload.onFileLoad = this.handleFileLoaded;
      this.preload.onError = this.handleFileError;
      this.preload.onProgress = this.handleOverallProgress;
      this.preload.setMaxConnections(5);
      null;
    }

    AssetLoader.prototype.loadFiles = function(manifest) {
      var item;
      while (manifest.length > 0) {
        item = manifest.shift();
        if (item.retina != null) {
          if (window.devicePixelRatio === 2) {
            this.preload.loadFile(item);
          }
        } else {
          this.preload.loadFile(item);
        }
      }
      return null;
    };

    AssetLoader.prototype.handleOverallProgress = function(event) {
      this.trigger(PreloaderEvents.PROGRESS, event);
      return null;
    };

    AssetLoader.prototype.handleFileLoaded = function(event) {
      this.trigger(PreloaderEvents.COMPLETE, event);
      return null;
    };

    AssetLoader.prototype.handleFileError = function(event) {
      this.trigger(PreloaderEvents.FAIL, event);
      return null;
    };

    return AssetLoader;

  })();

  PreloaderEvents = (function() {

    function PreloaderEvents() {}

    PreloaderEvents.COMPLETE = "onComplete";

    PreloaderEvents.PROGRESS = "onProgress";

    PreloaderEvents.FAIL = "onFail";

    return PreloaderEvents;

  })();

  MusicBoxSequencer = (function() {

    function MusicBoxSequencer() {}

    MusicBoxSequencer.data = null;

    MusicBoxSequencer.playing = false;

    MusicBoxSequencer.animationTimer = null;

    MusicBoxSequencer.animationDuration = 1000 / 3;

    MusicBoxSequencer.initialize = function(data) {
      MusicBoxSequencer.data = data;
      if (!MusicBoxSequencer.playing) {
        MusicBoxSequencer.play();
      }
      return null;
    };

    MusicBoxSequencer.toggle = function() {
      if (MusicBoxSequencer.playing) {
        MusicBoxSequencer.stop();
      } else {
        MusicBoxSequencer.play();
      }
      return null;
    };

    MusicBoxSequencer.play = function(from) {
      MusicBoxSequencer.playing = true;
      MusicBoxSequencer.playAudioLoop(from);
      return null;
    };

    MusicBoxSequencer.stop = function() {
      MusicBoxSequencer.playing = false;
      MusicBoxSequencer.stopAudioLoop();
      return null;
    };

    MusicBoxSequencer.playAudioLoop = function(col) {
      var colStepDuration;
      colStepDuration = MusicBoxSequencer.animationDuration;
      if (col) {
        MusicBoxSequencer.colNo = col;
      } else {
        MusicBoxSequencer.colNo = MusicBoxSequencer.data.cols.length / 2;
      }
      MusicBoxSequencer.doLoopAudio();
      MusicBoxSequencer.loopAudio = setInterval(MusicBoxSequencer.doLoopAudio, colStepDuration);
      return null;
    };

    MusicBoxSequencer.doLoopAudio = function(max) {
      var currentCol, i, rowNo;
      if (max == null) {
        max = MusicBoxSequencer.data.cols.length - 1;
      }
      if (MusicBoxSequencer.colNo > max) {
        MusicBoxSequencer.colNo = 0;
      }
      currentCol = MusicBoxSequencer.data.cols[MusicBoxSequencer.colNo];
      i = 0;
      while (i < currentCol.rows.length) {
        rowNo = currentCol.rows[i];
        MusicBoxSequencer.playSound(MusicBoxSequencer.colNo, rowNo);
        i++;
      }
      i = 0;
      while (i < MusicBoxSequencer.data.loops.length) {
        MusicBoxSequencer.playLoopSound(MusicBoxSequencer.data.loops[i]);
        i++;
      }
      MusicBoxSequencer.colNo++;
      return null;
    };

    MusicBoxSequencer.playLoopSound = function(data) {
      var event;
      event = "";
      if (data.step) {
        if (MusicBoxSequencer.colNo % data.step === 0) {
          event = data.event;
        }
      } else if (data.col != null) {
        if (MusicBoxSequencer.colNo === data.col) {
          event = data.event;
        }
      }
      if (event !== "") {
        SoundController.send(data.event);
      }
      return null;
    };

    MusicBoxSequencer.stopAudioLoop = function() {
      clearInterval(MusicBoxSequencer.loopAudio);
      return null;
    };

    MusicBoxSequencer.playSound = function(colNo, rowNo) {
      SoundController.send(MusicBoxSequencer.getSoundEvent(colNo, rowNo));
      return null;
    };

    MusicBoxSequencer.getSoundEvent = function(colNo, rowNo) {
      return MusicBoxSequencer.data.notes[(MusicBoxSequencer.data.dimensions.lines - 1) - rowNo].event;
    };

    MusicBoxSequencer.transitionTo = function(playing, currentCol, data) {
      var col;
      SoundController.userLoopLonger = data;
      if (playing) {
        MusicBoxSequencer.data = data;
        col = currentCol < 12 ? (currentCol + 12) + (data.dimensions.cols / 2) : (currentCol - 12) + (data.dimensions.cols / 2);
        MusicBoxSequencer.play(col);
      } else {
        MusicBoxSequencer.initialize(data);
      }
      return null;
    };

    return MusicBoxSequencer;

  }).call(this);

  SoundController = (function() {

    function SoundController() {}

    SoundController.xmlLink = null;

    SoundController.mp3link = null;

    SoundController.swfLink = null;

    SoundController.loaded = false;

    SoundController.progress = 0;

    SoundController.holding = [];

    SoundController.userPaused = false;

    SoundController.userLoop = null;

    SoundController.userLoopLonger = null;

    SoundController.active = false;

    SoundController.onBatchComplete = null;

    SoundController.prototype.batchLoaded = false;

    SoundController.init = function(remote) {
      if (remote) {
        SoundController.xmlLink = "http://soundcontroller.se/unit9/oz/config.xml";
        SoundController.mp3link = "http://soundcontroller.se/unit9/oz/mp3s/";
        SoundController.swfLink = "http://soundcontroller.se/unit9/oz/";
        return require(["http://soundcontroller.se/unit9/oz/scsound.js"], SoundController.onLibLoaded);
      } else {
        SoundController.xmlLink = "/sounds/config.xml";
        SoundController.mp3link = "/sounds/";
        SoundController.swfLink = "/sounds/";
        return require(["/js/vendor/scsound.js"], SoundController.onLibLoaded);
      }
    };

    SoundController.onLibLoaded = function() {
      if (SoundController.active) {
        return SCSound.initialize(SoundController.xmlLink, SoundController.mp3link, SoundController.swfLink, SoundController.onloadcomplete, SoundController.onloadprogress, SoundController.onbatchloaded);
      } else {
        return SoundController.progress = 100;
      }
    };

    SoundController.onloadprogress = function(percent) {
      return SoundController.progress = Math.round(percent.toFixed(2) * 100);
    };

    SoundController.onloadcomplete = function() {
      SoundController.loaded = true;
      return SoundController.send('landing_start');
    };

    SoundController.onbatchloaded = function() {
      if (SoundController.onBatchComplete != null) {
        if (typeof SoundController.onBatchComplete !== "string") {
          SoundController.send(SoundController.onBatchComplete[0]);
          return SoundController.onBatchComplete = SoundController.onBatchComplete[1];
        } else {
          SoundController.send(SoundController.onBatchComplete);
          if (SoundController.onBatchComplete !== "musicbox_shared") {
            SoundController.playBackgroundMusic();
          } else {
            SoundController.batchLoaded = true;
          }
          return SoundController.onBatchComplete = null;
        }
      }
    };

    SoundController.send = function(id, onBatchComplete) {
      if (onBatchComplete != null) {
        SoundController.onBatchComplete = onBatchComplete;
      }
      if (SoundController.active) {
        if (SoundController.loaded) {
          return SCSound.send(id);
        } else {
          return SoundController.holding.push(id);
        }
      }
    };

    SoundController.paused = function(user) {
      if (SoundController.userPaused) {
        return;
      }
      SoundController.userPaused = user;
      return SoundController.send("sound_off");
    };

    SoundController.resume = function(user) {
      if (user == null) {
        user = false;
      }
      if (user) {
        SoundController.userPaused = false;
        SoundController.send("sound_on");
        return;
      }
      if (SoundController.userPaused) {
        return;
      }
      SoundController.userPaused = false;
      return SoundController.send("sound_on");
    };

    SoundController.oz = function() {
      return (window || document).oz;
    };

    SoundController.playBackgroundMusic = function() {
      if (SoundController.userLoop) {
        return MusicBoxSequencer.initialize(SoundController.userLoopLonger);
      } else {
        return MusicBoxSequencer.initialize(JSON.parse(SoundController.oz().baseAssets.get('loopbg').result));
      }
    };

    SoundController.preview = function(data) {
      return MusicBoxSequencer.initialize(data);
    };

    SoundController.stopBackgroundMusic = function() {
      return MusicBoxSequencer.stop();
    };

    SoundController.transition = function(playing, column) {
      var base, col, cols, currentCol, i, j, row, rows, user, _i, _j, _ref, _ref1;
      base = JSON.parse(SoundController.oz().baseAssets.get('loopbg').result);
      user = SoundController.userLoop;
      cols = [];
      for (i = _i = 0, _ref = base.dimensions.cols; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        cols[i] = {
          "rows": []
        };
      }
      for (i = _j = 0, _ref1 = user.cols.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        currentCol = user.cols[i];
        j = 0;
        col = i < 12 ? i + (user.dimensions.cols / 2) : i - (user.dimensions.cols / 2);
        rows = [];
        while (j < currentCol.rows.length) {
          row = currentCol.rows[j];
          j++;
          rows.push(row);
        }
        cols[col + (base.dimensions.cols / 2)] = {
          "rows": rows
        };
      }
      base.cols = cols;
      return MusicBoxSequencer.transitionTo(playing, column, base);
    };

    return SoundController;

  }).call(this);

  Analytics = (function() {

    function Analytics() {}

    Analytics.tags = null;

    Analytics.started = false;

    Analytics.tagsFlood = null;

    Analytics.GA_ACCOUNT = '37524215-3';

    Analytics.start = function() {
      window._gaq = window._gaq || [['_setAccount', "UA-" + Analytics.GA_ACCOUNT], ['_trackPageview']];
      Analytics.tags = JSON.parse(window.oz.baseAssets.get('trackingTags').result);
      Analytics.tagsFlood = JSON.parse(window.oz.baseAssets.get('trackingTagsFloodlight').result);
      Analytics.started = true;
      return null;
    };

    Analytics.track = function(param, floodlight) {
      var i, tag, v, _i, _ref;
      if (!Analytics.started) {
        Analytics.start();
      }
      if (param) {
        tag = [];
        tag.push('_trackEvent');
        v = Analytics.tags[param];
        if (v != null) {
          for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            tag.push(v[i]);
          }
          window._gaq.push(tag);
        }
      }
      if (floodlight) {
        Analytics.trackFloodlight(floodlight);
      }
      return null;
    };

    Analytics.trackFloodlight = function(tag) {
      var a, axel, cat, i, iframe;
      i = $('#floodlightTrack');
      if (i.length > 0) {
        i.remove();
      }
      axel = Math.random() + "";
      a = axel * 10000000000000;
      cat = Analytics.tagsFlood[tag].cat;
      iframe = $('<img id="floodlightTrack" />');
      iframe.attr({
        src: "http://3944448.fls.doubleclick.net/activityi;src=3944448;type=googl379;cat=" + cat + ";ord=" + a + "?",
        width: 1,
        height: 1,
        style: "visibility:hidden; position: absolute; top:0; left:0"
      });
      $('body').prepend(iframe);
      return null;
    };

    return Analytics;

  }).call(this);

  MathUtils = (function() {

    function MathUtils() {}

    MathUtils.lerp = function(ratio, start, end) {
      return start + (end - start) * ratio;
    };

    MathUtils.norm = function(val, min, max) {
      return (val - min) / (max - min);
    };

    MathUtils.map = function(val, min1, max1, min2, max2) {
      return MathUtils.lerp(MathUtils.norm(val, min1, max1), min2, max2);
    };

    return MathUtils;

  }).call(this);

  QueryString = (function() {

    function QueryString() {}

    QueryString.get = function(name) {
      var regex, regexS, results;
      if (name) {
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        regexS = "[\\?&]" + name + "=([^&#]*)";
        regex = new RegExp(regexS);
        results = regex.exec(window.location.search);
        if (results === null) {
          return "";
        } else {
          return decodeURIComponent(results[1].replace(/\+/g, " "));
        }
      } else {
        return "";
      }
    };

    return QueryString;

  }).call(this);

  BrowserDetection = (function() {

    BrowserDetection.prototype.browser = null;

    BrowserDetection.prototype.browserVersion = null;

    BrowserDetection.prototype.gl = null;

    BrowserDetection.prototype.webGL = false;

    BrowserDetection.prototype.webGLContext = false;

    BrowserDetection.prototype.webGLAdvanced = false;

    BrowserDetection.prototype.forcePass = false;

    function BrowserDetection() {
      this.testWebGLContext = __bind(this.testWebGLContext, this);
      this.onError = __bind(this.onError, this);
      this.onSuccess = __bind(this.onSuccess, this);
      this.compare = __bind(this.compare, this);      this.browser = BrowserDetect.browser;
      this.browserVersion = BrowserDetect.version;
      try {
        this.webGLContext = this.testWebGLContext();
        this.webGLAdvanced = this.testWebGLAdvancedFeats();
      } catch (error) {

      }
      this.webGL = Modernizr.webgl && this.webGLContext;
    }

    BrowserDetection.prototype.init = function() {
      return this.compare();
    };

    BrowserDetection.prototype.compare = function() {
      if ((this.browser === 'Chrome' && (this.webGL && this.webGLAdvanced)) || (this.forcePass === true)) {
        return this.onSuccess();
      } else if (this.browser === 'Chrome' && (this.webGL && !this.webGLAdvanced)) {
        return this.onError({
          message: 'Chrome_NoWebGLAdvancedFeats_message',
          buttons: ['Chrome_NoWebGL_button1', 'Chrome_NoWebGL_button2']
        });
      } else if (this.browser === 'Chrome' && !this.webGL) {
        return this.onError({
          message: 'Chrome_NoWebGL_message',
          buttons: ['Chrome_NoWebGL_button1', 'Chrome_NoWebGL_button2']
        });
      } else if (this.browser === 'Firefox' && (this.webGL && this.webGLAdvanced)) {
        return this.onError({
          message: 'FF4_Safari_WebGLmessage',
          buttons: ['FF4_Safari_WebGL_button1', 'FF4_Safari_WebGL_button2']
        });
      } else if (this.browser === 'Firefox' && (!this.webGL || !this.webGLAdvanced)) {
        return this.onError({
          message: 'FF4_noWebGL_message',
          buttons: ['FF4_noWebGL_button1', 'FF4_noWebGL_button2']
        });
      } else if (this.browser === 'Explorer' && (this.browserVersion === 6 || this.browserVersion === 7 || this.browserVersion === 8 || this.browserVersion === 9)) {
        return this.onError({
          message: 'Explorer_OldVersion_message',
          buttons: ['Explorer_OldVersion_button1']
        });
      } else if (this.browser === 'Safari' && (this.webGL && this.webGLAdvanced)) {
        return this.onError({
          message: 'FF4_Safari_WebGLmessage',
          buttons: ['FF4_Safari_WebGL_button1', 'FF4_Safari_WebGL_button2']
        });
      } else if (this.browser === 'Safari' && (!this.webGL || !this.webGLAdvanced)) {
        return this.onError({
          message: 'FF4_noWebGL_message',
          buttons: ['Safari_button1']
        });
      } else {
        if (!window.WebGLRenderingContext) {
          return this.onError({
            message: 'NoWebGLRenderingContext_message',
            buttons: ['NoWebGLRenderingContext_button1', 'NoWebGLRenderingContext_button2']
          });
        } else if (!this.webGLContext) {
          return this.onError({
            message: 'NoWebGL_message',
            buttons: ['NoWebGL_button1', 'NoWebGL_button2']
          });
        }
      }
    };

    BrowserDetection.prototype.onSuccess = function() {
      return this.onError({
        message: 'Chrome_NoWebGL_message',
        buttons: ['Chrome_NoWebGL_button1', 'Chrome_NoWebGL_button2']
      });
    };

    BrowserDetection.prototype.onError = function(error) {};

    BrowserDetection.prototype.testWebGLContext = function() {
      var result, _canvas;
      result = false;
      try {
        _canvas = document.createElement('canvas');
        if (!(this.gl = _canvas.getContext('experimental-webgl', {
          alpha: 1,
          premultipliedAlpha: true,
          antialias: false,
          stencil: true,
          preserveDrawingBuffer: false
        }))) {
          result = false;
        } else {
          result = true;
        }
      } catch (error) {
        result = false;
      }
      return result;
    };

    BrowserDetection.prototype.testWebGLAdvancedFeats = function() {
      var dxt1Supported, dxt1rgbaSupported, dxt3Supported, dxt5Supported, format, formats, _glExtensionCompressedTextureS3TC, _glExtensionTextureFilterAnisotropic, _i, _len;
      if (this.gl == null) {
        return false;
      }
      _glExtensionCompressedTextureS3TC = this.gl.getExtension('WEBGL_compressed_texture_s3tc') || this.gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || this.gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
      formats = this.gl.getParameter(this.gl.COMPRESSED_TEXTURE_FORMATS);
      dxt5Supported = false;
      dxt3Supported = false;
      dxt1Supported = false;
      dxt1rgbaSupported = false;
      if (formats != null) {
        for (_i = 0, _len = formats.length; _i < _len; _i++) {
          format = formats[_i];
          switch (format) {
            case _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT:
              dxt5Supported = true;
              break;
            case _glExtensionCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT:
              dxt1Supported = true;
              break;
            case _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT1_EXT:
              dxt1rgbaSupported = true;
              break;
            case _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT:
              dxt3Supported = true;
          }
        }
      }
      _glExtensionTextureFilterAnisotropic = this.gl.getExtension('EXT_texture_filter_anisotropic') || this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
      return _glExtensionCompressedTextureS3TC && _glExtensionTextureFilterAnisotropic && dxt5Supported && dxt3Supported && dxt1Supported && dxt1rgbaSupported;
    };

    return BrowserDetection;

  })();

  ElasticNumber = (function() {

    ElasticNumber.prototype.spring = 0;

    ElasticNumber.prototype.damping = 0;

    ElasticNumber.prototype._value = 0;

    ElasticNumber.prototype._aim = 0;

    ElasticNumber.prototype._vel = 0;

    ElasticNumber.prototype.roundToInt = false;

    ElasticNumber.prototype.maxdelta = 0;

    ElasticNumber.prototype.deltaScale = 0;

    ElasticNumber.prototype.threshold = 0;

    function ElasticNumber() {
      this.spring = 0.03;
      this.damping = 0.3;
      this._vale = 0;
      this._aim = 0;
      this._vel = 0;
      this.roundToInt = false;
      this.maxdelta = 0.3;
      this.deltaScale = 100;
      this.threshold = 0.01;
    }

    ElasticNumber.prototype.aimAt = function(value) {
      return this._aim = value;
    };

    ElasticNumber.prototype.step = function(delta) {
      var acc, d, delt;
      d = this._aim - this._value;
      acc = d * this.spring - this._vel * this.damping;
      delt = Math.min(delta, this.maxdelta) * this.deltaScale;
      this._vel += acc * delt;
      return this._value = this._value + this._vel;
    };

    return ElasticNumber;

  })();

  Filter = (function() {

    function Filter() {}

    Filter.getPixels = function(img) {
      var c, ctx;
      c = Filter.getCanvas(img.width, img.height);
      ctx = c.getContext("2d");
      ctx.drawImage(img, 0, 0);
      return ctx.getImageData(0, 0, c.width, c.height);
    };

    Filter.getCanvas = function(w, h) {
      var c;
      c = document.createElement("canvas");
      c.width = w;
      c.height = h;
      return c;
    };

    Filter.filterImage = function(filter, image, var_args) {
      var args, i, _i, _ref;
      args = [Filter.getPixels(image)];
      for (i = _i = 2, _ref = arguments.length; 2 <= _ref ? _i < _ref : _i > _ref; i = 2 <= _ref ? ++_i : --_i) {
        args.push(arguments[i]);
      }
      return filter.apply(null, args);
    };

    Filter.saturation = function(pixels, saturation) {
      var average, b, d, g, i, r, _i, _ref;
      d = pixels.data;
      for (i = _i = 0, _ref = d.length; _i < _ref; i = _i += 4) {
        r = d[i];
        g = d[i + 1];
        b = d[i + 2];
        average = (r + g + b) / 3.0;
        if (saturation > 0.0) {
          r += (average - r) * (1.0 - 1.0 / (1.001 - saturation));
          g += (average - g) * (1.0 - 1.0 / (1.001 - saturation));
          b += (average - b) * (1.0 - 1.0 / (1.001 - saturation));
        } else {
          r += (average - r) * (-saturation);
          g += (average - g) * (-saturation);
          b += (average - b) * (-saturation);
        }
        d[i] = r;
        d[i + 1] = g;
        d[i + 2] = b;
      }
      return pixels;
    };

    Filter.brightnessContrast = function(pixels, brightness, contrast) {
      var b, d, g, i, r, _i, _ref;
      d = pixels.data;
      for (i = _i = 0, _ref = d.length; _i < _ref; i = _i += 4) {
        r = d[i];
        g = d[i + 1];
        b = d[i + 2];
        r += brightness;
        g += brightness;
        b += brightness;
        if (contrast > 0.0) {
          r = (r - 0.5) / (1.0 - contrast) + 0.5;
          g = (g - 0.5) / (1.0 - contrast) + 0.5;
          b = (b - 0.5) / (1.0 - contrast) + 0.5;
        } else {
          r = (r - 0.5) * (1.0 + contrast) + 0.5;
          g = (g - 0.5) * (1.0 + contrast) + 0.5;
          b = (b - 0.5) * (1.0 + contrast) + 0.5;
        }
        d[i] = r;
        d[i + 1] = g;
        d[i + 2] = b;
      }
      return pixels;
    };

    return Filter;

  }).call(this);

  Requester = (function() {

    function Requester() {}

    Requester.requests = [];

    Requester.request = function(data) {
      var r;
      r = $.ajax({
        url: data.url,
        type: data.type ? data.type : "POST",
        data: data.data ? data.data : null,
        dataType: data.dataType ? data.dataType : "json",
        contentType: data.contentType ? data.contentType : "application/x-www-form-urlencoded; charset=UTF-8",
        processData: data.processData !== null && data.processData !== void 0 ? data.processData : true
      });
      r.done(data.done);
      r.fail(data.fail);
      return null;
    };

    Requester.send = function(url, params) {
      var formData, key, value, xhr;
      formData = new FormData;
      for (key in params) {
        value = params[key];
        formData.append(key, value);
      }
      xhr = new XMLHttpRequest;
      xhr.open("POST", url, true);
      xhr.onload = function(e) {
        return console.log(e);
      };
      xhr.send(formData);
      return null;
    };

    Requester.shortURL = function(url, done, fail) {
      var event;
      event = {
        id: url
      };
      done(event);
      return;
      Requester.request({
        url: "https://www.googleapis.com/urlshortener/v1/url",
        type: "POST",
        data: JSON.stringify({
          "longUrl": url
        }),
        done: done,
        fail: fail,
        dataType: "json",
        contentType: "application/json"
      });
      return null;
    };

    Requester.addImage = function(data, kind, done, fail) {
      /*
              Usage:
                  data = canvass.toDataURL("image/jpeg").slice("data:image/jpeg;base64,".length)
                  Requester.addImage data, "zoetrope", @done, @fail
      */
      Requester.request({
        url: '/api/image/add',
        type: 'POST',
        data: {
          image: encodeURI(data),
          kind: kind
        },
        done: done,
        fail: fail
      });
      return null;
    };

    Requester.addMusic = function(data, done, fail) {
      Requester.request({
        url: '/api/music/',
        type: 'POST',
        data: {
          data: data
        },
        done: done,
        fail: fail
      });
      return null;
    };

    Requester.getMusic = function(id, done, fail) {
      Requester.request({
        url: '/api/music/' + id,
        type: 'GET',
        data: null,
        done: done,
        fail: fail
      });
      return null;
    };

    return Requester;

  }).call(this);

  BaseAssets = (function() {

    BaseAssets.prototype.preloader = null;

    BaseAssets.prototype.loadedAssets = null;

    BaseAssets.prototype.collection = null;

    BaseAssets.prototype.batches = null;

    BaseAssets.prototype.loadedBatches = null;

    BaseAssets.prototype.batchesToLoad = null;

    function BaseAssets() {
      this.onFileComplete = __bind(this.onFileComplete, this);
      this.onFail = __bind(this.onFail, this);
      this.onProgress = __bind(this.onProgress, this);
      this.get = __bind(this.get, this);
      this.onCollectionError = __bind(this.onCollectionError, this);
      this.onCollectionSuccess = __bind(this.onCollectionSuccess, this);
      this.init = __bind(this.init, this);
      this.loadBatch = __bind(this.loadBatch, this);      _.extend(this, Backbone.Events);
      null;
    }

    BaseAssets.prototype.loadBatch = function(batches) {
      var batch, _i, _len, _ref;
      this.batches = batches;
      this.batchesToLoad = [];
      _ref = this.batches;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        batch = _ref[_i];
        if (this.loadedBatches.toString().indexOf(batch) === -1) {
          this.batchesToLoad.push(batch);
          this.preloader.loadFiles((this.collection.where({
            id: batch
          }))[0].get("list"));
        }
      }
      if (this.batchesToLoad.length === 0) {
        this.trigger("COMPLETE");
      }
      return null;
    };

    BaseAssets.prototype.init = function(batches) {
      this.batches = batches;
      this.loadedBatches = [];
      this.batchesToLoad = [];
      this.preloader = new AssetLoader;
      this.preloader.on(PreloaderEvents.COMPLETE, this.onFileComplete);
      this.preloader.on(PreloaderEvents.PROGRESS, this.onProgress);
      this.preloader.on(PreloaderEvents.FAIL, this.onFail);
      this.collection = new CollectionBatchLoad;
      this.collection.url = "/js/assetList.json";
      this.collection.fetch({
        success: this.onCollectionSuccess,
        error: this.onCollectionError
      });
      return null;
    };

    BaseAssets.prototype.onCollectionSuccess = function(event) {
      this.loadBatch(this.batches);
      return null;
    };

    BaseAssets.prototype.onCollectionError = function(event) {
      return null;
    };

    BaseAssets.prototype.get = function(id) {
      return this.loadedAssets[id];
    };

    BaseAssets.prototype.onProgress = function(event) {
      this.trigger("PROGRESS", event);
      return null;
    };

    BaseAssets.prototype.onFail = function(event) {
      return null;
    };

    BaseAssets.prototype.onFileComplete = function(event) {
      switch (event.type) {
        case 'json':
          if (event.src.indexOf('/ss/') > -1) {
            (window || document).oz.ss.add(event);
          }
      }
      if (this.preloader.preload._numItems === this.preloader.preload._numItemsLoaded) {
        this.loadedAssets = event.target._loadedItemsById;
        this.loadedBatches = this.loadedBatches.concat(this.batchesToLoad);
        this.trigger("COMPLETE", this.loadedAssets);
      }
      return null;
    };

    return BaseAssets;

  })();

  Locale = (function() {

    Locale.prototype.lang = null;

    Locale.prototype.data = null;

    function Locale() {
      this.get = __bind(this.get, this);
      this.loadBackup = __bind(this.loadBackup, this);
      this.onSuccess = __bind(this.onSuccess, this);      _.extend(this, Backbone.Events);
      this.lang = (navigator.language || navigator.userLanguage).toLowerCase();
      $.ajax({
        url: '/locale/en/strings.txt',
        dataType: "json",
        success: this.onSuccess,
        error: this.loadBackup
      });
      null;
    }

    Locale.prototype.onSuccess = function(event) {
      var d;
      d = null;
      console.log(event)
      if (event.responseText) {
        d = JSON.parse(event.responseText);
      } else {
        d = event;
      }
      this.data = new LocaleModel(d);
      this.trigger('complete');
      return null;
    };

    Locale.prototype.loadBackup = function() {
      var _this = this;
      $.ajax({
        url: '/locale/en/strings.txt',
        dataType: 'text',
        complete: this.onSuccess,
        error: function() {
          return console.log('error on loading backup');
        }
      });
      return null;
    };

    Locale.prototype.get = function(id) {
      return this.data.get('strings')[id] || "";
    };

    return Locale;

  })();

  Share = (function() {

    function Share() {}

    Share.openWin = function(url, w, h) {
      var left, top;
      left = (screen.availWidth - w) >> 1;
      top = (screen.availHeight - h) >> 1;
      window.open(url, '', 'top=' + top + ',left=' + left + ',width=' + w + ',height=' + h + ',location=no,menubar=no');
      return null;
    };

    Share.plus = function(url) {
      Share.openWin("https://plus.google.com/share?url=" + url, 650, 385);
      return null;
    };

    Share.facebook = function(url, copy) {
      var yourTextHere;
      yourTextHere = encodeURIComponent(copy);
      Share.openWin("http://www.facebook.com/share.php?u=" + url + "&t=" + yourTextHere, 600, 300);
      return null;
    };

    Share.twitter = function(url, copy) {
      var yourTextHere;
      yourTextHere = encodeURIComponent(copy);
      Share.openWin("http://twitter.com/intent/tweet/?text=" + yourTextHere + "&url=" + url, 600, 300);
      return null;
    };

    Share.renren = function(url) {
      Share.openWin("http://share.renren.com/share/buttonshare.do?link=" + url, 600, 300);
      return null;
    };

    Share.weibo = function(url) {
      Share.openWin("http://service.weibo.com/share/share.php?url=" + url + "&language=zh_cn", 600, 300);
      return null;
    };

    return Share;

  }).call(this);

  Templates = (function() {

    Templates.prototype.templates = null;

    function Templates(templates) {
      this.get = __bind(this.get, this);
      this.parseXML = __bind(this.parseXML, this);      _.extend(this, Backbone.Events);
      this.parseXML(templates);
      null;
    }

    Templates.prototype.parseXML = function(data) {
      var temp;
      temp = [];
      $(data).find('template').each(function(key, value) {
        return temp.push(new TemplateModel({
          id: $(value).attr('id').toString(),
          text: $.trim($(value).text())
        }));
      });
      this.templates = new CollectionTemplates(temp);
      return null;
    };

    Templates.prototype.get = function(id) {
      var t;
      t = this.templates.where({
        id: id
      });
      t = t[0].get('text');
      return $.trim(t);
    };

    return Templates;

  })();

  Abstract = (function(_super) {

    __extends(Abstract, _super);

    function Abstract() {
      this.oz = __bind(this.oz, this);
      this.onAssetsComplete = __bind(this.onAssetsComplete, this);
      this.onUnLock = __bind(this.onUnLock, this);
      this.onLock = __bind(this.onLock, this);
      this.onLockMouseMove = __bind(this.onLockMouseMove, this);
      this.pointerLockChange = __bind(this.pointerLockChange, this);
      this.releasePointLock = __bind(this.releasePointLock, this);
      this.pointLock = __bind(this.pointLock, this);
      this.onAssetsProgress = __bind(this.onAssetsProgress, this);
      this.onAssetsInitLoading = __bind(this.onAssetsInitLoading, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.mouseEnabled = __bind(this.mouseEnabled, this);
      this.show = __bind(this.show, this);
      this.hide = __bind(this.hide, this);
      this.onResize = __bind(this.onResize, this);
      this.remove = __bind(this.remove, this);
      this.addChild = __bind(this.addChild, this);
      this.dispose = __bind(this.dispose, this);
      this.move = __bind(this.move, this);
      this.empty = __bind(this.empty, this);
      this.render = __bind(this.render, this);
      this.pause = __bind(this.pause, this);
      this.resume = __bind(this.resume, this);
      this.update = __bind(this.update, this);
      this.init = __bind(this.init, this);      return Abstract.__super__.constructor.apply(this, arguments);
    }

    Abstract.prototype.el = null;

    Abstract.prototype.id = null;

    Abstract.prototype.children = null;

    Abstract.prototype.template = null;

    Abstract.prototype.templateVars = null;

    Abstract.prototype.assetsBatch = null;

    Abstract.prototype.paused = true;

    Abstract.prototype.displayMode = '';

    Abstract.prototype.visible = true;

    Abstract.prototype.cssTransitionClass = null;

    Abstract.prototype.initialize = function() {
      var tmpHTML;
      this.children = [];
      if (this.template) {
        tmpHTML = _.template(this.oz().templates.get(this.template));
        this.setElement(tmpHTML(this.templateVars));
      }
      if (this.id) {
        this.$el.attr('id', this.id);
      }
      if (this.className) {
        this.$el.addClass(this.className);
      }
      this.init();
      if (this.assetsBatch != null) {
        this.onAssetsInitLoading();
        this.oz().baseAssets.on("COMPLETE", this.onAssetsComplete);
        this.oz().baseAssets.on("PROGRESS", this.onAssetsProgress);
        this.oz().baseAssets.loadBatch(this.assetsBatch);
      }
      this.paused = false;
      return null;
    };

    Abstract.prototype.init = function() {
      return null;
    };

    Abstract.prototype.update = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child.update();
      }
      return null;
    };

    Abstract.prototype.resume = function() {
      var child, _i, _len, _ref;
      this.paused = false;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.resume != null) {
          child.resume();
        }
        child.$el.resume();
      }
      return null;
    };

    Abstract.prototype.pause = function() {
      var child, _i, _len, _ref;
      this.paused = true;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.pause != null) {
          child.pause();
        }
        child.$el.pause();
      }
      return null;
    };

    Abstract.prototype.render = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child.render();
      }
      return null;
    };

    Abstract.prototype.empty = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child) {
          if (child.dispose != null) {
            child.dispose();
          }
          if (child.empty != null) {
            child.empty();
          }
          this.remove(child);
        }
      }
      this.children = [];
      this.$el.empty();
      return null;
    };

    Abstract.prototype.move = function(x, y) {
      this.$el.css({
        left: x,
        top: y
      });
      return null;
    };

    Abstract.prototype.dispose = function() {
      var n;
      n = $(this.$el.children()[0]).attr('id') || $(this.$el.children()[0]).attr('class') || this.$el.html() || this.$el.attr('class') || this.$el.attr('style');
      console.error("don't forget to override dispose -> " + n);
      return null;
    };

    Abstract.prototype.addChild = function(child, prepend) {
      var c;
      if (prepend == null) {
        prepend = false;
      }
      if (child.el) {
        this.children.push(child);
      }
      c = child.el ? child.$el : child;
      if (!prepend) {
        this.$el.append(c);
      } else {
        this.$el.prepend(c);
      }
      return null;
    };

    Abstract.prototype.remove = function(child) {
      var c;
      if (child == null) {
        return;
      }
      c = child.el ? child.$el : $(child);
      if (c) {
        child.dispose();
      }
      if (c && this.children.indexOf(child) !== -1) {
        this.children.splice(this.children.indexOf(child), 1);
      }
      c.remove();
      return null;
    };

    Abstract.prototype.onResize = function(event) {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.onResize) {
          child.onResize();
        }
      }
      return null;
    };

    Abstract.prototype.hide = function(anim, callback, time, ease, hidden) {
      var _this = this;
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      if (time == null) {
        time = 400;
      }
      if (ease == null) {
        ease = "linear";
      }
      if (hidden == null) {
        hidden = false;
      }
      if (this.$el.hasClass("button_alpha_enabled")) {
        this.$el.removeClass("button_alpha_enabled");
        this.cssTransitionClass = "button_alpha_enabled";
      }
      this.visible = false;
      if (!anim) {
        this.$el.css({
          opacity: 0
        });
        if (hidden) {
          this.$el.css({
            "visibility": "hidden"
          });
        }
      } else {
        this.$el.stop().animate({
          opacity: 0
        }, {
          duration: time,
          ease: ease,
          complete: function() {
            if (typeof callback === "function") {
              callback();
            }
            if (hidden) {
              return _this.$el.css({
                "visibility": "hidden"
              });
            }
          }
        });
      }
      return null;
    };

    Abstract.prototype.show = function(anim, callback, time, ease) {
      var _this = this;
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      if (time == null) {
        time = 400;
      }
      if (ease == null) {
        ease = "linear";
      }
      this.visible = true;
      this.$el.css({
        "visibility": "visible"
      });
      if (!anim) {
        this.$el.css({
          opacity: 1
        });
      } else {
        this.$el.stop().animate({
          opacity: 1
        }, time, ease, function() {
          if (typeof callback === "function") {
            callback();
          }
          if (_this.cssTransitionClass) {
            _this.$el.addClass(_this.cssTransitionClass);
            return _this.cssTransitionClass = null;
          }
        });
      }
      return null;
    };

    Abstract.prototype.mouseEnabled = function(enabled) {
      this.$el.css({
        "pointer-events": enabled ? "auto" : "none"
      });
      return null;
    };

    Abstract.prototype.onEnterFrame = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (!this.paused && child && (child.paused === false)) {
          if (typeof child.onEnterFrame === "function") {
            child.onEnterFrame();
          }
        }
      }
      return null;
    };

    Abstract.prototype.onAssetsInitLoading = function() {
      return null;
    };

    Abstract.prototype.onAssetsProgress = function() {
      return null;
    };

    Abstract.prototype.pointLock = function() {
      var b;
      if (!this.pointLocked) {
        $(document).bind('pointerlockchange', this.pointerLockChange);
        $(document).bind('mozpointerlockchange', this.pointerLockChange);
        $(document).bind('webkitpointerlockchange', this.pointerLockChange);
        b = $('body')[0];
        b.requestPointerLock = b.requestPointerLock || b.mozRequestPointerLock || b.webkitRequestPointerLock;
        b.requestPointerLock();
      }
      return null;
    };

    Abstract.prototype.releasePointLock = function() {
      var b;
      $(document).unbind('pointerlockchange', this.pointerLockChange);
      $(document).unbind('mozpointerlockchange', this.pointerLockChange);
      $(document).unbind('webkitpointerlockchange', this.pointerLockChange);
      $(document).unbind('mousemove', this.onLockMouseMove);
      b = document;
      b.exitPointerLock = b.exitPointerLock || b.mozExitPointerLock || b.webkitExitPointerLock;
      b.exitPointerLock();
      return null;
    };

    Abstract.prototype.pointerLockChange = function(event) {
      if (document.mozPointerLockElement === $('body')[0] || document.webkitPointerLockElement === $('body')[0]) {
        $(document).bind('mousemove', this.onLockMouseMove);
        this.onLock();
      } else {
        this.releasePointLock();
        $(document).unbind('mousemove', this.onLockMouseMove);
        this.onUnLock();
      }
      return null;
    };

    Abstract.prototype.onLockMouseMove = function(event) {
      return null;
    };

    Abstract.prototype.onLock = function() {
      this.pointLocked = true;
      console.log("POINTLOCK");
      return null;
    };

    Abstract.prototype.onUnLock = function() {
      console.log("POINTUNLOCK");
      this.pointLocked = false;
      return null;
    };

    Abstract.prototype.onAssetsComplete = function() {
      this.oz().baseAssets.off("COMPLETE", this.onAssetsComplete);
      this.oz().baseAssets.off("PROGRESS", this.onAssetsProgress);
      return null;
    };

    Abstract.prototype.oz = function() {
      return (window || document).oz;
    };

    return Abstract;

  })(Backbone.View);

  AbstractButton = (function(_super) {

    __extends(AbstractButton, _super);

    function AbstractButton() {
      this.oz = __bind(this.oz, this);
      this.show = __bind(this.show, this);
      this.hide = __bind(this.hide, this);
      this.pause = __bind(this.pause, this);
      this.resume = __bind(this.resume, this);
      this.dispose = __bind(this.dispose, this);
      this.changeLabel = __bind(this.changeLabel, this);
      this.onclick = __bind(this.onclick, this);
      this.onout = __bind(this.onout, this);
      this.onover = __bind(this.onover, this);
      this.disable = __bind(this.disable, this);
      this.enable = __bind(this.enable, this);
      this.init = __bind(this.init, this);      return AbstractButton.__super__.constructor.apply(this, arguments);
    }

    AbstractButton.prototype.el = null;

    AbstractButton.prototype.id = null;

    AbstractButton.prototype.label = null;

    AbstractButton.prototype.template = null;

    AbstractButton.prototype.templateVars = null;

    AbstractButton.prototype.tagName = "button";

    AbstractButton.prototype.className = "abstractbutton";

    AbstractButton.prototype.classButton = null;

    AbstractButton.prototype.classAnimated = null;

    AbstractButton.prototype.initialize = function() {
      var tmpHTML;
      if (this.template) {
        tmpHTML = _.template(this.oz().templates.get(this.template));
        this.setElement(tmpHTML(this.templateVars));
      }
      if (this.id) {
        this.$el.attr('id', this.id);
      }
      if (this.className) {
        this.$el.addClass(this.className);
      }
      if (this.classAnimated) {
        this.$el.addClass(this.classAnimated);
      }
      if (navigator.appVersion.indexOf("Win") !== -1) {
        this.$el.css({
          "padding": "7px 20px 8px 20px"
        });
      }
      if (this.label != null) {
        this.$el.append(this.label);
      }
      this.init();
      return null;
    };

    AbstractButton.prototype.init = function() {
      return null;
    };

    AbstractButton.prototype.enable = function() {
      this.$el.css({
        "cursor": "pointer",
        "pointer-events": "auto"
      });
      this.$el.removeClass("disabled");
      this.$el.mouseover(this.onover);
      this.$el.mouseout(this.onout);
      this.$el.bind("click", this.onclick);
      return null;
    };

    AbstractButton.prototype.disable = function() {
      this.$el.css({
        "cursor": "default",
        "pointer-events": "none"
      });
      this.$el.addClass("disabled");
      this.$el.unbind("mouseover");
      this.$el.unbind("mouseout");
      this.$el.unbind("click");
      return null;
    };

    AbstractButton.prototype.onover = function() {
      this.$el.addClass("over");
      return null;
    };

    AbstractButton.prototype.onout = function() {
      this.$el.removeClass("over");
      return null;
    };

    AbstractButton.prototype.onclick = function() {
      return null;
    };

    AbstractButton.prototype.changeLabel = function(label) {
      this.$el.html(label);
      return null;
    };

    AbstractButton.prototype.dispose = function() {
      var n;
      n = $(this.$el.children()[0]).attr('id') || $(this.$el.children()[0]).attr('class') || this.$el.html();
      return null;
    };

    AbstractButton.prototype.resume = function() {
      return null;
    };

    AbstractButton.prototype.pause = function() {
      return null;
    };

    AbstractButton.prototype.hide = function(anim, callback) {
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      this.visible = false;
      if (!anim) {
        this.$el.css({
          opacity: 0
        });
      } else {
        this.$el.animate({
          opacity: 0
        }, 400, 'linear', callback);
      }
      return null;
    };

    AbstractButton.prototype.show = function(anim, callback) {
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      this.visible = true;
      if (!anim) {
        this.$el.css({
          opacity: 1
        });
      } else {
        this.$el.animate({
          opacity: 1
        }, 400, 'linear', callback);
      }
      return null;
    };

    AbstractButton.prototype.oz = function() {
      return (window || document).oz;
    };

    return AbstractButton;

  })(Backbone.View);

  AbstractChapter = (function(_super) {

    __extends(AbstractChapter, _super);

    function AbstractChapter() {
      this.addChapterInstructions = __bind(this.addChapterInstructions, this);      return AbstractChapter.__super__.constructor.apply(this, arguments);
    }

    AbstractChapter.prototype.tagName = 'div';

    AbstractChapter.prototype.className = 'area';

    AbstractChapter.prototype.chapterInstructions = null;

    AbstractChapter.prototype.addChapterInstructions = function() {
      this.chapterInstructions = new InstructionsChapter();
      this.addChild(this.chapterInstructions);
      return null;
    };

    return AbstractChapter;

  })(Abstract);

  AbstractScene = (function(_super) {

    __extends(AbstractScene, _super);

    function AbstractScene() {
      this.dispose = __bind(this.dispose, this);
      this.hideShare = __bind(this.hideShare, this);
      this.addShare = __bind(this.addShare, this);
      this.onClose = __bind(this.onClose, this);
      this.onResize = __bind(this.onResize, this);
      this.removeCloseButton = __bind(this.removeCloseButton, this);
      this.addCloseButton = __bind(this.addCloseButton, this);
      this.debugBoundary = __bind(this.debugBoundary, this);
      this.flashIconHelper = __bind(this.flashIconHelper, this);
      this.removeCameraHelper = __bind(this.removeCameraHelper, this);
      this.addCameraHelper = __bind(this.addCameraHelper, this);
      this.addLayout = __bind(this.addLayout, this);      return AbstractScene.__super__.constructor.apply(this, arguments);
    }

    AbstractScene.prototype.tagName = 'div';

    AbstractScene.prototype.className = 'scene';

    AbstractScene.prototype.instructions = null;

    AbstractScene.prototype.closeBtn = null;

    AbstractScene.prototype.boundaries = null;

    AbstractScene.prototype.boundary = null;

    AbstractScene.prototype.addLayout = function(assetID, localeID, boundaries) {
      var _ref,
        _this = this;
      if (boundaries == null) {
        boundaries = null;
      }
      this.instructions = new Instructions({
        "assetID": assetID,
        "localeID": localeID
      });
      this.addChild(this.instructions);
      this.boundaries = boundaries;
      if ((_ref = this.boundaries) != null ? _ref.debug : void 0) {
        this.debugBoundary(this.boundaries);
      }
      $(window).bind("click", function(e) {
        var x, y;
        if (!_this.instructions.active) {
          if (_this.boundaries) {
            x = ($(window).width() / 2) - (_this.boundaries.w / 2);
            y = ($(window).height() / 2) - (_this.boundaries.h / 2);
            if (!(e.pageX >= x && e.pageX <= x + _this.boundaries.w && e.pageY >= y && e.pageY <= y + _this.boundaries.h)) {
              return _this.onClose();
            }
          } else {
            return _this.onClose();
          }
        }
      });
      return null;
    };

    AbstractScene.prototype.addCameraHelper = function() {
      this.helpIconContainer = $('<div class="camera_allow_help"/>');
      this.helpCameraIcon = new SSAsset('interface', 'allow_web');
      this.helpIconContainer.append(this.helpCameraIcon.$el);
      this.flashIconHelper();
      this.addChild(this.helpIconContainer);
      return null;
    };

    AbstractScene.prototype.removeCameraHelper = function() {
      this.helpIconContainer.stop();
      this.helpIconContainer.remove();
      return null;
    };

    AbstractScene.prototype.flashIconHelper = function() {
      var _this = this;
      this.helpIconContainer.animate({
        opacity: 0
      }, 500, function() {
        return _this.helpIconContainer.animate({
          opacity: 1
        }, 500, _this.flashIconHelper);
      });
      return null;
    };

    AbstractScene.prototype.debugBoundary = function(b) {
      this.boundary = $("<div></div>");
      this.boundary.css({
        "position": "absolute",
        "width": b.w,
        "height": b.h,
        "top": "50%",
        "left": "50%",
        "margin-left": -Math.round(b.w / 2),
        "margin-top": -Math.round(b.h / 2),
        "z-index": 1,
        "border": "1px solid red"
      });
      this.addChild(this.boundary);
      return null;
    };

    AbstractScene.prototype.addCloseButton = function() {
      var icon;
      this.closeBtn = new Abstract().setElement("<div class='sceneClose'></div>");
      this.closeBtn.dispose = function() {
        return null;
      };
      this.closeBtn.$el.addClass('button_alpha_enabled');
      this.addChild(this.closeBtn);
      icon = new SSAsset("interface", "button_close");
      this.closeBtn.addChild(icon);
      icon.$el.css({
        "width": "" + (parseInt(icon.$el.css('width')) + 2) + "px",
        "height": "" + (icon.$el.height() + 1) + "px",
        "background-position-y": "" + (parseFloat(icon.$el.css("background-position-y")) + 1) + "px"
      });
      return null;
    };

    AbstractScene.prototype.removeCloseButton = function() {
      this.remove(this.closeBtn);
      return null;
    };

    AbstractScene.prototype.onResize = function() {
      var _ref;
      if (this.boundaries != null) {
        if (this.boundaries.adjustH != null) {
          this.boundaries.h = $(window).height() - this.boundaries.adjustH;
          if ((_ref = this.boundary) != null) {
            _ref.css({
              "height": this.boundaries.h,
              "margin-top": -Math.round(this.boundaries.h / 2)
            });
          }
        }
      }
      AbstractScene.__super__.onResize.call(this);
      return null;
    };

    AbstractScene.prototype.onClose = function() {
      if (!(this.oz().appView["static"].page instanceof LandingPause)) {
        $(".scene3d").css({
          "-webkit-filter": "blur(0px)"
        });
        this.oz().router.navigateTo('');
      }
      return null;
    };

    AbstractScene.prototype.addShare = function() {
      this.trigger('showShare');
      return null;
    };

    AbstractScene.prototype.hideShare = function() {
      this.trigger('hideShare');
      return null;
    };

    AbstractScene.prototype.dispose = function() {
      $(window).unbind("click");
      return null;
    };

    return AbstractScene;

  })(Abstract);

  Base3DChapter = (function(_super) {

    __extends(Base3DChapter, _super);

    function Base3DChapter() {
      this.dispose = __bind(this.dispose, this);
      this.onWorldLoaded = __bind(this.onWorldLoaded, this);
      this.onWorldProgress = __bind(this.onWorldProgress, this);
      this.onCameraReady = __bind(this.onCameraReady, this);
      this.changeView = __bind(this.changeView, this);
      this.onResize = __bind(this.onResize, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.onTouchMove = __bind(this.onTouchMove, this);
      this.onTouchStart = __bind(this.onTouchStart, this);
      this.onTouchEnd = __bind(this.onTouchEnd, this);
      this.onMouseMove = __bind(this.onMouseMove, this);
      this.onMouseLeave = __bind(this.onMouseLeave, this);
      this.onMouseEnter = __bind(this.onMouseEnter, this);
      this.onKeyUp = __bind(this.onKeyUp, this);
      this.onKeyDown = __bind(this.onKeyDown, this);
      this.onMouseUp = __bind(this.onMouseUp, this);
      this.onMouseDown = __bind(this.onMouseDown, this);
      this.onMouseClick = __bind(this.onMouseClick, this);
      this.onDOFChange = __bind(this.onDOFChange, this);
      this.onColorCorrectionChange = __bind(this.onColorCorrectionChange, this);
      this.onFogColorChange = __bind(this.onFogColorChange, this);
      this.initGUI = __bind(this.initGUI, this);
      this.init = __bind(this.init, this);
      this.onRenderingError = __bind(this.onRenderingError, this);      return Base3DChapter.__super__.constructor.apply(this, arguments);
    }

    Base3DChapter.prototype.guicontainer = null;

    Base3DChapter.prototype.camera = null;

    Base3DChapter.prototype.scene = null;

    Base3DChapter.prototype.renderer = null;

    Base3DChapter.prototype.controls = null;

    Base3DChapter.prototype.clock = null;

    Base3DChapter.prototype.renderTarget = null;

    Base3DChapter.prototype.composer = null;

    Base3DChapter.prototype.APP_HEIGHT = 800;

    Base3DChapter.prototype.APP_WIDTH = 600;

    Base3DChapter.prototype.APP_HALF_X = 800 / 2;

    Base3DChapter.prototype.APP_HALF_Y = 600 / 2;

    Base3DChapter.prototype.mouseX = 0;

    Base3DChapter.prototype.mouseY = 0;

    Base3DChapter.prototype.enableMouse = true;

    Base3DChapter.prototype.mouseDown = false;

    Base3DChapter.prototype.mouseLeft = false;

    Base3DChapter.prototype.lensFlare = null;

    Base3DChapter.prototype.skyCubeTexture = null;

    Base3DChapter.prototype.skyCube = null;

    Base3DChapter.prototype.pointer = null;

    Base3DChapter.prototype.pickMouse = null;

    Base3DChapter.prototype.projector = null;

    Base3DChapter.prototype.gui = null;

    Base3DChapter.prototype.hud = null;

    Base3DChapter.prototype.params = {
      cameraFOV: 50,
      colorCorrectionPow: "#2e3359",
      colorCorrectionPowM: 1.4,
      colorCorrectionMul: "#e3d1d1",
      colorCorrectionMulM: 1.6,
      colorCorrectionSaturation: -50,
      colorCorrectionSaturationColors: "#b15858",
      bloomPower: 0.39,
      fogcolor: "#caa46f"
    };

    Base3DChapter.prototype.colorCorrection = null;

    Base3DChapter.prototype.effectBloom = null;

    Base3DChapter.prototype.renderModel = null;

    Base3DChapter.prototype.dofpost = null;

    Base3DChapter.prototype.autoPerformance = null;

    Base3DChapter.prototype.renderResolutionMultiplier = 1;

    Base3DChapter.prototype.keyMultiplier = 0;

    Base3DChapter.prototype.keyDowns = [];

    Base3DChapter.prototype.elasticVirtMouseX = null;

    Base3DChapter.prototype.elasticVirtMouseY = null;

    Base3DChapter.prototype.lastKeyPress = 0;

    Base3DChapter.prototype.pickableObjects = null;

    Base3DChapter.prototype.emptyRenderPluginPost = null;

    Base3DChapter.prototype.excludeFromDOF = null;

    THREE.Frustum.prototype.contains = function(object) {
      var distance, i, matrix, me, planes, radius, _i;
      distance = 0.0;
      planes = this.planes;
      matrix = object.customFrustumMatrix != null ? object.customFrustumMatrix : object.matrixWorld;
      me = matrix.elements;
      radius = -object.geometry.boundingSphere.radius * matrix.getMaxScaleOnAxis();
      for (i = _i = 0; _i < 6; i = _i += 1) {
        distance = planes[i].x * me[12] + planes[i].y * me[13] + planes[i].z * me[14] + planes[i].w;
        if (distance <= radius) {
          return false;
        }
      }
      return true;
    };

    Base3DChapter.prototype.onRenderingError = function(errorString) {
      if (!this.oz().appView.debugMode) {
        top.location.href = "/error_gc.html?error=" + errorString + "_DISPLAY_QUALITY_" + this.oz().appView.displayQuality + "_TEXTURE_QUALITY_" + this.oz().appView.textureQuality;
      }
      return null;
    };

    Base3DChapter.prototype.init = function() {
      var _this = this;
      this.emptyRenderPluginPost = [];
      this.excludeFromDOF = [];
      this.clock = new THREE.Clock();
      this.pickMouse = {
        x: 0,
        y: 0
      };
      this.elasticVirtMouseX = new ElasticNumber;
      this.elasticVirtMouseY = new ElasticNumber;
      this.elasticVirtMouseX.spring = this.elasticVirtMouseY.spring = 0.0015;
      this.elasticVirtMouseX.damping = this.elasticVirtMouseY.damping = 0.07;
      this.projector = new THREE.Projector();
      this.APP_WIDTH = $(window).width();
      this.APP_HEIGHT = $(window).height();
      this.renderer = new THREE.WebGLRenderer({
        canvas: this.oz().appView.renderCanvas3D,
        antialias: false
      });
      this.renderer.onError = this.onRenderingError;
      this.oz().appView.ddsSupported = THREE.WebGLRenderer.DDSSupported && (QueryString.get("dds") !== "off");
      this.renderer.autoClear = false;
      this.renderer.setSize(this.APP_WIDTH, this.APP_HEIGHT);
      this.renderer.setClearColorHex(0x000000, 1);
      this.camera = new THREE.PerspectiveCamera(50, this.APP_WIDTH / this.APP_HEIGHT, 10, 100000);
      this.camera.name = "mainCamera";
      this.scene = new THREE.Scene();
      this.scene.fog = new THREE.Fog(parseInt("0x" + (this.params.fogcolor.substr(1))), 0, 689);
      switch (this.oz().appView.displayQuality) {
        case "hi":
          this.renderResolutionMultiplier = 1;
          break;
        case "med":
          this.renderResolutionMultiplier = 0.5;
          break;
        case "low":
          this.renderResolutionMultiplier = 0.4;
      }
      document.addEventListener('keydown', this.onKeyDown, false);
      document.addEventListener('keyup', this.onKeyUp, false);
      this.$el.bind('click', this.onMouseClick);
      this.$el.bind('mousedown', this.onMouseDown);
      this.$el.bind('mouseup', this.onMouseUp);
      this.$el.bind('mousemove', this.onMouseMove);
      this.$el.bind('mouseleave', this.onMouseLeave);
      this.$el.bind('mouseenter', this.onMouseEnter);
      this.$el.bind('touchstart', this.onTouchStart);
      this.$el.bind('touchend', this.onTouchEnd);
      this.$el.bind('touchmove', this.onTouchMove);
      this.hud = new Hud(this.renderer, this.APP_WIDTH, this.APP_HEIGHT, false, false);
      this.initComposer();
      this.initDOF();
      this.autoPerformance = new IFLAutomaticPerformanceAdjust;
      this.autoPerformance.steps.push({
        name: "DOF",
        object: this.dofpost,
        property: "enabled",
        enabled: this.dofpost.enabled,
        priority: 100
      });
      this.autoPerformance.steps.push({
        name: "FXAA",
        object: this.fxaa,
        property: "enabled",
        enabled: this.fxaa.enabled,
        priority: 100
      });
      this.autoPerformance.steps.push({
        name: "Resolution = 1",
        enabled: this.renderResolutionMultiplier > 0.7 ? true : false,
        priority: 1,
        disableFunc: function() {
          return _this.renderResolutionMultiplier = 0.7;
        }
      });
      return this.autoPerformance.steps.push({
        name: "Resolution = 0.7",
        enabled: this.renderResolutionMultiplier > 0.5 ? true : false,
        priority: 0,
        disableFunc: function() {
          return _this.renderResolutionMultiplier = 0.5;
        }
      });
    };

    Base3DChapter.prototype.initComposer = function() {
      var colorCorrectionShader, fxaashader;
      this.renderTarget = new THREE.WebGLRenderTarget(this.APP_WIDTH, this.APP_HEIGHT);
      this.renderTarget.generateMipmaps = false;
      this.composer = new THREE.EffectComposer(this.renderer, this.renderTarget);
      this.composer.enabled = true;
      this.renderModel = new THREE.RenderPass(this.scene, this.camera, null, false, false);
      this.effectBloom = new THREE.BloomPass(.39);
      this.effectBloom.enabled = true;
      colorCorrectionShader = new IFLColorCorrectionShader;
      colorCorrectionShader.name = "postprocessing_colorcorrectionshader";
      this.colorCorrection = new THREE.ShaderPass(colorCorrectionShader);
      this.colorCorrection.uniforms["enableVolumetricLight"].value = 0;
      fxaashader = THREE.ShaderExtras["fxaa"];
      fxaashader.name = "postprocessing_fxaa";
      this.fxaa = new THREE.ShaderPass(fxaashader);
      this.fxaa.enabled = this.oz().appView.displayQuality === "hi" ? true : false;
      this.fxaa.uniforms['resolution'].value = new THREE.Vector2(1 / this.APP_WIDTH, 1 / this.APP_HEIGHT);
      this.composer.addPass(this.renderModel);
      this.composer.addPass(this.effectBloom);
      this.composer.addPass(this.fxaa);
      this.composer.addPass(this.colorCorrection);
      return this.colorCorrection.renderToScreen = true;
    };

    Base3DChapter.prototype.initDOF = function() {
      var bokeh_shader, pars;
      this.dofpost = {
        enabled: this.oz().appView.dofEnabled,
        focus: 0.68,
        aperture: 0.019,
        maxblur: 0.007,
        camerafar: 500,
        cameranear: 0.1
      };
      this.dofpost.material_depth = new THREE.MeshDepthMaterial();
      this.dofpost.material_depth.name = "postprocessing_depthshader";
      this.dofpost.scene = new THREE.Scene();
      this.dofpost.camera = new THREE.OrthographicCamera(this.APP_WIDTH / -2, this.APP_WIDTH / 2, this.APP_HEIGHT / 2, this.APP_HEIGHT / -2, -10000, 10000);
      this.dofpost.camera.position.z = 100;
      this.dofpost.camera.name = "dofCamera";
      this.dofpost.scene.add(this.dofpost.camera);
      pars = {
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBFormat
      };
      this.dofpost.rtTextureDepth = new THREE.WebGLRenderTarget(this.APP_WIDTH, this.APP_HEIGHT, pars);
      this.dofpost.rtTextureColor = new THREE.WebGLRenderTarget(this.APP_WIDTH, this.APP_HEIGHT, pars);
      bokeh_shader = THREE.BokehShader;
      this.dofpost.bokeh_uniforms = THREE.UniformsUtils.clone(bokeh_shader.uniforms);
      this.dofpost.bokeh_uniforms["tDepth"].value = this.dofpost.rtTextureDepth;
      this.dofpost.bokeh_uniforms["focus"].value = this.dofpost.focus;
      this.dofpost.bokeh_uniforms["aperture"].value = this.dofpost.aperture;
      this.dofpost.bokeh_uniforms["maxblur"].value = this.dofpost.maxblur;
      this.dofpost.bokeh_uniforms["aspect"].value = this.APP_WIDTH / this.APP_HEIGHT;
      this.dofpost.materialBokeh = new THREE.ShaderMaterial({
        uniforms: this.dofpost.bokeh_uniforms,
        vertexShader: bokeh_shader.vertexShader,
        fragmentShader: bokeh_shader.fragmentShader
      });
      this.dofpost.materialBokeh.name = "postprocessing_bokehshader";
      this.dofpost.quad = new THREE.Mesh(new THREE.PlaneGeometry(this.APP_WIDTH, this.APP_HEIGHT), this.dofpost.materialBokeh);
      this.dofpost.quad.name = "postprocessing_dof_quad";
      this.dofpost.quad.position.z = -1000;
      return this.dofpost.scene.add(this.dofpost.quad);
    };

    Base3DChapter.prototype.initGUI = function(settings) {
      var DOFFolder, colorCorrFolder, fogFolder, postProcessingFolder,
        _this = this;
      this.gui = new dat.GUI({
        width: 400,
        autoPlace: false,
        load: settings
      });
      this.gui.remember(this.scene.fog);
      this.gui.remember(this.params);
      this.gui.remember(this.colorCorrection.uniforms.vignetteOffset);
      this.gui.remember(this.colorCorrection.uniforms.vignetteDarkness);
      this.gui.remember(this.dofpost);
      this.gui.remember(this.fxaa);
      this.gui.remember(this.effectBloom);
      this.gui.remember(this.effectBloom.screenUniforms.opacity);
      fogFolder = this.gui.addFolder("Fog");
      fogFolder.add(this.scene.fog, 'near', 0, 1000).name('Fog Near');
      fogFolder.add(this.scene.fog, 'far', 100, 2000).name('Fog Far');
      fogFolder.addColor(this.params, 'fogcolor').name('Fog Color').onChange(this.onFogColorChange);
      postProcessingFolder = this.gui.addFolder("Post Processing");
      colorCorrFolder = postProcessingFolder.addFolder("Color Correction");
      colorCorrFolder.addColor(this.params, 'colorCorrectionPow').name('Color Power').onChange(this.onColorCorrectionChange);
      colorCorrFolder.add(this.params, 'colorCorrectionPowM', 0, 2).name('Color Power Intensity').onChange(this.onColorCorrectionChange);
      colorCorrFolder.addColor(this.params, 'colorCorrectionMul').name('Color Multiplier').onChange(this.onColorCorrectionChange);
      colorCorrFolder.add(this.params, 'colorCorrectionMulM', 0, 2).name('Color Multiplier Intensity').onChange(this.onColorCorrectionChange);
      colorCorrFolder.add(this.params, 'colorCorrectionSaturation', -100, 100).name('Saturation').onChange(this.onColorCorrectionChange);
      colorCorrFolder.addColor(this.params, 'colorCorrectionSaturationColors').name('Saturated Colors').onChange(this.onColorCorrectionChange);
      colorCorrFolder.add(this.colorCorrection.uniforms.vignetteOffset, 'value', 0, 10).name('Vignette Offset');
      colorCorrFolder.add(this.colorCorrection.uniforms.vignetteDarkness, 'value', 0, 10).name('Vignette Darkness');
      DOFFolder = postProcessingFolder.addFolder("DOF");
      DOFFolder.add(this.dofpost, 'enabled').name('Enable DOF');
      DOFFolder.add(this.dofpost, "focus", 0.0, 3.0).name('DOF Focus').onChange(this.onDOFChange);
      DOFFolder.add(this.dofpost, "aperture", 0.001, 0.04).name('DOF Aperture').onChange(this.onDOFChange);
      DOFFolder.add(this.dofpost, "maxblur", 0.0, 0.03).name('DOF MaxBlur').onChange(this.onDOFChange);
      DOFFolder.add(this.dofpost, "cameranear", 0.0, 100).name('DOF Camera Near');
      DOFFolder.add(this.dofpost, "camerafar", 100, 5000).name('DOF Camera Far');
      postProcessingFolder.add(this.composer, 'enabled').name('Enable PostProcessing');
      postProcessingFolder.add(this, 'renderResolutionMultiplier', 0.1, 1).step(0.1).name('Resolution').onChange(function(val) {
        return _this.onResize();
      });
      postProcessingFolder.add(this.fxaa, 'enabled').name('Enable FXAA');
      postProcessingFolder.add(this.effectBloom, 'enabled').name('Enable Bloom');
      postProcessingFolder.add(this.effectBloom.screenUniforms.opacity, 'value', 0, 10).name('Bloom Power');
      this.guicontainer = $('<div/>');
      this.guicontainer.dispose = function() {};
      this.guicontainer.css({
        "position": "absolute",
        "right": "0px",
        "top": "0px"
      });
      return this.guicontainer.append(this.gui.domElement);
    };

    Base3DChapter.prototype.onFogColorChange = function(value) {
      return this.scene.fog.color.copy(this.stringToColor(value));
    };

    Base3DChapter.prototype.onColorCorrectionChange = function(value) {
      var mul, mulB, mulColor, mulG, mulR, pow, powB, powColor, powG, powR, sat, satB, satColor, satG, satR;
      if (this.colorCorrection == null) {
        return;
      }
      pow = this.params.colorCorrectionPowM;
      powColor = this.stringToColor(this.params.colorCorrectionPow);
      powR = 1 - powColor.r;
      powG = 1 - powColor.g;
      powB = 1 - powColor.b;
      this.colorCorrection.uniforms['powRGB'].value.set(pow * powR, pow * powG, pow * powB);
      mul = this.params.colorCorrectionMulM;
      mulColor = this.stringToColor(this.params.colorCorrectionMul);
      mulR = mulColor.r;
      mulG = mulColor.g;
      mulB = mulColor.b;
      this.colorCorrection.uniforms['mulRGB'].value.set(mul * mulR, mul * mulG, mul * mulB);
      sat = -this.params.colorCorrectionSaturation / 100;
      satColor = this.stringToColor(this.params.colorCorrectionSaturationColors);
      satR = 1 - satColor.r;
      satG = 1 - satColor.g;
      satB = 1 - satColor.b;
      return this.colorCorrection.uniforms['saturation'].value.set(sat * satR, sat * satG, sat * satB, 1);
    };

    Base3DChapter.prototype.stringToColor = function(str) {
      var col, num, str2;
      str2 = str.substr(1);
      num = parseInt("0x" + str2);
      col = new THREE.Color();
      col.setHex(num);
      return col;
    };

    Base3DChapter.prototype.onDOFChange = function(value) {
      this.dofpost.bokeh_uniforms["focus"].value = this.dofpost.focus;
      this.dofpost.bokeh_uniforms["aperture"].value = this.dofpost.aperture;
      return this.dofpost.bokeh_uniforms["maxblur"].value = this.dofpost.maxblur;
    };

    Base3DChapter.prototype.onMouseClick = function(event) {
      if (!this.enableMouse) {

      }
    };

    Base3DChapter.prototype.onMouseDown = function(event) {
      if (!this.enableMouse) {
        return;
      }
      return this.mouseDown = true;
    };

    Base3DChapter.prototype.onMouseUp = function(event) {
      if (!this.enableMouse) {
        return;
      }
      return this.mouseDown = false;
    };

    Base3DChapter.prototype.onKeyDown = function(event) {
      if (!this.enableMouse) {
        return;
      }
      if (event.ctrlKey && event.keyCode === 73 && (this.guicontainer != null)) {
        this.GUIADDED = true;
        this.oz().appView.addChild(this.guicontainer);
      }
      if (event.ctrlKey && event.keyCode === 66) {
        if (!this.capturer) {
          this.capturer = new CCapture({
            framerate: 30
          });
          this.capturer.start();
        } else {
          console.log("Video URL (paste in browser): " + this.capturer.save());
          this.capturer = null;
        }
      }
      this.keyDowns[event.keyCode] = true;
      return this.lastKeyPress = this.clock.oldTime;
    };

    Base3DChapter.prototype.onKeyUp = function(event) {
      if (!this.enableMouse) {
        return;
      }
      this.keyDowns[event.keyCode] = false;
      return this.lastKeyPress = this.clock.oldTime;
    };

    Base3DChapter.prototype.onMouseEnter = function(event) {
      return this.mouseLeft = false;
    };

    Base3DChapter.prototype.onMouseLeave = function(event) {
      return this.mouseLeft = true;
    };

    Base3DChapter.prototype.onMouseMove = function(event) {
      if (!this.enableMouse) {
        return;
      }
      this.mouseX = event.pageX - this.APP_HALF_X;
      this.mouseY = event.pageY - this.APP_HALF_Y;
      this.pickMouse.x = (event.clientX / this.APP_WIDTH) * 2 - 1;
      return this.pickMouse.y = -(event.clientY / this.APP_HEIGHT) * 2 + 1;
    };

    Base3DChapter.prototype.onTouchEnd = function(event) {
      if (!this.enableMouse) {
        return;
      }
      return this.mouseDown = false;
    };

    Base3DChapter.prototype.onTouchStart = function(event) {
      if (!this.enableMouse) {
        return;
      }
      return this.mouseDown = true;
    };

    Base3DChapter.prototype.onTouchMove = function(event) {
      var _ref, _ref1;
      if (!this.enableMouse) {
        return;
      }
      if (((_ref = event.originalEvent) != null ? (_ref1 = _ref.touches) != null ? _ref1.length : void 0 : void 0) === 1) {
        event.preventDefault();
        this.mouseX = event.originalEvent.touches[0].pageX - this.APP_HALF_X;
        return this.mouseY = event.originalEvent.touches[0].pageY - this.APP_HALF_Y;
      }
    };

    Base3DChapter.prototype.handleVirtualMouse = function() {
      var xAxisDown, yAxisDown;
      xAxisDown = false;
      yAxisDown = false;
      if (this.keyDowns[38] === true) {
        yAxisDown = true;
        this.elasticVirtMouseY.aimAt(-this.APP_HEIGHT / 2);
      }
      if (this.keyDowns[40] === true) {
        yAxisDown = true;
        this.elasticVirtMouseY.aimAt(this.APP_HEIGHT / 2);
      }
      if (this.keyDowns[37] === true) {
        xAxisDown = true;
        this.elasticVirtMouseX.aimAt(-this.APP_WIDTH / 2);
      }
      if (this.keyDowns[39] === true) {
        xAxisDown = true;
        this.elasticVirtMouseX.aimAt(this.APP_WIDTH / 2);
      }
      if (!xAxisDown) {
        this.elasticVirtMouseX.aimAt(0);
      }
      if (!yAxisDown) {
        this.elasticVirtMouseY.aimAt(0);
      }
      this.elasticVirtMouseY.step(this.delta);
      this.elasticVirtMouseX.step(this.delta);
      if (this.clock.oldTime - this.lastKeyPress < 1000) {
        this.mouseX = this.elasticVirtMouseX._value;
        return this.mouseY = this.elasticVirtMouseY._value;
      }
    };

    Base3DChapter.prototype.onEnterFrame = function() {
      this.delta = this.clock.getDelta();
      this.handleVirtualMouse();
      this.autoPerformance.update(this.delta);
      TWEEN.update();
      THREE.AnimationHandler.update(this.delta);
      this.updateControls();
      return null;
    };

    Base3DChapter.prototype.updateControls = function() {
      if ((this.controls != null) && this.enableMouse) {
        if (!this.controls.hasOwnProperty("enabled") || (this.controls.hasOwnProperty("enabled") && this.controls.enabled)) {
          this.controls.update(this.delta);
        }
      }
      return null;
    };

    Base3DChapter.prototype.doRender = function() {
      var camerafar, cameranear, elem, numShaderPasses, _i, _j, _len, _len1, _ref, _ref1;
      if (this.dofpost.enabled) {
        if (this.composer.enabled) {
          this.colorCorrection.renderToScreen = false;
          this.renderer.clearTarget(this.renderTarget, true, true, true);
          this.composer.render(this.delta);
        } else {
          this.renderer.clearTarget(this.renderTarget, true, true, true);
          this.renderer.render(this.scene, this.camera, this.dofpost.rtTextureColor);
        }
        this.pPost = this.renderer.renderPluginsPost;
        this.renderer.renderPluginsPost = this.emptyRenderPluginPost;
        _ref = this.sceneDescendants;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          if (this.excludeFromDOF.indexOf(elem) !== -1) {
            elem.visible = false;
          }
        }
        this.scene.overrideMaterial = this.dofpost.material_depth;
        camerafar = this.camera.far;
        cameranear = this.camera.near;
        this.camera.far = this.dofpost.camerafar;
        this.camera.near = this.dofpost.cameranear;
        this.camera.updateProjectionMatrix();
        this.renderer.render(this.scene, this.camera, this.dofpost.rtTextureDepth, true);
        this.camera.far = camerafar;
        this.camera.near = cameranear;
        this.camera.updateProjectionMatrix();
        this.scene.overrideMaterial = null;
        _ref1 = this.sceneDescendants;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          elem = _ref1[_j];
          if (this.excludeFromDOF.indexOf(elem) !== -1) {
            elem.visible = true;
          }
        }
        if (this.composer.enabled) {
          numShaderPasses = 0;
          if (this.fxaa.enabled) {
            numShaderPasses++;
          }
          if (numShaderPasses % 2 === 0) {
            this.dofpost.bokeh_uniforms.tColor.value = this.composer.renderTarget1;
          } else {
            this.dofpost.bokeh_uniforms.tColor.value = this.composer.renderTarget2;
          }
        } else {
          this.dofpost.bokeh_uniforms.tColor.value = this.dofpost.rtTextureColor;
        }
        this.renderer.render(this.dofpost.scene, this.dofpost.camera, null, true);
        return this.renderer.renderPluginsPost = this.pPost;
      } else {
        if (this.composer.enabled) {
          this.colorCorrection.renderToScreen = true;
          this.renderer.clearTarget(this.renderTarget, true, true, true);
          return this.composer.render(this.delta);
        } else {
          return this.renderer.render(this.scene, this.camera, null, true);
        }
      }
    };

    Base3DChapter.prototype.onResize = function() {
      var flare, pars, _i, _len, _ref;
      this.APP_WIDTH = $(window).width();
      this.APP_HEIGHT = $(window).height();
      this.APP_HALF_X = this.APP_WIDTH / 2;
      this.APP_HALF_Y = this.APP_HEIGHT / 2;
      this.camera.aspect = this.APP_WIDTH / this.APP_HEIGHT;
      this.camera.updateProjectionMatrix();
      this.renderer.setSize(this.APP_WIDTH, this.APP_HEIGHT);
      this.fxaa.uniforms['resolution'].value = new THREE.Vector2(1 / (this.APP_WIDTH * this.renderResolutionMultiplier), 1 / (this.APP_HEIGHT * this.renderResolutionMultiplier));
      pars = {
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBFormat
      };
      this.dofpost.rtTextureDepth = new THREE.WebGLRenderTarget((this.APP_WIDTH * this.renderResolutionMultiplier) / 2, (this.APP_HEIGHT * this.renderResolutionMultiplier) / 2, pars);
      this.dofpost.bokeh_uniforms["tDepth"].value = this.dofpost.rtTextureDepth;
      this.dofpost.rtTextureColor = new THREE.WebGLRenderTarget(this.APP_WIDTH * this.renderResolutionMultiplier, this.APP_HEIGHT * this.renderResolutionMultiplier, pars);
      this.dofpost.bokeh_uniforms["aspect"].value = this.APP_WIDTH / this.APP_HEIGHT;
      this.hud.resize(this.APP_WIDTH, this.APP_HEIGHT);
      if (this.composer != null) {
        this.renderTarget = new THREE.WebGLRenderTarget(this.APP_WIDTH * this.renderResolutionMultiplier, this.APP_HEIGHT * this.renderResolutionMultiplier);
        this.renderTarget.generateMipmaps = false;
        this.composer.reset(this.renderTarget);
      }
      if (this.lensFlare != null) {
        _ref = this.lensFlare.lensFlares;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          flare = _ref[_i];
          if (flare.originalSize != null) {
            flare.size = flare.originalSize * this.renderResolutionMultiplier;
          }
        }
      }
    };

    /*
        FRAMEWORK
    */


    Base3DChapter.prototype.pause = function() {
      Base3DChapter.__super__.pause.call(this);
      this.enableMouse = false;
      this.autoPerformance.reset();
      return $('body').css('cursor', 'auto');
    };

    Base3DChapter.prototype.resume = function() {
      Base3DChapter.__super__.resume.call(this);
      this.enableMouse = true;
      return this.autoPerformance.reset();
    };

    Base3DChapter.prototype.changeView = function(view) {
      return null;
    };

    Base3DChapter.prototype.onCameraReady = function() {
      return this.oz().appView.onCameraReady();
    };

    Base3DChapter.prototype.onWorldProgress = function(percentage) {
      return this.trigger('onWorldProgress', percentage);
    };

    Base3DChapter.prototype.onWorldLoaded = function() {
      return this.trigger('onWorldLoaded');
    };

    Base3DChapter.prototype.handleAnimatedSprites = function() {
      var offX, offY, posx, posy, rX, rY, sprite, _i, _len, _ref;
      if (this.animatedSprites) {
        _ref = this.animatedSprites;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sprite = _ref[_i];
          sprite.material.time += this.delta;
          if (sprite.material.time > sprite.material.frametime) {
            sprite.material.time = 0;
            sprite.material.spritenum += 1;
            if (sprite.material.spritenum === sprite.material.totalframes) {
              sprite.material.spritenum = 0;
            }
            posx = sprite.material.spritenum % sprite.material.spritex;
            posy = Math.floor(sprite.material.spritenum / sprite.material.spritex);
            offX = posx / sprite.material.spritex;
            offY = posy / sprite.material.spritey;
            rX = 1 / sprite.material.spritex;
            rY = 1 / sprite.material.spritey;
            if (sprite.material.uniforms) {
              if (sprite.material.uniforms.offsetRepeat) {
                sprite.material.uniforms.offsetRepeat.value.x = offX;
                sprite.material.uniforms.offsetRepeat.value.y = offY;
                sprite.material.uniforms.offsetRepeat.value.z = rX;
                sprite.material.uniforms.offsetRepeat.value.w = rY;
              }
            }
            sprite.material.map.offset.x = offX;
            sprite.material.map.offset.y = offY;
            sprite.material.map.repeat.x = rX;
            sprite.material.map.repeat.y = rY;
          }
        }
      }
      return null;
    };

    Base3DChapter.prototype.cursorPointer = false;

    Base3DChapter.prototype.handlePointer = function() {
      var hasPicked, obj;
      if (!this.isGoingToInteractive) {
        hasPicked = false;
        for (obj in this.mouseOverObjects) {
          hasPicked = true;
          break;
        }
        if (hasPicked) {
          if (!this.cursorPointer) {
            $('body').css('cursor', 'pointer');
            return this.cursorPointer = true;
          }
        } else if (this.cursorPointer) {
          this.cursorPointer = false;
          return $('body').css('cursor', 'auto');
        }
      } else if (this.cursorPointer) {
        this.cursorPointer = false;
        return $('body').css('cursor', 'auto');
      }
    };

    Base3DChapter.prototype.checkPicking = function() {
      var index, intersection, intersections, ret, _i, _len;
      if (this.sceneDescendants == null) {
        return;
      }
      this.pickVector.set(this.pickMouse.x, this.pickMouse.y, 1);
      this.projector.unprojectVector(this.pickVector, this.camera);
      this.pickVector.subSelf(this.camera.position);
      this.pickVector.normalize();
      this.pickRay.origin.copy(this.camera.position);
      this.pickRay.direction.copy(this.pickVector);
      intersections = this.pickRay.intersectObjects(this.pickableObjects);
      ret = [];
      for (index = _i = 0, _len = intersections.length; _i < _len; index = ++_i) {
        intersection = intersections[index];
        ret[intersection.object.name] = intersection;
      }
      return ret;
    };

    Base3DChapter.prototype.gotoPositionOnPath = function(view) {
      var obj, tween,
        _this = this;
      if (this.settings.navigationPoints[view]) {
        obj = {
          pos: this.mouseInteraction.currentIndex + this.mouseInteraction.currentProgress
        };
        tween = new TWEEN.Tween(obj).to({
          pos: this.settings.navigationPoints[view].index
        }, 2000).easing(TWEEN.Easing.Cubic.InOut);
        tween.onUpdate(function() {
          return _this.mouseInteraction.goToIndexAndPosition(obj.pos);
        });
        tween.start();
        return true;
      }
      return false;
    };

    Base3DChapter.prototype.randRange = function(minNum, maxNum) {
      return Math.random() * (maxNum - minNum + 1) + minNum;
    };

    Base3DChapter.prototype.dispose = function() {
      var descendants, memory, obj, object, _i, _len;
      $('body').css('cursor', 'auto');
      this.$el.unbind('click', this.onMouseClick);
      this.$el.unbind('mousedown', this.onMouseDown);
      this.$el.unbind('mouseup', this.onMouseUp);
      this.$el.unbind('mousemove', this.onMouseMove);
      this.$el.unbind('mouseleave', this.onMouseLeave);
      this.$el.unbind('mouseenter', this.onMouseEnter);
      this.$el.unbind('touchstart', this.onTouchStart);
      this.$el.unbind('touchend', this.onTouchEnd);
      this.$el.unbind('touchmove', this.onTouchMove);
      document.removeEventListener('keydown', this.onKeyDown, false);
      document.removeEventListener('keyup', this.onKeyUp, false);
      this.renderer.deallocateRenderTarget(this.renderTarget);
      this.renderer.deallocateRenderTarget(this.dofpost.rtTextureDepth);
      this.renderer.deallocateRenderTarget(this.dofpost.rtTextureColor);
      this.renderer.deallocateRenderTarget(this.composer.renderTarget1);
      this.renderer.deallocateRenderTarget(this.composer.renderTarget2);
      this.renderer.deallocateObject(this.dofpost.quad);
      this.renderer.deallocateMaterial(this.dofpost.materialBokeh);
      this.renderer.deallocateMaterial(this.dofpost.material_depth);
      this.renderer.onError = null;
      memory = this.renderer.info.memory;
      descendants = this.scene.getDescendants();
      for (_i = 0, _len = descendants.length; _i < _len; _i++) {
        object = descendants[_i];
        if (memory.geometries === 0) {
          break;
        }
        this.renderer.deallocateObject(object);
      }
      this.emptyRenderPluginPost = null;
      this.autoPerformance = null;
      this.clock = null;
      this.camera = null;
      this.scene = null;
      this.renderer = null;
      this.hud = null;
      this.composer = null;
      this.gui = null;
      this.oz().appView.remove(this.guicontainer);
      this.guicontainer = null;
      this.releasePointLock();
      for (obj in this) {
        try {
          this[obj].dispose();
        } catch (_error) {}
        delete this[obj];
      }
      return null;
    };

    return Base3DChapter;

  })(AbstractChapter);

  Carnival = (function(_super) {

    __extends(Carnival, _super);

    function Carnival() {
      this.dispose = __bind(this.dispose, this);
      this.onResize = __bind(this.onResize, this);
      this.changeView = __bind(this.changeView, this);
      this.onMouseUp = __bind(this.onMouseUp, this);
      this.onMouseDown = __bind(this.onMouseDown, this);
      this.onTouchStart = __bind(this.onTouchStart, this);
      this.onTouchEnd = __bind(this.onTouchEnd, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.onShowDebugPathChange = __bind(this.onShowDebugPathChange, this);
      this.onWindEnabledChange = __bind(this.onWindEnabledChange, this);
      this.instanceWorld = __bind(this.instanceWorld, this);
      this.show = __bind(this.show, this);
      this.advanceLoading = __bind(this.advanceLoading, this);
      this.onSceneLoaded = __bind(this.onSceneLoaded, this);
      this.onSceneProgress = __bind(this.onSceneProgress, this);
      this.onTextureComplete = __bind(this.onTextureComplete, this);
      this.onTextureProgress = __bind(this.onTextureProgress, this);
      this.onSettingsLoaded = __bind(this.onSettingsLoaded, this);
      this.render = __bind(this.render, this);      return Carnival.__super__.constructor.apply(this, arguments);
    }

    Carnival.prototype.settings = null;

    Carnival.prototype.loadedScene = null;

    Carnival.prototype.mouseInteraction = null;

    Carnival.prototype.hotspotManager = null;

    Carnival.prototype.materialManager = null;

    Carnival.prototype.enableRender = false;

    Carnival.prototype.debugPaths = null;

    Carnival.prototype.mouseDownObjects = null;

    Carnival.prototype.mouseUpObjects = null;

    Carnival.prototype.mouseOverObjects = null;

    Carnival.prototype.lastMouseX = 0;

    Carnival.prototype.lastMouseY = 0;

    Carnival.prototype.mouseDownPoint = null;

    Carnival.prototype.mouseUpPoint = null;

    Carnival.prototype.isGoingToInteractive = false;

    Carnival.prototype.currentView = null;

    Carnival.prototype.currentCutout = null;

    Carnival.prototype.dustSystems = null;

    Carnival.prototype.dustSystemMinX = -300;

    Carnival.prototype.dustSystemMinY = 0;

    Carnival.prototype.dustSystemMinZ = -200;

    Carnival.prototype.dustSystemMaxX = 80;

    Carnival.prototype.dustSystemMaxY = 100;

    Carnival.prototype.dustSystemMaxZ = 80;

    Carnival.prototype.windGenerator = null;

    Carnival.prototype.cutoutsDynamicTextures = null;

    Carnival.prototype.animatedSprites = null;

    Carnival.prototype.audiolistener = null;

    Carnival.prototype.isInIntro = true;

    Carnival.prototype.nearPoint = null;

    Carnival.prototype.showTime = -1;

    Carnival.prototype.pickVector = null;

    Carnival.prototype.pickRay = null;

    Carnival.prototype.sceneDescendants = null;

    Carnival.prototype.minIndex = 0;

    Carnival.prototype.maxIndex = 75;

    Carnival.prototype.dandelionsSettings = null;

    Carnival.prototype.dustSettings = null;

    Carnival.prototype.initialOptimization = false;

    Carnival.prototype.sceneLoadedPerc = 0;

    Carnival.prototype.sceneLoaded = false;

    Carnival.prototype.textureLoadedPerc = 0;

    Carnival.prototype.textureLoaded = false;

    Carnival.prototype.loadingDone = false;

    Carnival.prototype.init = function() {
      Carnival.__super__.init.apply(this, arguments);
      this.addChapterInstructions();
      IFLModelManager.getInstance().cacheTextures(this.oz().appView.enablePrefetching);
      IFLModelManager.getInstance().prefetchEnabled = this.oz().appView.enablePrefetching;
      this.mouseDownPoint = new THREE.Vector2;
      this.mouseUpPoint = new THREE.Vector2;
      this.dandelionsSettings = [];
      this.dustSettings = [];
      this.animatedSprites = [];
      this.dustSystems = [];
      this.mouseDownObjects = [];
      this.mouseUpObjects = [];
      this.mouseOverObjects = [];
      this.pickVector = new THREE.Vector3;
      this.pickRay = new THREE.Ray;
      this.renderer.gammaInput = false;
      this.renderer.gammaOutput = false;
      this.renderer.sortObjects = false;
      this.renderer.shadowMapEnabled = false;
      this.renderer.shadowMapSoft = false;
      this.camera.position.x = 100;
      this.camera.position.y = 100;
      this.camera.position.z = 100;
      this.camera.fov = 35;
      this.camera.near = 1;
      this.camera.far = 5000;
      this.camera.target = new THREE.Vector3(0, 0, 0);
      this.mouseInteraction = new IFLCameraPathInteraction(this.camera);
      this.mouseInteraction.maxIndex = 170;
      this.mouseInteraction.currentIndex = 0;
      this.mouseInteraction.mouseEnabled = false;
      if (SoundController.active) {
        this.audiolistener = new THREE.AudioListenerObject(this.camera);
        this.audiolistener.position.set(0, 150, 400);
        this.scene.add(this.audiolistener);
      }
      if (this.oz().appView.debugMode) {
        this.controls = new THREE.FirstPersonControls(this.camera, this.oz().appView.wrapper.el);
        this.controls.movementSpeed = 20;
        this.controls.lookSpeed = 0.005 * 5;
        this.controls.enabled = false;
      }
      this.materialManager = new IFLMaterialManager;
      this.hotspotManager = new IFLHotspotManager;
      this.params.cameraFOV = this.camera.fov;
      this.params.fogcolor = "#2c2016";
      this.scene.fog.far = 1065;
      this.scene.fog.near = 0;
      this.scene.fog.color.copy(this.stringToColor(this.params.fogcolor));
      this.params.colorCorrectionPow = "#2e3359";
      this.params.colorCorrectionPowM = 1.4;
      this.params.colorCorrectionMul = "#edc9a4";
      this.params.colorCorrectionMulM = 1.5;
      this.params.colorCorrectionSaturation = -50;
      this.params.colorCorrectionSaturationColors = "#524b4b";
      this.dofpost.focus = this.dofpost.bokeh_uniforms["focus"].value = 0.97;
      this.dofpost.aperture = this.dofpost.bokeh_uniforms["aperture"].value = 0.009;
      this.dofpost.maxblur = this.dofpost.bokeh_uniforms["maxblur"].value = 0.007;
      this.dofpost.cameranear = 0.001;
      this.dofpost.camerafar = 956;
      this.params.bloomPower = this.effectBloom.screenUniforms.opacity.value = 0.75;
      this.effectBloom.enabled = true;
      this.debugPaths = new THREE.Object3D;
      if (this.renderer.supportsVertexTextures()) {
        this.windGenerator = new IFLWindGenerator();
        this.windGenerator.enabled = this.oz().appView.displayQuality !== "low" ? true : false;
      }
      this.colorCorrection.uniforms.vignetteOffset.value = 1;
      this.colorCorrection.uniforms.vignetteDarkness.value = 1.3;
      if (this.oz().appView.debugMode) {
        this.initGUI();
      }
      this.onColorCorrectionChange();
      this.autoPerformance.steps.push({
        name: "Wind",
        enabled: this.windGenerator != null ? this.windGenerator.enabled : false,
        priority: 50,
        disableFunc: this.onWindEnabledChange
      });
      this.onResize();
      this.lastMouseY = this.mouseY + this.APP_HALF_Y;
      this.lastMouseX = this.mouseX + this.APP_HALF_X;
      return this;
    };

    Carnival.prototype.render = function() {
      Carnival.__super__.render.apply(this, arguments);
      $.ajax({
        url: "/models/s001_settings.json",
        dataType: 'json',
        success: this.onSettingsLoaded
      });
      return null;
    };

    Carnival.prototype.onSettingsLoaded = function(settings) {
      var i, _i, _j, _ref, _ref1;
      this.settings = settings;
      for (i = _i = 0, _ref = settings.positions.length; _i < _ref; i = _i += 3) {
        this.mouseInteraction.cameraPositionPoints.push(new THREE.Vector3(settings.positions[i], settings.positions[i + 1], settings.positions[i + 2]));
      }
      for (i = _j = 0, _ref1 = settings.lookAt.length; _j < _ref1; i = _j += 3) {
        this.mouseInteraction.cameraLookatPoints.push(new THREE.Vector3(settings.lookAt[i], settings.lookAt[i + 1], settings.lookAt[i + 2]));
      }
      if (this.oz().appView.debugMode) {
        this.createDebugPath(this.mouseInteraction.cameraPositionPoints);
        this.createDebugPath(this.mouseInteraction.cameraLookatPoints);
      }
      settings.renderer = this.renderer;
      settings.onProgress = this.onTextureProgress;
      settings.onComplete = this.onTextureComplete;
      settings.textureQuality = this.oz().appView.ddsSupported ? this.oz().appView.textureQuality : "low";
      this.materialManager.enableTextureFiltering = THREE.WebGLRenderer.AnisotropySupported || (QueryString.get("anisotropy") === "off");
      this.materialManager.forcePNGTextures = !this.oz().appView.ddsSupported || !THREE.WebGLRenderer.AnisotropySupported;
      this.materialManager.init(settings);
      this.materialManager.load();
      IFLModelManager.getInstance().load(this.settings.pickables, this.materialManager.instanceMaterial, this.settings.modelURL, this.onSceneLoaded, this.onSceneProgress);
      return null;
    };

    Carnival.prototype.onTextureProgress = function(percent) {
      this.textureLoadedPerc = percent;
      this.advanceLoading();
      return this;
    };

    Carnival.prototype.onTextureComplete = function() {
      this.textureLoaded = true;
      this.advanceLoading();
      return this;
    };

    Carnival.prototype.onSceneProgress = function(loaded, total) {
      this.sceneLoadedPerc = loaded / total;
      this.advanceLoading();
      return this;
    };

    Carnival.prototype.onSceneLoaded = function(loader, loadedScene) {
      SoundController.send('load_scene_1', ['load_scene_5', 'scene_carnival_start']);
      this.sceneLoaded = true;
      this.loader = loader;
      this.advanceLoading();
      return this;
    };

    Carnival.prototype.advanceLoading = function() {
      var total;
      total = this.sceneLoadedPerc * 0.5 + this.textureLoadedPerc * 0.5;
      this.onWorldProgress(total);
      if (this.textureLoaded === true && this.sceneLoaded === true && !this.loadingDone) {
        this.loadingDone = true;
        this.instanceWorld();
        this.onWorldProgress(1);
        this.onWorldLoaded();
      }
    };

    Carnival.prototype.show = function() {
      this.showTime = Date.now();
      return Carnival.__super__.show.apply(this, arguments);
    };

    Carnival.prototype.instanceWorld = function() {
      var blacklist, blacklisted, cfm, customFrustumPos, customFrustumRad, desc, dofblacklist, dofblacklisted, elem, foundObj, isBlacklisted, object, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
      this.loadedScene = this.loader.createModel(true);
      this.createBirdFlocks();
      this.initOrganCharacters();
      this.cutoutsDynamicTextures = [];
      desc = this.loadedScene.getDescendants();
      blacklist = ["grass", "branch"];
      dofblacklist = ["grass", "branch"];
      for (_i = 0, _len = desc.length; _i < _len; _i++) {
        elem = desc[_i];
        if ((((_ref = elem.material) != null ? (_ref1 = _ref.uniforms) != null ? _ref1.tWindForce : void 0 : void 0) != null) && elem.material.vertexColors === THREE.VertexColors && (this.windGenerator != null)) {
          elem.material.uniforms.tWindForce.value = this.windGenerator.noiseMap;
          elem.material.uniforms.windDirection.value.copy(this.windGenerator.windDirection);
        }
        if (elem.name === "characterCutouts_spec_right" || elem.name === "characterCutouts_spec_middle" || elem.name === "characterCutouts_spec_left") {
          this.cutoutsDynamicTextures.push(elem);
        }
        if (elem.name.toLowerCase().indexOf("signpost_simple") !== -1) {
          elem.position.x = 20;
          elem.position.z = -28;
        }
        foundObj = null;
        if (this.settings.customBounds != null) {
          for (cfm in this.settings.customBounds) {
            if (elem.name.toLowerCase().indexOf(cfm) !== -1) {
              foundObj = this.settings.customBounds[cfm];
              break;
            }
          }
          if (foundObj != null) {
            customFrustumPos = foundObj.position;
            customFrustumRad = foundObj.radius;
            elem.customFrustumMatrix = new THREE.Matrix4;
            elem.customFrustumMatrix.setPosition(new THREE.Vector3(customFrustumPos[0], customFrustumPos[1], customFrustumPos[2]));
            elem.geometry.boundingSphere.radius = customFrustumRad;
          }
        }
        if (this.oz().appView.displayQuality !== "hi") {
          isBlacklisted = false;
          for (_j = 0, _len1 = blacklist.length; _j < _len1; _j++) {
            blacklisted = blacklist[_j];
            if (elem.name.toLowerCase().indexOf(blacklisted.toLowerCase()) !== -1) {
              isBlacklisted = true;
              break;
            }
          }
          if (!isBlacklisted) {
            this.scene.add(elem);
          }
        } else {
          this.scene.add(elem);
        }
        for (_k = 0, _len2 = dofblacklist.length; _k < _len2; _k++) {
          dofblacklisted = dofblacklist[_k];
          if (elem.name.toLowerCase().indexOf(dofblacklisted.toLowerCase()) !== -1) {
            this.excludeFromDOF.push(elem);
            break;
          }
        }
      }
      this.initSun();
      if (this.oz().appView.showInterface) {
        this.hotspotManager.init(this.settings, this.scene, this.materialManager, this.oz().localeTexture, this.camera);
      }
      this.initDustSystems();
      this.onResize();
      this.setupIntroParams();
      this.sceneDescendants = this.scene.getDescendants();
      this.pickableObjects = [];
      _ref2 = this.sceneDescendants;
      for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
        object = _ref2[_l];
        if (object.pickable === true) {
          this.pickableObjects.push(object);
        }
      }
      this.enableRender = true;
      this.doInitialOptimizationPass();
      return null;
    };

    Carnival.prototype.doInitialOptimizationPass = function() {
      var prevCamerafov;
      this.initialOptimization = true;
      this.mouseInteraction.currentIndex = 120;
      prevCamerafov = this.camera.fov;
      this.camera.fov = 120;
      this.camera.updateProjectionMatrix();
      this.onEnterFrame();
      this.camera.fov = prevCamerafov;
      this.camera.updateProjectionMatrix();
      this.mouseInteraction.currentIndex = 0;
      this.initialOptimization = false;
      this.onEnterFrame();
      return null;
    };

    Carnival.prototype.setupIntroParams = function() {
      return this.introParams = [
        {
          object: this.camera,
          param: "fov",
          min: 25,
          max: this.camera.fov
        }, {
          object: this.mouseInteraction,
          param: "maxXLookDeviation",
          min: 30,
          max: this.mouseInteraction.maxXLookDeviation
        }, {
          object: this.mouseInteraction,
          param: "maxYLookDeviation",
          min: 10,
          max: this.mouseInteraction.maxYLookDeviation
        }, {
          object: this.scene.fog,
          param: "near",
          min: 237,
          max: this.scene.fog.near
        }, {
          object: this.scene.fog,
          param: "far",
          min: 1065,
          max: this.scene.fog.far
        }, {
          type: "color",
          object: this.params,
          param: "fogcolor",
          min: "#252c16",
          max: this.params.fogcolor
        }, {
          object: this.colorCorrection.uniforms.vignetteOffset,
          param: "value",
          min: 0,
          max: this.colorCorrection.uniforms.vignetteOffset.value
        }, {
          object: this.effectBloom.screenUniforms.opacity,
          param: "value",
          min: 0.77,
          max: this.effectBloom.screenUniforms.opacity.value
        }, {
          type: "color",
          object: this.params,
          param: "colorCorrectionPow",
          min: "#1d2f50",
          max: this.params.colorCorrectionPow
        }, {
          object: this.params,
          param: "colorCorrectionPowM",
          min: 1.4,
          max: this.params.colorCorrectionPowM
        }, {
          type: "color",
          object: this.params,
          param: "colorCorrectionMul",
          min: "#d2a669",
          max: this.params.colorCorrectionMul
        }, {
          object: this.params,
          param: "colorCorrectionMulM",
          min: 2,
          max: this.params.colorCorrectionMulM
        }, {
          type: "color",
          object: this.params,
          param: "colorCorrectionSaturationColors",
          min: "#9b9fa0",
          max: this.params.colorCorrectionSaturationColors
        }, {
          object: this.params,
          param: "colorCorrectionSaturation",
          min: -51,
          max: this.params.colorCorrectionSaturation
        }
      ];
    };

    Carnival.prototype.initOrganCharacters = function() {
      var geom, mat, params, plane, shader, uv, _i, _len, _ref;
      shader = new IFLBasicShader();
      params = {};
      params.fragmentShader = shader.fragmentShader;
      params.vertexShader = shader.vertexShader;
      params.uniforms = shader.uniforms;
      mat = new THREE.ShaderMaterial(params);
      mat.map = shader.uniforms["map"].value = this.materialManager.getPreloadedTexture("organ_characters.dds");
      mat.map.wrapS = mat.map.wrapT = THREE.RepeatWrapping;
      mat.name = "scene1_organcharactersshader";
      shader.uniforms["diffuseMultiplier"].value = .5;
      mat.transparent = true;
      mat.side = THREE.DoubleSide;
      mat.time = 0;
      mat.spritenum = 0;
      mat.totalframes = 2;
      mat.spritex = 1;
      mat.spritey = 2;
      mat.frametime = 1;
      this.materialManager.matLib.push(mat);
      geom = new THREE.PlaneGeometry(12, 12, 1, 1);
      _ref = geom.faceVertexUvs[0][0];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        uv = _ref[_i];
        uv.v = 1 - uv.v;
      }
      plane = new THREE.Mesh(geom, mat);
      plane.name = "organ_characters";
      plane.position.set(-8.5, 22, -75);
      plane.rotation.y = -0.37;
      this.animatedSprites.push(plane);
      this.scene.add(plane);
      return null;
    };

    Carnival.prototype.createBirdFlocks = function() {
      var geom, i, mat, num, params, plane, shader, tex, uv, _i, _j, _len, _ref;
      geom = new THREE.PlaneGeometry(10, 10, 1, 1);
      _ref = geom.faceVertexUvs[0][0];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        uv = _ref[_i];
        uv.v = 1 - uv.v;
      }
      tex = this.materialManager.getPreloadedTexture("bird.dds");
      shader = new IFLBasicShader();
      params = {};
      params.fragmentShader = shader.fragmentShader;
      params.vertexShader = shader.vertexShader;
      params.uniforms = shader.uniforms;
      num = this.oz().appView.displayQuality !== "low" ? 50 : 25;
      for (i = _j = 0; _j < num; i = _j += 1) {
        mat = new THREE.ShaderMaterial(params);
        mat.name = "scene1_birdshader";
        mat.map = shader.uniforms["map"].value = tex;
        mat.transparent = true;
        mat.time = 0;
        mat.spritenum = Math.round(this.randRange(0, 8));
        mat.totalframes = 8;
        mat.spritex = 4;
        mat.spritey = 2;
        mat.frametime = 1 / 15;
        this.materialManager.matLib.push(mat);
        plane = new THREE.Mesh(geom, mat);
        this.excludeFromDOF.push(plane);
        plane.position.set(this.randRange(-1000, 1000), this.randRange(100, 350), this.randRange(-1000, -400));
        plane.originalPosition = plane.position.clone();
        plane.name = "bird_" + i;
        plane.isBird = true;
        this.scene.add(plane);
        this.animatedSprites.push(plane);
      }
      return this;
    };

    Carnival.prototype.initDustSystems = function() {
      var dandelion, dandelionGeometry, dandelionMaterial, dandelionShader, geom, i, k, mat, num, params, particlesystem, setting, shader, vert, _i, _j, _k;
      for (i = _i = 0; _i < 5; i = _i += 1) {
        shader = new IFLWindyParticlesShader();
        params = {};
        params.fragmentShader = shader.fragmentShader;
        params.vertexShader = shader.vertexShader;
        params.uniforms = shader.uniforms;
        params.attributes = {
          speed: {
            type: 'f',
            value: []
          }
        };
        mat = new THREE.ShaderMaterial(params);
        mat.name = "scene1_dustshader";
        mat.map = shader.uniforms["map"].value = this.materialManager.getPreloadedTexture("/models/textures/particles/dust" + i + ".dds");
        mat.size = shader.uniforms["size"].value = Math.random();
        mat.scale = shader.uniforms["scale"].value = this.APP_HEIGHT / 2;
        mat.transparent = true;
        mat.sizeAttenuation = true;
        mat.blending = THREE.AdditiveBlending;
        this.materialManager.matLib.push(mat);
        this.materialManager.texLib.push(mat.map);
        if (this.windGenerator != null) {
          shader.uniforms["tWindForce"].value = this.windGenerator.noiseMap;
        }
        geom = new THREE.Geometry();
        geom.vertices = [];
        num = this.oz().appView.displayQuality !== "low" ? 300 : 150;
        for (k = _j = 0; _j < num; k = _j += 1) {
          setting = {};
          vert = new THREE.Vector3;
          vert.x = setting.startX = this.randRange(this.dustSystemMinX, this.dustSystemMaxX);
          vert.y = setting.startY = this.randRange(this.dustSystemMinY, this.dustSystemMaxY);
          vert.z = setting.startZ = this.randRange(this.dustSystemMinZ, this.dustSystemMaxZ);
          setting.speed = params.attributes.speed.value[k] = 1 + Math.random() * 10;
          setting.sinX = Math.random();
          setting.sinXR = Math.random() < 0.5 ? 1 : -1;
          setting.sinY = Math.random();
          setting.sinYR = Math.random() < 0.5 ? 1 : -1;
          setting.sinZ = Math.random();
          setting.sinZR = Math.random() < 0.5 ? 1 : -1;
          setting.rangeX = Math.random() * 5;
          setting.rangeY = Math.random() * 5;
          setting.rangeZ = Math.random() * 5;
          setting.vert = vert;
          geom.vertices.push(vert);
          this.dustSettings.push(setting);
        }
        particlesystem = new THREE.ParticleSystem(geom, mat);
        this.excludeFromDOF.push(particlesystem);
        particlesystem.name = "dustSystem_" + i;
        this.dustSystems.push(particlesystem);
        this.scene.add(particlesystem);
      }
      dandelionShader = new IFLDandelionParticlesShader();
      params = {};
      params.fragmentShader = dandelionShader.fragmentShader;
      params.vertexShader = dandelionShader.vertexShader;
      params.uniforms = dandelionShader.uniforms;
      params.attributes = {
        rotation: {
          type: 'f',
          value: []
        }
      };
      dandelionMaterial = new THREE.ShaderMaterial(params);
      dandelionMaterial.map = dandelionShader.uniforms["map"].value = this.materialManager.getPreloadedTexture("/models/textures/particles/dandelion.dds");
      dandelionMaterial.size = dandelionShader.uniforms["size"].value = 2;
      dandelionMaterial.scale = dandelionShader.uniforms["scale"].value = this.APP_HEIGHT / 2;
      dandelionMaterial.transparent = true;
      dandelionMaterial.sizeAttenuation = true;
      dandelionMaterial.name = "dandelion_shader";
      this.materialManager.matLib.push(dandelionMaterial);
      this.materialManager.texLib.push(dandelionMaterial.map);
      dandelionGeometry = new THREE.Geometry();
      dandelionGeometry.vertices = [];
      num = this.oz().appView.displayQuality !== "low" ? 200 : 100;
      for (k = _k = 0; _k < num; k = _k += 1) {
        setting = {};
        dandelion = new THREE.Vector3;
        dandelion.x = setting.startX = this.randRange(this.dustSystemMinX, this.dustSystemMaxX);
        dandelion.y = setting.startY = this.randRange(this.dustSystemMinY, this.dustSystemMaxY);
        dandelion.z = setting.startZ = this.randRange(this.dustSystemMinZ, this.dustSystemMaxZ);
        setting.speed = 0.001 + Math.random() * 0.003;
        setting.CCW = Math.random() > 0.5;
        setting.rotation = params.attributes.rotation.value[k] = Math.random() * (Math.PI / 4);
        dandelionGeometry.vertices.push(dandelion);
        this.dandelionsSettings.push(setting);
      }
      this.dandelionParticleSystem = new THREE.ParticleSystem(dandelionGeometry, dandelionMaterial);
      this.excludeFromDOF.push(this.dandelionParticleSystem);
      this.dandelionParticleSystem.name = "dandelion_particlesystem";
      this.scene.add(this.dandelionParticleSystem);
      return this;
    };

    Carnival.prototype.initGUI = function(settings) {
      Carnival.__super__.initGUI.call(this, settings);
      this.gui.add({
        value: -2.5
      }, 'value', -5, 20).name('Fresnel Power').onChange(this.materialManager.changeFresnelPower);
      if (this.windGenerator != null) {
        this.gui.add({
          value: this.windGenerator.enabled
        }, 'value').name('Enable Wind').onChange(this.onWindEnabledChange);
      }
      this.gui.add(this.mouseInteraction, "constantSpeed").name("Use Constant Speed");
      this.gui.add(this.mouseInteraction, "maxspeed", 0, 2).name("Maximum slide speed");
      this.gui.add(this.mouseInteraction, "maxYLookDeviation", 0, 100).name("Maximum Y Look");
      this.gui.add(this.mouseInteraction, "maxXLookDeviation", 0, 100).name("Maximum X Look");
      this.gui.add({
        value: false
      }, "value").name("Show Camera Paths").onChange(this.onShowDebugPathChange);
      this.gui.add(this.controls, "enabled").name("Exit Camera Path");
      return this;
    };

    Carnival.prototype.onWindEnabledChange = function(value) {
      var val, _ref;
      val = value == null ? false : ((value != null) && value === true ? true : false);
      this.materialManager.vertexColorsEnabled(val);
      if ((_ref = this.windGenerator) != null) {
        _ref.enabled = val;
      }
      return this.loader.geometryAttributeEnabled("color", val);
    };

    Carnival.prototype.onShowDebugPathChange = function(value) {
      if (value) {
        this.scene.add(this.debugPaths);
      } else {
        this.scene.remove(this.debugPaths);
      }
      return this;
    };

    Carnival.prototype.createDebugPath = function(arr) {
      var dMesh, index, linegeom, linerenderable, point, root, _i, _len;
      root = new THREE.Object3D;
      linegeom = new THREE.Geometry;
      linerenderable = new THREE.Line(linegeom);
      linerenderable.name = "debugpath";
      root.add(linerenderable);
      for (index = _i = 0, _len = arr.length; _i < _len; index = ++_i) {
        point = arr[index];
        dMesh = new THREE.Mesh(new THREE.SphereGeometry(.1, 3, 2), new THREE.MeshBasicMaterial({
          wireframe: true,
          color: 0xFF0000,
          lights: false
        }));
        dMesh.name = "debugPathNode_" + index;
        dMesh.position.copy(point);
        root.add(dMesh);
        linegeom.vertices.push(point);
      }
      this.debugPaths.add(root);
      return this;
    };

    Carnival.prototype.initSun = function() {
      var flare, flareSprite, mainSprite, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      mainSprite = this.materialManager.getPreloadedTexture(this.settings.sun.mainSprite);
      flareSprite = this.materialManager.getPreloadedTexture(this.settings.sun.flareSprite);
      this.materialManager.texLib.push(mainSprite);
      this.materialManager.texLib.push(flareSprite);
      this.lensFlare = new THREE.LensFlare(mainSprite, this.settings.sun.size, 0.0, THREE.AdditiveBlending, new THREE.Color(0xFFFFFF));
      this.lensFlare.position.set(this.settings.sun.position[0], this.settings.sun.position[1], this.settings.sun.position[2]);
      _ref = this.settings.sun.flares;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        flare = _ref[_i];
        this.lensFlare.add(flareSprite, flare[0], flare[1], THREE.AdditiveBlending);
      }
      _ref1 = this.lensFlare.lensFlares;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        flare = _ref1[_j];
        flare.originalSize = flare.size;
      }
      this.lensFlare.customUpdateCallback = function(object) {
        var vecX, vecY, _k, _len2, _ref2;
        vecX = -object.positionScreen.x * 2;
        vecY = -object.positionScreen.y * 2;
        _ref2 = object.lensFlares;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          flare = _ref2[_k];
          flare.x = object.positionScreen.x + vecX * flare.distance;
          flare.y = object.positionScreen.y + vecY * flare.distance;
          flare.rotation = 0;
        }
        object.lensFlares[2].y += 0.025;
        return object.lensFlares[3].rotation = object.positionScreen.x * 0.5 + 45 * Math.PI / 180;
      };
      this.scene.add(this.lensFlare);
      return this;
    };

    Carnival.prototype.onEnterFrame = function() {
      var _ref;
      if (!this.enableRender) {
        return;
      }
      Carnival.__super__.onEnterFrame.apply(this, arguments);
      this.adjustInitialSettings();
      this.mouseOverObjects = this.checkPicking();
      this.handlePointer();
      if (!this.initialOptimization) {
        this.introCameraManagement();
      }
      this.handleAnimatedSprites();
      this.moveBirds();
      this.hotspotManager.update(this.delta);
      this.moveDandelions();
      this.moveDust();
      this.handleMultiCamera();
      this.renderer.clear();
      if ((_ref = this.windGenerator) != null) {
        _ref.update(this.renderer, this.delta);
      }
      this.doRender();
      if (this.capturer) {
        return this.capturer.capture(this.oz().appView.renderCanvas3D);
      }
    };

    Carnival.prototype.handleMultiCamera = function() {
      if (!this.isGoingToInteractive) {
        if (((this.controls == null) || ((this.controls != null) && !this.controls.enabled)) && this.enableMouse) {
          this.camera.matrixAutoUpdate = false;
          return this.mouseInteraction.update(this.delta, this.mouseX, this.mouseY);
        } else {
          return this.camera.matrixAutoUpdate = true;
        }
      } else {
        return this.camera.matrixAutoUpdate = false;
      }
    };

    Carnival.prototype.adjustInitialSettings = function() {
      if (this.windinitialSettings == null) {
        this.windinitialSettings = 0;
      }
      if (this.windinitialSettings === 2) {
        if (this.windGenerator != null) {
          this.onWindEnabledChange(this.windGenerator.enabled);
        }
        this.windinitialSettings++;
      } else {
        this.windinitialSettings++;
      }
      if (this.showTime !== -1) {
        if (Date.now() - this.showTime > 300) {
          this.showTime = -1;
          return this.mouseInteraction.mouseEnabled = true;
        }
      }
    };

    Carnival.prototype.colorIntroParam = "color";

    Carnival.prototype.introCameraManagement = function() {
      var indexNorm, obj, _i, _j, _len, _len1, _ref, _ref1;
      if (this.mouseInteraction.currentIndex < this.maxIndex && !this.isGoingToInteractive) {
        this.mouseInteraction.minIndex = this.minIndex;
        indexNorm = this.mouseInteraction.currentIndex + this.mouseInteraction.currentProgress;
        _ref = this.introParams;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          obj = _ref[_i];
          if (obj.type !== this.colorIntroParam) {
            this.adjustIntroParam(obj.object, obj.param, obj.min, obj.max, indexNorm, this.minIndex, this.maxIndex);
          } else {
            this.adjustIntroColor(obj.object, obj.param, obj.min, obj.max, indexNorm, this.minIndex, this.maxIndex);
          }
        }
        this.camera.updateProjectionMatrix();
        this.onFogColorChange(this.params.fogcolor);
        this.onColorCorrectionChange();
      } else if (this.passedIntro !== true) {
        _ref1 = this.introParams;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          obj = _ref1[_j];
          if (obj.type !== this.colorIntroParam) {
            this.adjustIntroParam(obj.object, obj.param, obj.min, obj.max, this.maxIndex, this.minIndex, this.maxIndex);
          } else {
            this.adjustIntroColor(obj.object, obj.param, obj.min, obj.max, this.maxIndex, this.minIndex, this.maxIndex);
          }
        }
        this.mouseInteraction.minIndex = this.maxIndex;
        this.passedIntro = true;
        this.oz().appView.showMenu();
      }
      return null;
    };

    Carnival.prototype.moveBirds = function() {
      var sprite, _i, _len, _ref;
      _ref = this.animatedSprites;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sprite = _ref[_i];
        if (!(sprite.isBird === true)) {
          continue;
        }
        sprite.position.x += 0.5 * (this.delta * 100);
        if (sprite.position.x > 2000) {
          sprite.position.x = this.randRange(-2000, -1000);
        }
        sprite.lookAt(this.camera.position);
      }
      return null;
    };

    Carnival.prototype.moveDandelions = function() {
      var dandelion, index, setting, _i, _len, _ref;
      if (this.dandelionParticleSystem) {
        _ref = this.dandelionParticleSystem.geometry.vertices;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          dandelion = _ref[index];
          setting = this.dandelionsSettings[index];
          dandelion.rotation = this.dandelionParticleSystem.material.attributes.rotation.value[index] = (Math.PI / 4) * Math.sin(this.clock.oldTime * setting.speed);
          if (!setting.CCW) {
            dandelion.x = setting.startX + Math.cos(this.clock.oldTime * setting.speed * 0.01) * 50;
            dandelion.y = setting.startY + Math.sin(this.clock.oldTime * setting.speed * 0.01) * 50;
          } else {
            dandelion.x = setting.startX - Math.cos(this.clock.oldTime * setting.speed * 0.01) * 50;
            dandelion.y = setting.startY - Math.sin(this.clock.oldTime * setting.speed * 0.01) * 50;
          }
        }
        this.dandelionParticleSystem.material.attributes.rotation.needsUpdate = true;
        this.dandelionParticleSystem.geometry.verticesNeedUpdate = true;
      }
      return null;
    };

    Carnival.prototype.moveDust = function() {
      var obj, setting, vert, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.dustSettings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        setting = _ref[_i];
        vert = setting.vert;
        setting.sinX = setting.sinX + ((0.002 * setting.speed) * setting.sinXR);
        setting.sinY = setting.sinY + ((0.002 * setting.speed) * setting.sinYR);
        setting.sinZ = setting.sinZ + ((0.002 * setting.speed) * setting.sinZR);
        vert.x = setting.startX + (Math.sin(setting.sinX) * setting.rangeX);
        vert.y = setting.startY + (Math.sin(setting.sinY) * setting.rangeY);
        vert.z = setting.startZ + (Math.sin(setting.sinZ) * setting.rangeZ);
      }
      _ref1 = this.dustSystems;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        obj = _ref1[_j];
        obj.material.uniforms.time.value += this.delta;
        obj.geometry.verticesNeedUpdate = true;
      }
      return false;
    };

    Carnival.prototype.adjustIntroParam = function(obj, param, initialValue, finalValue, indexNorm, minIndex, maxIndex) {
      var indexExcursion, valExcursion;
      valExcursion = finalValue - initialValue;
      indexExcursion = maxIndex - minIndex;
      obj[param] = initialValue + (indexNorm * valExcursion) / indexExcursion;
      return this;
    };

    Carnival.prototype.adjustIntroColor = function(obj, param, initialValue, finalValue, indexNorm, minIndex, maxIndex) {
      var b, finalColor, g, initColor, r;
      initColor = this.stringToColor(initialValue);
      finalColor = this.stringToColor(finalValue);
      r = initColor.r + (indexNorm * (finalColor.r - initColor.r)) / (maxIndex - minIndex);
      g = initColor.g + (indexNorm * (finalColor.g - initColor.g)) / (maxIndex - minIndex);
      b = initColor.b + (indexNorm * (finalColor.b - initColor.b)) / (maxIndex - minIndex);
      initColor.r = r;
      initColor.g = g;
      initColor.b = b;
      obj[param] = "#" + initColor.getHex().toString(16);
      return this;
    };

    Carnival.prototype.changeCutout = function(name) {
      var afterInteractiveLookat, afterInteractivePosition, currentlookat;
      if (!(this.currentView === "cutout" && this.currentCutout !== name)) {
        return;
      }
      afterInteractivePosition = new THREE.Vector3(this.settings.cutout[name].position[0], this.settings.cutout[name].position[1], this.settings.cutout[name].position[2]);
      afterInteractiveLookat = new THREE.Vector3(this.settings.cutout[name].lookat[0], this.settings.cutout[name].lookat[1], this.settings.cutout[name].lookat[2]);
      currentlookat = new THREE.Vector3(this.settings.cutout[this.currentCutout].lookat[0], this.settings.cutout[this.currentCutout].lookat[1], this.settings.cutout[this.currentCutout].lookat[2]);
      this.hotspotManager.interactiveCameraTween(currentlookat, afterInteractivePosition, afterInteractiveLookat, 50, 500);
      this.currentCutout = name;
      return this;
    };

    Carnival.prototype.onTouchEnd = function(event) {
      Carnival.__super__.onTouchEnd.apply(this, arguments);
      this.mouseX = this.mouseY = 0;
      return this.onMouseUp(event);
    };

    Carnival.prototype.onTouchStart = function(event) {
      Carnival.__super__.onTouchStart.apply(this, arguments);
      return this.onMouseDown(event);
    };

    Carnival.prototype.onMouseDown = function(event) {
      Carnival.__super__.onMouseDown.call(this);
      if (!this.enableMouse) {
        return;
      }
      if ((this.controls != null) && this.controls.enabled) {
        return;
      }
      this.mouseDownPoint.set(this.mouseX, this.mouseY);
      this.mouseDownObjects = this.checkPicking();
      return this;
    };

    Carnival.prototype.onMouseUp = function(event) {
      var elem, h, mouseUpOzific, mousedownozific, obj, ozificable, _i, _len, _ref;
      Carnival.__super__.onMouseUp.call(this);
      if (!this.enableMouse) {
        return;
      }
      if ((this.controls != null) && this.controls.enabled) {
        return;
      }
      this.mouseUpPoint.set(this.mouseX, this.mouseY);
      this.mouseUpObjects = this.checkPicking();
      if (!this.isGoingToInteractive) {
        if (this.hotspotManager.handleMouseUp(this.mouseUpObjects, this.mouseDownObjects)) {
          if (this.currentView === this.hotspotManager.clickedHotspot) {
            this.oz().router.navigateTo(this.currentView);
            if (this.hotspotManager.zoomInHotspot(this.currentView, this.onCameraReady, this.mouseInteraction)) {
              if (this.currentView === "cutout") {
                this.currentCutout = "middle";
              }
              this.isGoingToInteractive = true;
            }
          } else {
            h = "";
            switch (this.hotspotManager.clickedHotspot.toLowerCase()) {
              case "zoetrope":
                h = "carnival2";
                this.oz().router.navigateTo(h, false);
                break;
              default:
                h = this.hotspotManager.clickedHotspot;
                this.oz().router.navigateTo(h);
            }
          }
        }
      }
      if (this.settings != null) {
        for (ozificable in this.settings.ozificables) {
          mouseUpOzific = this.mouseUpObjects[ozificable] != null ? this.mouseUpObjects[ozificable] : false;
          mousedownozific = this.mouseDownObjects[ozificable] != null ? this.mouseDownObjects[ozificable] : false;
          if (mousedownozific !== false && mouseUpOzific !== false && this.hotspotManager.is3DMouseClick(mousedownozific, mouseUpOzific)) {
            obj = this.settings.ozificables[ozificable];
            _ref = this.sceneDescendants;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              elem = _ref[_i];
              if (!(elem.name === obj.target)) {
                continue;
              }
              if (elem.ozified !== true) {
                SoundController.send("ozzification_on");
                new TWEEN.Tween(elem.material.uniforms["lightmapBlend"]).to({
                  value: 1
                }, 2000).start();
                new IFLOzifyParticleSystem(mousedownozific.object, this.scene, this.APP_HEIGHT);
                elem.ozified = true;
              } else if (elem.ozified === true) {
                SoundController.send("ozzification_off");
                new TWEEN.Tween(elem.material.uniforms["lightmapBlend"]).to({
                  value: 0
                }, 2000).start();
                elem.ozified = false;
              }
              break;
            }
            break;
          }
        }
      }
      return this;
    };

    Carnival.prototype.changeView = function(view) {
      var beforeInteractiveLookat, beforeInteractivePosition, index,
        _this = this;
      if (view === this.currentView) {
        return;
      }
      this.currentView = view;
      if (view === null) {
        this.resume();
        this.onEnterFrame();
        this.hotspotManager.hotspotsAlpha(1);
        index = this.settings.navigationPoints[this.hotspotManager.clickedHotspot].index;
        beforeInteractivePosition = this.mouseInteraction.cameraPositionPoints[index].clone();
        beforeInteractiveLookat = this.mouseInteraction.cameraLookatPoints[index].clone();
        this.mouseInteraction.currentIndex = index;
        this.mouseInteraction.currentProgress = 0.5;
        this.mouseInteraction.lookDeviationX._value = 0;
        this.mouseInteraction.lookDeviationY._value = 0;
        this.mouseInteraction.bobSpeed._value = 0;
        this.hotspotManager.interactiveCameraTween(this.mouseInteraction.currentLookAt, beforeInteractivePosition, beforeInteractiveLookat, 35, 1500).onComplete(function() {
          _this.isGoingToInteractive = false;
          return _this.nearPoint = null;
        });
        this.hotspotManager.clickedHotspot = null;
        return;
      }
      if (this.hotspotManager.clickedHotspot === this.currentView) {
        if (this.hotspotManager.zoomInHotspot(view, this.onCameraReady, this.mouseInteraction)) {
          if (view === "cutout") {
            this.currentCutout = "middle";
          }
          this.isGoingToInteractive = true;
        }
      } else {
        if (!this.gotoPositionOnPath(view)) {
          this.oz().router.navigateTo(view);
        }
      }
      return this;
    };

    Carnival.prototype.cutoutsUpdatedOnce = false;

    Carnival.prototype.updateCutoutsTexture = function(texture) {
      var mesh, newtex, _i, _len, _ref;
      newtex = null;
      if (!this.cutoutsUpdatedOnce) {
        newtex = new THREE.Texture(texture);
        newtex.needsUpdate = true;
        newtex.flipY = false;
      }
      _ref = this.cutoutsDynamicTextures;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mesh = _ref[_i];
        if (!this.cutoutsUpdatedOnce) {
          mesh.material.lightMap = mesh.material.uniforms["lightMap"].value = newtex;
        }
        mesh.material.lightMap.image = texture;
        mesh.material.lightMap.needsUpdate = true;
      }
      this.cutoutsUpdatedOnce = true;
      return this;
    };

    Carnival.prototype.onResize = function() {
      var mat, _i, _len, _ref, _ref1;
      Carnival.__super__.onResize.apply(this, arguments);
      this.mouseInteraction.handleResize(this.APP_WIDTH, this.APP_HEIGHT);
      if (this.materialManager && this.materialManager.matLib) {
        _ref = this.materialManager.matLib;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mat = _ref[_i];
          if (((_ref1 = mat.uniforms) != null ? _ref1.scale : void 0) != null) {
            mat.uniforms.scale.value = (this.APP_HEIGHT / 2) * this.renderResolutionMultiplier;
          }
        }
      }
      return this;
    };

    Carnival.prototype.dispose = function() {
      var obj, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
      this.enableRender = false;
      if ((_ref = this.materialManager) != null) {
        _ref.dispose(this.renderer);
      }
      delete this.materialManager;
      if ((_ref1 = this.loader) != null) {
        _ref1.dispose();
      }
      delete this.loader;
      if ((_ref2 = this.windGenerator) != null) {
        _ref2.dispose(this.renderer);
      }
      delete this.windGenerator;
      if ((_ref3 = this.hotspotManager) != null) {
        _ref3.dispose();
      }
      delete this.hotspotManager;
      _ref4 = this.scene.children;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        obj = _ref4[_i];
        this.scene.remove(obj);
      }
      this.scene.__webglObjects = null;
      this.scene.__objects = null;
      this.scene.__objectsRemoved = null;
      this.scene.children = [];
      this.dustSystems = null;
      this.animatedSprites = null;
      Carnival.__super__.dispose.apply(this, arguments);
      return this;
    };

    return Carnival;

  })(Base3DChapter);

  Carnival2 = (function(_super) {

    __extends(Carnival2, _super);

    function Carnival2() {
      this.dispose = __bind(this.dispose, this);
      this.onResize = __bind(this.onResize, this);
      this.onMouseUp = __bind(this.onMouseUp, this);
      this.onMouseDown = __bind(this.onMouseDown, this);
      this.onTouchStart = __bind(this.onTouchStart, this);
      this.onTouchEnd = __bind(this.onTouchEnd, this);
      this.changeView = __bind(this.changeView, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.onShowDebugPathChange = __bind(this.onShowDebugPathChange, this);
      this.onWindEnabledChange = __bind(this.onWindEnabledChange, this);
      this.instanceWorld = __bind(this.instanceWorld, this);
      this.advanceLoading = __bind(this.advanceLoading, this);
      this.show = __bind(this.show, this);
      this.onSceneLoaded = __bind(this.onSceneLoaded, this);
      this.onSceneProgress = __bind(this.onSceneProgress, this);
      this.onTextureComplete = __bind(this.onTextureComplete, this);
      this.onTextureProgress = __bind(this.onTextureProgress, this);
      this.onSettingsLoaded = __bind(this.onSettingsLoaded, this);
      this.render = __bind(this.render, this);      return Carnival2.__super__.constructor.apply(this, arguments);
    }

    Carnival2.prototype.settings = null;

    Carnival2.prototype.loadedScene = null;

    Carnival2.prototype.mouseInteraction = null;

    Carnival2.prototype.hotspotManager = null;

    Carnival2.prototype.materialManager = null;

    Carnival2.prototype.enableRender = false;

    Carnival2.prototype.debugPaths = null;

    Carnival2.prototype.mouseOverObjects = null;

    Carnival2.prototype.mouseDownObjects = null;

    Carnival2.prototype.mouseUpObjects = null;

    Carnival2.prototype.lastMouseX = 0;

    Carnival2.prototype.lastMouseY = 0;

    Carnival2.prototype.mouseDownPoint = null;

    Carnival2.prototype.mouseUpPoint = null;

    Carnival2.prototype.isGoingToInteractive = false;

    Carnival2.prototype.currentView = null;

    Carnival2.prototype.currentCutout = null;

    Carnival2.prototype.dustSystems = null;

    Carnival2.prototype.dustSystemMinX = -170;

    Carnival2.prototype.dustSystemMinY = 0;

    Carnival2.prototype.dustSystemMinZ = -200;

    Carnival2.prototype.dustSystemMaxX = 80;

    Carnival2.prototype.dustSystemMaxY = 100;

    Carnival2.prototype.dustSystemMaxZ = 30;

    Carnival2.prototype.windGenerator = null;

    Carnival2.prototype.audiolistener = null;

    Carnival2.prototype.occlusionBuffer = null;

    Carnival2.prototype.animatedSprites = null;

    Carnival2.prototype.nearPoint = null;

    Carnival2.prototype.pickVector = null;

    Carnival2.prototype.pickRay = null;

    Carnival2.prototype.sceneDescendants = null;

    Carnival2.prototype.dustSettings = null;

    Carnival2.prototype.sceneLoadedPerc = 0;

    Carnival2.prototype.sceneLoaded = false;

    Carnival2.prototype.textureLoadedPerc = 0;

    Carnival2.prototype.textureLoaded = false;

    Carnival2.prototype.loadingDone = false;

    Carnival2.prototype.init = function() {
      Carnival2.__super__.init.apply(this, arguments);
      IFLModelManager.getInstance().cacheTextures(this.oz().appView.enablePrefetching);
      IFLModelManager.getInstance().prefetchEnabled = this.oz().appView.enablePrefetching;
      this.dustSettings = [];
      this.mouseDownPoint = new THREE.Vector2;
      this.mouseUpPoint = new THREE.Vector2;
      this.pickVector = new THREE.Vector3;
      this.pickRay = new THREE.Ray;
      this.animatedSprites = [];
      this.dustSystems = [];
      this.mouseDownObjects = [];
      this.mouseUpObjects = [];
      this.mouseOverObjects = [];
      this.renderer.gammaInput = false;
      this.renderer.gammaOutput = false;
      this.renderer.sortObjects = false;
      this.renderer.shadowMapEnabled = false;
      this.renderer.shadowMapSoft = false;
      this.camera.position.x = 100;
      this.camera.position.y = 100;
      this.camera.position.z = 100;
      this.camera.fov = 35;
      this.camera.near = 1;
      this.camera.far = 7000;
      this.camera.target = new THREE.Vector3(0, 0, 0);
      this.mouseInteraction = new IFLCameraPathInteraction(this.camera);
      this.mouseInteraction.maxXLookDeviation = 40;
      if (SoundController.active) {
        this.audiolistener = new THREE.AudioListenerObject(this.camera);
        this.audiolistener.position.set(0, 150, 400);
        this.scene.add(this.audiolistener);
      }
      if (this.oz().appView.debugMode) {
        this.controls = new THREE.FirstPersonControls(this.camera, this.oz().appView.wrapper.el);
        this.controls.movementSpeed = 20;
        this.controls.lookSpeed = 0.005 * 5;
        this.controls.enabled = false;
      }
      this.materialManager = new IFLMaterialManager;
      this.hotspotManager = new IFLHotspotManager;
      this.params.cameraFOV = this.camera.fov;
      this.params.fogcolor = "#180f20";
      this.scene.fog.far = 757;
      this.scene.fog.near = 0;
      this.scene.fog.color.copy(this.stringToColor(this.params.fogcolor));
      this.params.colorCorrectionPow = "#2f2869";
      this.params.colorCorrectionPowM = 2;
      this.params.colorCorrectionMul = "#bea38b";
      this.params.colorCorrectionMulM = 1.8;
      this.params.colorCorrectionSaturation = -52;
      this.params.colorCorrectionSaturationColors = "#11263e";
      this.dofpost.focus = this.dofpost.bokeh_uniforms["focus"].value = 0.97;
      this.dofpost.aperture = this.dofpost.bokeh_uniforms["aperture"].value = 0.009;
      this.dofpost.maxblur = this.dofpost.bokeh_uniforms["maxblur"].value = 0.007;
      this.dofpost.cameranear = 0.001;
      this.dofpost.camerafar = 956;
      this.params.bloomPower = this.effectBloom.screenUniforms.opacity.value = 0.75;
      this.effectBloom.enabled = true;
      this.debugPaths = new THREE.Object3D;
      if (this.renderer.supportsVertexTextures()) {
        this.windGenerator = new IFLWindGenerator();
        this.windGenerator.enabled = this.oz().appView.displayQuality !== "low" ? true : false;
      }
      this.colorCorrection.uniforms.vignetteOffset.value = 0.2;
      this.colorCorrection.uniforms.vignetteDarkness.value = 1;
      if (this.oz().appView.debugMode) {
        this.initGUI();
      }
      this.onColorCorrectionChange();
      this.autoPerformance.steps.push({
        name: "Wind",
        enabled: this.windGenerator != null ? this.windGenerator.enabled : false,
        priority: 50,
        disableFunc: this.onWindEnabledChange
      });
      this.onResize();
      this.lastMouseY = this.mouseY + this.APP_HALF_Y;
      this.lastMouseX = this.mouseX + this.APP_HALF_X;
      return null;
    };

    Carnival2.prototype.render = function() {
      Carnival2.__super__.render.apply(this, arguments);
      $.ajax({
        url: "/models/s002_settings.json",
        dataType: 'json',
        success: this.onSettingsLoaded
      });
      return null;
    };

    Carnival2.prototype.onSettingsLoaded = function(settings) {
      var i, _i, _j, _ref, _ref1;
      this.settings = settings;
      for (i = _i = 0, _ref = settings.positions.length; _i < _ref; i = _i += 3) {
        this.mouseInteraction.cameraPositionPoints.push(new THREE.Vector3(settings.positions[i], settings.positions[i + 1], settings.positions[i + 2]));
      }
      for (i = _j = 0, _ref1 = settings.lookAt.length; _j < _ref1; i = _j += 3) {
        this.mouseInteraction.cameraLookatPoints.push(new THREE.Vector3(settings.lookAt[i], settings.lookAt[i + 1], settings.lookAt[i + 2]));
      }
      if (this.oz().appView.debugMode) {
        this.createDebugPath(this.mouseInteraction.cameraPositionPoints);
        this.createDebugPath(this.mouseInteraction.cameraLookatPoints);
      }
      settings.renderer = this.renderer;
      settings.onProgress = this.onTextureProgress;
      settings.onComplete = this.onTextureComplete;
      settings.textureQuality = this.oz().appView.ddsSupported ? this.oz().appView.textureQuality : "low";
      this.materialManager.enableTextureFiltering = THREE.WebGLRenderer.AnisotropySupported || (QueryString.get("anisotropy") === "off");
      this.materialManager.forcePNGTextures = !this.oz().appView.ddsSupported || !THREE.WebGLRenderer.AnisotropySupported;
      this.materialManager.init(settings);
      this.materialManager.load();
      IFLModelManager.getInstance().load(this.settings.pickables, this.materialManager.instanceMaterial, this.settings.modelURL, this.onSceneLoaded, this.onSceneProgress);
      return null;
    };

    Carnival2.prototype.onTextureProgress = function(percent) {
      this.textureLoadedPerc = percent;
      this.advanceLoading();
      return null;
    };

    Carnival2.prototype.onTextureComplete = function() {
      this.textureLoaded = true;
      this.advanceLoading();
      return null;
    };

    Carnival2.prototype.onSceneProgress = function(loaded, total) {
      this.sceneLoadedPerc = loaded / total;
      this.advanceLoading();
      return null;
    };

    Carnival2.prototype.onSceneLoaded = function(loader, loadedScene) {
      if (this.oz().appView.firstTime) {
        SoundController.send('load_scene_1', ['load_scene_5', 'scene_carnival_start']);
      } else {
        SoundController.send('load_scene_2', 'scene_carnival2_start');
      }
      this.sceneLoaded = true;
      this.loader = loader;
      this.advanceLoading();
      return null;
    };

    Carnival2.prototype.show = function() {
      this.instanceWorld();
      this.oz().appView.showMenu();
      Carnival2.__super__.show.apply(this, arguments);
      return null;
    };

    Carnival2.prototype.advanceLoading = function() {
      var total;
      total = this.sceneLoadedPerc * 0.5 + this.textureLoadedPerc * 0.5;
      this.onWorldProgress(total);
      if (this.textureLoaded === true && this.sceneLoaded === true && !this.loadingDone) {
        this.loadingDone = true;
        this.onWorldProgress(1);
        this.onWorldLoaded();
      }
      return null;
    };

    Carnival2.prototype.instanceWorld = function() {
      var blacklist, blacklisted, cfm, count, customFrustumPos, customFrustumRad, desc, dofblacklist, dofblacklisted, dofplanehack, elem, foundObj, isBlacklisted, object, vols, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
      this.loadedScene = this.loader.createModel(true);
      if (this.dofpost.enabled) {
        dofplanehack = new THREE.Mesh(new THREE.PlaneGeometry(27.958, 20.505, 1, 1), new THREE.MeshBasicMaterial({
          transparent: true,
          opacity: 0,
          color: 0xFF0000
        }));
        dofplanehack.rotation.set(0, 0.778347033, 0);
        dofplanehack.position.set(13.615, 13.477, -114.834);
        this.scene.add(dofplanehack);
      }
      vols = [];
      count = 0;
      desc = this.loadedScene.getDescendants();
      blacklist = ["grass", "branch"];
      dofblacklist = ["grass", "branch"];
      for (_i = 0, _len = desc.length; _i < _len; _i++) {
        elem = desc[_i];
        if ((((_ref = elem.material) != null ? (_ref1 = _ref.uniforms) != null ? _ref1.tWindForce : void 0 : void 0) != null) && elem.material.vertexColors === THREE.VertexColors && (this.windGenerator != null)) {
          elem.material.uniforms.tWindForce.value = this.windGenerator.noiseMap;
          elem.material.uniforms.windDirection.value.copy(this.windGenerator.windDirection);
        }
        if (elem.name.toLowerCase().indexOf("zoetrope") !== -1) {
          this.zoe = elem;
        }
        if (elem.name.toLowerCase().indexOf("zfg_spec") !== -1) {
          this.pole = elem;
        }
        if (elem.name.toLowerCase().indexOf("vol_main") !== -1) {
          if (count % 2 === 0) {
            this.loadedScene.remove(elem);
          }
          count++;
        }
        foundObj = null;
        if (this.settings.customBounds != null) {
          for (cfm in this.settings.customBounds) {
            if (elem.name.toLowerCase().indexOf(cfm) !== -1) {
              foundObj = this.settings.customBounds[cfm];
              break;
            }
          }
          if (foundObj != null) {
            customFrustumPos = foundObj.position;
            customFrustumRad = foundObj.radius;
            elem.customFrustumMatrix = new THREE.Matrix4;
            elem.customFrustumMatrix.setPosition(new THREE.Vector3(customFrustumPos[0], customFrustumPos[1], customFrustumPos[2]));
            elem.geometry.boundingSphere.radius = customFrustumRad;
          }
        }
        if (this.oz().appView.displayQuality !== "hi") {
          isBlacklisted = false;
          for (_j = 0, _len1 = blacklist.length; _j < _len1; _j++) {
            blacklisted = blacklist[_j];
            if (elem.name.toLowerCase().indexOf(blacklisted.toLowerCase()) !== -1) {
              isBlacklisted = true;
              break;
            }
          }
          if (!isBlacklisted) {
            this.scene.add(elem);
          }
        } else {
          this.scene.add(elem);
        }
        for (_k = 0, _len2 = dofblacklist.length; _k < _len2; _k++) {
          dofblacklisted = dofblacklist[_k];
          if (elem.name.toLowerCase().indexOf(dofblacklisted.toLowerCase()) !== -1) {
            this.excludeFromDOF.push(elem);
            break;
          }
        }
      }
      this.initOcclusionScene();
      this.initProjection();
      this.initSun();
      if (this.oz().appView.showInterface) {
        this.hotspotManager.init(this.settings, this.scene, this.materialManager, this.oz().localeTexture, this.camera);
      }
      this.initDustSystems();
      if (this.oz().appView.zoetropeTexture != null) {
        this.updateFilmTexture(this.oz().appView.zoetropeTexture);
      }
      this.sceneDescendants = this.scene.getDescendants();
      this.pickableObjects = [];
      _ref2 = this.sceneDescendants;
      for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
        object = _ref2[_l];
        if (object.pickable === true) {
          this.pickableObjects.push(object);
        }
      }
      this.enableRender = true;
      this.onResize();
      return null;
    };

    Carnival2.prototype.initProjection = function() {
      var geom;
      this.projectionmat = new THREE.MeshBasicMaterial({
        lights: false,
        blending: THREE.AdditiveBlending,
        transparent: true,
        map: this.materialManager.getPreloadedTexture("projection.dds"),
        side: THREE.DoubleSide,
        opacity: 0.5
      });
      this.projectionmat.map.generateMipmaps = false;
      this.projectionmat.map.magFilter = THREE.LinearFilter;
      this.projectionmat.map.minFilter = THREE.LinearFilter;
      this.projectionmat.map.wrapS = this.projectionmat.map.wrapT = THREE.RepeatWrapping;
      this.projectionmat.time = 0;
      this.projectionmat.spritenum = 0;
      this.projectionmat.totalframes = 12;
      this.projectionmat.spritex = 3;
      this.projectionmat.spritey = 4;
      this.projectionmat.frametime = 0.1;
      this.materialManager.matLib.push(this.projectionmat);
      this.materialManager.texLib.push(this.projectionmat.map);
      geom = new THREE.PlaneGeometry(20, 20, 1, 1);
      this.projection = new THREE.Mesh(geom, this.projectionmat);
      this.projection.name = "zoetrope_projection";
      this.projection.position.set(144.999, 16.892, -126.195);
      this.projection.rotation.set(-Math.PI, -0.171845118, 0);
      this.animatedSprites.push(this.projection);
      this.scene.add(this.projection);
      return null;
    };

    Carnival2.prototype.initOcclusionScene = function() {
      var bluriness, gmat, gmat2, poleMesh, renderModelOcl, zoeMesh;
      this.occlusionScene = new THREE.Scene;
      gmat = new THREE.MeshBasicMaterial({
        color: 0x000000,
        map: null
      });
      gmat2 = new THREE.MeshBasicMaterial({
        color: 0xf2f0ce,
        map: null
      });
      zoeMesh = new THREE.Mesh(this.zoe.geometry, gmat);
      zoeMesh.name = "occlusion_zoetrope";
      poleMesh = new THREE.Mesh(this.pole.geometry, gmat);
      poleMesh.name = "occlusion_pole";
      this.occlusionScene.add(zoeMesh);
      this.occlusionScene.add(poleMesh);
      this.light2 = new THREE.Mesh(new THREE.SphereGeometry(1.8), gmat2);
      this.light2.name = "occlusion_light";
      this.light2.position.set(134.18, 14.428, -80.7);
      this.light2.scale.y = 0.6;
      this.occlusionScene.add(this.light2);
      this.occlusionBuffer = new THREE.WebGLRenderTarget(this.APP_WIDTH / 2, this.APP_HEIGHT / 2, {
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBFormat
      });
      this.colorCorrection.uniforms["tVolumetricLight"].value = this.occlusionBuffer;
      this.occlusionComposer = new THREE.EffectComposer(this.renderer, this.occlusionBuffer);
      renderModelOcl = new THREE.RenderPass(this.occlusionScene, this.camera);
      this.occlusion_hblur = new THREE.ShaderPass(THREE.ShaderExtras["horizontalTiltShift"]);
      this.occlusion_vblur = new THREE.ShaderPass(THREE.ShaderExtras["verticalTiltShift"]);
      bluriness = 2;
      this.occlusion_hblur.uniforms['h'].value = bluriness / this.APP_WIDTH * 2;
      this.occlusion_vblur.uniforms['v'].value = bluriness / this.APP_HEIGHT * 2;
      this.occlusionComposer.addPass(renderModelOcl);
      this.occlusionComposer.addPass(this.occlusion_hblur);
      this.occlusionComposer.addPass(this.occlusion_vblur);
      this.occlusionComposer.addPass(this.occlusion_hblur);
      this.occlusionComposer.addPass(this.occlusion_vblur);
      return null;
    };

    Carnival2.prototype.initDustSystems = function() {
      var geom, i, k, mat, num, params, particlesystem, setting, shader, vert, _i, _j;
      for (i = _i = 0; _i < 5; i = _i += 1) {
        shader = new IFLWindyParticlesShader();
        params = {};
        params.fragmentShader = shader.fragmentShader;
        params.vertexShader = shader.vertexShader;
        params.uniforms = shader.uniforms;
        params.attributes = {
          speed: {
            type: 'f',
            value: []
          }
        };
        mat = new THREE.ShaderMaterial(params);
        mat.map = shader.uniforms["map"].value = this.materialManager.getPreloadedTexture("/models/textures/particles/dust" + i + ".dds");
        mat.size = shader.uniforms["size"].value = Math.random();
        mat.scale = shader.uniforms["scale"].value = this.APP_HEIGHT / 2;
        mat.transparent = true;
        mat.sizeAttenuation = true;
        mat.blending = THREE.AdditiveBlending;
        this.materialManager.matLib.push(mat);
        this.materialManager.texLib.push(mat.map);
        if (this.windGenerator != null) {
          shader.uniforms["tWindForce"].value = this.windGenerator.noiseMap;
        }
        geom = new THREE.Geometry();
        geom.vertices = [];
        num = this.oz().appView.displayQuality !== "low" ? 300 : 150;
        for (k = _j = 0; _j < num; k = _j += 1) {
          setting = {};
          vert = new THREE.Vector3;
          vert.x = setting.startX = this.randRange(this.dustSystemMinX, this.dustSystemMaxX);
          vert.y = setting.startY = this.randRange(this.dustSystemMinY, this.dustSystemMaxY);
          vert.z = setting.startZ = this.randRange(this.dustSystemMinZ, this.dustSystemMaxZ);
          setting.speed = params.attributes.speed.value[k] = 1 + Math.random() * 10;
          setting.sinX = Math.random();
          setting.sinXR = Math.random() < 0.5 ? 1 : -1;
          setting.sinY = Math.random();
          setting.sinYR = Math.random() < 0.5 ? 1 : -1;
          setting.sinZ = Math.random();
          setting.sinZR = Math.random() < 0.5 ? 1 : -1;
          setting.rangeX = Math.random() * 5;
          setting.rangeY = Math.random() * 5;
          setting.rangeZ = Math.random() * 5;
          setting.vert = vert;
          geom.vertices.push(vert);
          this.dustSettings.push(setting);
        }
        particlesystem = new THREE.ParticleSystem(geom, mat);
        this.excludeFromDOF.push(particlesystem);
        this.dustSystems.push(particlesystem);
        this.scene.add(particlesystem);
      }
      return null;
    };

    Carnival2.prototype.initGUI = function(settings) {
      Carnival2.__super__.initGUI.call(this, settings);
      this.gui.add({
        value: -2.5
      }, 'value', -5, 20).name('Fresnel Power').onChange(this.materialManager.changeFresnelPower);
      this.gui.add({
        value: 1.0
      }, 'value', 0, 10).name('Normal Scale').onChange(this.materialManager.changeNormalScale);
      if (this.windGenerator != null) {
        this.gui.add({
          value: this.windGenerator.enabled
        }, 'value').name('Enable Wind').onChange(this.onWindEnabledChange);
      }
      this.gui.add(this.mouseInteraction, "constantSpeed").name("Use Constant Speed");
      this.gui.add(this.mouseInteraction, "maxspeed", 0, 2).name("Maximum slide speed");
      this.gui.add(this.mouseInteraction, "maxYLookDeviation", 0, 100).name("Maximum Y Look");
      this.gui.add(this.mouseInteraction, "maxXLookDeviation", 0, 100).name("Maximum X Look");
      this.gui.add({
        value: false
      }, "value").name("Show Camera Paths").onChange(this.onShowDebugPathChange);
      this.gui.add(this.controls, "enabled").name("Exit Camera Path");
      return null;
    };

    Carnival2.prototype.onWindEnabledChange = function(value) {
      var val, _ref;
      val = value == null ? false : ((value != null) && value === true ? true : false);
      this.materialManager.vertexColorsEnabled(val);
      if ((_ref = this.windGenerator) != null) {
        _ref.enabled = val;
      }
      this.loader.geometryAttributeEnabled("color", val);
      return null;
    };

    Carnival2.prototype.onShowDebugPathChange = function(value) {
      if (value) {
        this.scene.add(this.debugPaths);
      } else {
        this.scene.remove(this.debugPaths);
      }
      return null;
    };

    Carnival2.prototype.createDebugPath = function(arr) {
      var dMesh, index, linegeom, linerenderable, point, root, _i, _len;
      root = new THREE.Object3D;
      linegeom = new THREE.Geometry;
      linerenderable = new THREE.Line(linegeom);
      root.add(linerenderable);
      for (index = _i = 0, _len = arr.length; _i < _len; index = ++_i) {
        point = arr[index];
        dMesh = new THREE.Mesh(new THREE.SphereGeometry(.1, 3, 2), new THREE.MeshBasicMaterial({
          wireframe: true,
          color: 0xFF0000,
          lights: false
        }));
        dMesh.name = "debugPathNode_" + index;
        dMesh.position.copy(point);
        root.add(dMesh);
        linegeom.vertices.push(point);
      }
      this.debugPaths.add(root);
      return null;
    };

    Carnival2.prototype.initSun = function() {
      var flare, flareSprite, mainSprite, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      mainSprite = this.materialManager.getPreloadedTexture(this.settings.sun.mainSprite);
      flareSprite = this.materialManager.getPreloadedTexture(this.settings.sun.flareSprite);
      this.materialManager.texLib.push(mainSprite);
      this.materialManager.texLib.push(flareSprite);
      this.lensFlare = new THREE.LensFlare(mainSprite, this.settings.sun.size, 0.0, THREE.AdditiveBlending, new THREE.Color(0xFFFFFF));
      this.lensFlare.position.set(this.settings.sun.position[0], this.settings.sun.position[1], this.settings.sun.position[2]);
      _ref = this.settings.sun.flares;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        flare = _ref[_i];
        this.lensFlare.add(flareSprite, flare[0], flare[1], THREE.AdditiveBlending);
      }
      _ref1 = this.lensFlare.lensFlares;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        flare = _ref1[_j];
        flare.originalSize = flare.size;
      }
      this.lensFlare.customUpdateCallback = function(object) {
        var vecX, vecY, _k, _len2, _ref2;
        vecX = -object.positionScreen.x * 2;
        vecY = -object.positionScreen.y * 2;
        _ref2 = object.lensFlares;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          flare = _ref2[_k];
          flare.x = object.positionScreen.x + vecX * flare.distance;
          flare.y = object.positionScreen.y + vecY * flare.distance;
          flare.rotation = 0;
        }
        object.lensFlares[2].y += 0.025;
        return object.lensFlares[3].rotation = object.positionScreen.x * 0.5 + 45 * Math.PI / 180;
      };
      this.scene.add(this.lensFlare);
      return null;
    };

    Carnival2.prototype.onEnterFrame = function() {
      var _ref;
      if (!this.enableRender) {
        return;
      }
      Carnival2.__super__.onEnterFrame.apply(this, arguments);
      this.updateInitialSettings();
      this.mouseOverObjects = this.checkPicking();
      this.handlePointer();
      this.handleAnimatedSprites();
      this.hotspotManager.update(this.delta);
      this.moveDust();
      this.handleMultiCamera();
      this.renderer.clear();
      if ((_ref = this.windGenerator) != null) {
        _ref.update(this.renderer, this.delta);
      }
      this.updateOcclusionScene();
      this.doRender();
      if (this.capturer) {
        this.capturer.capture(this.oz().appView.renderCanvas3D);
      }
      return null;
    };

    Carnival2.prototype.handleMultiCamera = function() {
      if (!this.isGoingToInteractive) {
        if (((this.controls == null) || ((this.controls != null) && !this.controls.enabled)) && this.enableMouse) {
          this.camera.matrixAutoUpdate = false;
          return this.mouseInteraction.update(this.delta, this.mouseX, this.mouseY);
        } else {
          return this.camera.matrixAutoUpdate = true;
        }
      } else {
        return this.camera.matrixAutoUpdate = false;
      }
    };

    Carnival2.prototype.updateInitialSettings = function() {
      if (this.windinitialSettings == null) {
        this.windinitialSettings = 0;
      }
      if (this.windinitialSettings === 2) {
        if (this.windGenerator != null) {
          this.onWindEnabledChange(this.windGenerator.enabled);
        }
        this.windinitialSettings++;
      } else {
        this.windinitialSettings++;
      }
      return null;
    };

    Carnival2.prototype.moveDust = function() {
      var obj, setting, vert, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.dustSettings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        setting = _ref[_i];
        vert = setting.vert;
        setting.sinX = setting.sinX + ((0.002 * setting.speed) * setting.sinXR);
        setting.sinY = setting.sinY + ((0.002 * setting.speed) * setting.sinYR);
        setting.sinZ = setting.sinZ + ((0.002 * setting.speed) * setting.sinZR);
        vert.x = setting.startX + (Math.sin(setting.sinX) * setting.rangeX);
        vert.y = setting.startY + (Math.sin(setting.sinY) * setting.rangeY);
        vert.z = setting.startZ + (Math.sin(setting.sinZ) * setting.rangeZ);
      }
      _ref1 = this.dustSystems;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        obj = _ref1[_j];
        obj.material.uniforms.time.value += this.delta;
        obj.geometry.verticesNeedUpdate = true;
      }
      return false;
    };

    Carnival2.prototype.updateOcclusionScene = function() {
      var fluct, proj, screenSpacePosition;
      if (this.occlusionScene != null) {
        if (this.mouseInteraction.currentIndex > 50 || this.currentView !== null) {
          this.light2.updateMatrixWorld();
          screenSpacePosition = this.light2.position.clone();
          proj = this.projector.projectVector(screenSpacePosition, this.camera);
          proj.x = (1 + proj.x) / 2;
          proj.y = (1 + proj.y) / 2;
          this.colorCorrection.uniforms.volumetricLightX.value = proj.x;
          this.colorCorrection.uniforms.volumetricLightY.value = proj.y;
          this.occlusion_hblur.uniforms.r.value = -1;
          this.occlusion_vblur.uniforms.r.value = -1;
          fluct = (1 + Math.sin(this.clock.oldTime / 700)) / 2;
          this.light2.scale.x = this.light2.scale.z = 0.9 + (fluct * 0.1);
          this.colorCorrection.uniforms.enableVolumetricLight.value = 1;
          this.renderer.clearTarget(this.occlusionBuffer, true);
          this.occlusionComposer.render();
        } else {
          this.colorCorrection.uniforms.enableVolumetricLight.value = 0;
        }
      }
      return null;
    };

    Carnival2.prototype.updateFilmTexture = function(texture) {
      if (texture != null) {
        this.oz().appView.zoetropeTexture = texture;
      }
      if (this.projectionmat) {
        this.user_projection_tex = new THREE.Texture(texture);
        this.user_projection_tex.flipY = false;
        this.user_projection_tex.needsUpdate = true;
        if (this.projectionmat.uniforms != null) {
          this.projectionmat.uniforms["map"].value = this.user_projection_tex;
        }
        this.projectionmat.map = this.user_projection_tex;
      }
      return this;
    };

    Carnival2.prototype.changeView = function(view) {
      var beforeInteractiveLookat, beforeInteractivePosition, index,
        _this = this;
      if (view === this.currentView) {
        return;
      }
      this.currentView = view;
      if (view === null) {
        this.resume();
        this.onEnterFrame();
        this.hotspotManager.hotspotsAlpha(1);
        index = this.mouseInteraction.findNearestPathPoint();
        beforeInteractivePosition = this.mouseInteraction.cameraPositionPoints[index].clone();
        beforeInteractiveLookat = this.mouseInteraction.cameraLookatPoints[index].clone();
        this.mouseInteraction.currentIndex = index;
        this.mouseInteraction.currentProgress = 0.5;
        this.mouseInteraction.lookDeviationX._value = 0;
        this.mouseInteraction.lookDeviationY._value = 0;
        this.mouseInteraction.bobSpeed._value = 0;
        this.hotspotManager.interactiveCameraTween(this.mouseInteraction.currentLookAt, beforeInteractivePosition, beforeInteractiveLookat, 35, 1500).onComplete(function() {
          _this.isGoingToInteractive = false;
          return _this.nearPoint = null;
        });
        this.hotspotManager.clickedHotspot = null;
        return;
      }
      if (this.hotspotManager.clickedHotspot === this.currentView) {
        if (this.hotspotManager.zoomInHotspot(view, this.onCameraReady, this.mouseInteraction)) {
          this.isGoingToInteractive = true;
        }
      } else {
        if (!this.gotoPositionOnPath(view)) {
          this.oz().router.navigateTo(view);
        }
      }
      return this;
    };

    Carnival2.prototype.onTouchEnd = function(event) {
      Carnival2.__super__.onTouchEnd.apply(this, arguments);
      this.mouseX = this.mouseY = 0;
      return this.onMouseUp(event);
    };

    Carnival2.prototype.onTouchStart = function(event) {
      Carnival2.__super__.onTouchStart.apply(this, arguments);
      return this.onMouseDown(event);
    };

    Carnival2.prototype.onMouseDown = function(event) {
      Carnival2.__super__.onMouseDown.call(this);
      if (!this.enableMouse) {
        return;
      }
      if ((this.controls != null) && this.controls.enabled) {
        return;
      }
      this.mouseDownPoint.set(this.mouseX, this.mouseY);
      this.mouseDownObjects = this.checkPicking();
      return this;
    };

    Carnival2.prototype.onMouseUp = function(event) {
      var elem, h, mouseUpOzific, mousedownozific, obj, ozificable, _i, _len, _ref;
      Carnival2.__super__.onMouseUp.call(this);
      if (!this.enableMouse) {
        return;
      }
      if ((this.controls != null) && this.controls.enabled) {
        return;
      }
      this.mouseUpPoint.set(this.mouseX, this.mouseY);
      this.mouseUpObjects = this.checkPicking();
      if (this.hotspotManager.handleMouseUp(this.mouseUpObjects, this.mouseDownObjects)) {
        if (this.currentView === this.hotspotManager.clickedHotspot) {
          this.oz().router.navigateTo(this.currentView);
          if (this.hotspotManager.zoomInHotspot(this.currentView, this.onCameraReady, this.mouseInteraction)) {
            this.isGoingToInteractive = true;
          }
        } else {
          h = "";
          switch (this.hotspotManager.clickedHotspot.toLowerCase()) {
            case "music":
              h = "carnival";
              this.oz().router.navigateTo(h, false);
              break;
            case "storm":
              h = "carnival3";
              this.oz().router.navigateTo(h, false);
              break;
            default:
              h = this.hotspotManager.clickedHotspot;
              this.oz().router.navigateTo(h);
          }
        }
      }
      if (this.settings != null) {
        for (ozificable in this.settings.ozificables) {
          mouseUpOzific = this.mouseUpObjects[ozificable] != null ? this.mouseUpObjects[ozificable] : false;
          mousedownozific = this.mouseDownObjects[ozificable] != null ? this.mouseDownObjects[ozificable] : false;
          if (mousedownozific !== false && mouseUpOzific !== false && this.hotspotManager.is3DMouseClick(mousedownozific, mouseUpOzific)) {
            obj = this.settings.ozificables[ozificable];
            _ref = this.sceneDescendants;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              elem = _ref[_i];
              if (!(elem.name === obj.target)) {
                continue;
              }
              if (elem.ozified !== true) {
                SoundController.send("ozzification_on");
                new TWEEN.Tween(elem.material.uniforms["lightmapBlend"]).to({
                  value: 1
                }, 2000).start();
                new IFLOzifyParticleSystem(mousedownozific.object, this.scene, this.APP_HEIGHT);
                elem.ozified = true;
              } else if (elem.ozified === true) {
                SoundController.send("ozzification_off");
                new TWEEN.Tween(elem.material.uniforms["lightmapBlend"]).to({
                  value: 0
                }, 2000).start();
                elem.ozified = false;
              }
              break;
            }
            break;
          }
        }
      }
      return this;
    };

    Carnival2.prototype.onResize = function() {
      var mat, _i, _len, _ref, _ref1;
      Carnival2.__super__.onResize.apply(this, arguments);
      this.mouseInteraction.handleResize(this.APP_WIDTH, this.APP_HEIGHT);
      if (this.materialManager && this.materialManager.matLib) {
        _ref = this.materialManager.matLib;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mat = _ref[_i];
          if (((_ref1 = mat.uniforms) != null ? _ref1.scale : void 0) != null) {
            mat.uniforms.scale.value = (this.APP_HEIGHT / 2) * this.renderResolutionMultiplier;
          }
        }
      }
      return this;
    };

    Carnival2.prototype.dispose = function() {
      var obj, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.enableRender = false;
      if ((_ref = this.materialManager) != null) {
        _ref.dispose(this.renderer);
      }
      delete this.materialManager;
      if ((_ref1 = this.loader) != null) {
        _ref1.dispose();
      }
      delete this.loader;
      if ((_ref2 = this.windGenerator) != null) {
        _ref2.dispose(this.renderer);
      }
      delete this.windGenerator;
      if ((_ref3 = this.hotspotManager) != null) {
        _ref3.dispose();
      }
      delete this.hotspotManager;
      _ref4 = this.scene.children;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        obj = _ref4[_i];
        this.scene.remove(obj);
      }
      this.scene.__webglObjects = null;
      this.scene.__objects = null;
      this.scene.__objectsRemoved = null;
      this.scene.children = [];
      _ref5 = this.occlusionScene.children;
      for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
        obj = _ref5[_j];
        this.occlusionScene.remove(obj);
      }
      this.occlusionScene.__webglObjects = null;
      this.occlusionScene.__objects = null;
      this.occlusionScene.__objectsRemoved = null;
      this.occlusionScene.children = [];
      this.dustSystems = null;
      this.animatedSprites = null;
      Carnival2.__super__.dispose.apply(this, arguments);
      return this;
    };

    return Carnival2;

  })(Base3DChapter);

  Carnival3 = (function(_super) {

    __extends(Carnival3, _super);

    function Carnival3() {
      this.dispose = __bind(this.dispose, this);
      this.onResize = __bind(this.onResize, this);
      this.onMouseUp = __bind(this.onMouseUp, this);
      this.onMouseDown = __bind(this.onMouseDown, this);
      this.onTouchStart = __bind(this.onTouchStart, this);
      this.onTouchEnd = __bind(this.onTouchEnd, this);
      this.changeView = __bind(this.changeView, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.onShowDebugPathChange = __bind(this.onShowDebugPathChange, this);
      this.onWindEnabledChange = __bind(this.onWindEnabledChange, this);
      this.instanceWorld = __bind(this.instanceWorld, this);
      this.advanceLoading = __bind(this.advanceLoading, this);
      this.show = __bind(this.show, this);
      this.onSceneLoaded = __bind(this.onSceneLoaded, this);
      this.onSceneProgress = __bind(this.onSceneProgress, this);
      this.onTextureComplete = __bind(this.onTextureComplete, this);
      this.onTextureProgress = __bind(this.onTextureProgress, this);
      this.onSettingsLoaded = __bind(this.onSettingsLoaded, this);
      this.render = __bind(this.render, this);      return Carnival3.__super__.constructor.apply(this, arguments);
    }

    Carnival3.prototype.settings = null;

    Carnival3.prototype.loadedScene = null;

    Carnival3.prototype.mouseInteraction = null;

    Carnival3.prototype.hotspotManager = null;

    Carnival3.prototype.materialManager = null;

    Carnival3.prototype.enableRender = false;

    Carnival3.prototype.debugPaths = null;

    Carnival3.prototype.mouseDownObjects = null;

    Carnival3.prototype.mouseUpObjects = null;

    Carnival3.prototype.mouseOverObjects = null;

    Carnival3.prototype.lastMouseX = 0;

    Carnival3.prototype.lastMouseY = 0;

    Carnival3.prototype.mouseDownPoint = null;

    Carnival3.prototype.mouseUpPoint = null;

    Carnival3.prototype.isGoingToInteractive = false;

    Carnival3.prototype.currentView = null;

    Carnival3.prototype.currentCutout = null;

    Carnival3.prototype.dustSystems = null;

    Carnival3.prototype.dustSystemMinX = -100;

    Carnival3.prototype.dustSystemMaxX = 400;

    Carnival3.prototype.dustSystemMinY = 0;

    Carnival3.prototype.dustSystemMaxY = 100;

    Carnival3.prototype.dustSystemMinZ = -200;

    Carnival3.prototype.dustSystemMaxZ = 30;

    Carnival3.prototype.windGenerator = null;

    Carnival3.prototype.audiolistener = null;

    Carnival3.prototype.animatedSprites = null;

    Carnival3.prototype.nearPoint = null;

    Carnival3.prototype.pickVector = null;

    Carnival3.prototype.pickRay = null;

    Carnival3.prototype.sceneDescendants = null;

    Carnival3.prototype.sceneLoadedPerc = 0;

    Carnival3.prototype.sceneLoaded = false;

    Carnival3.prototype.textureLoadedPerc = 0;

    Carnival3.prototype.textureLoaded = false;

    Carnival3.prototype.loadingDone = false;

    Carnival3.prototype.init = function() {
      Carnival3.__super__.init.apply(this, arguments);
      IFLModelManager.getInstance().cacheTextures(this.oz().appView.enablePrefetching);
      IFLModelManager.getInstance().prefetchEnabled = this.oz().appView.enablePrefetching;
      this.mouseUpPoint = new THREE.Vector2();
      this.mouseDownPoint = new THREE.Vector2();
      this.pickVector = new THREE.Vector3;
      this.pickRay = new THREE.Ray;
      this.animatedSprites = [];
      this.dustSystems = [];
      this.mouseDownObjects = [];
      this.mouseUpObjects = [];
      this.mouseOverObjects = [];
      this.renderer.gammaInput = false;
      this.renderer.gammaOutput = false;
      this.renderer.sortObjects = false;
      this.renderer.shadowMapEnabled = false;
      this.renderer.shadowMapSoft = false;
      this.camera.position.x = 100;
      this.camera.position.y = 100;
      this.camera.position.z = 100;
      this.camera.fov = 35;
      this.camera.near = 1;
      this.camera.far = 5000;
      this.camera.target = new THREE.Vector3(0, 0, 0);
      this.mouseInteraction = new IFLCameraPathInteraction(this.camera);
      this.mouseInteraction.maxXLookDeviation = 40;
      if (SoundController.active) {
        this.audiolistener = new THREE.AudioListenerObject(this.camera);
        this.audiolistener.position.set(0, 150, 400);
        this.scene.add(this.audiolistener);
      }
      if (this.oz().appView.debugMode) {
        this.controls = new THREE.FirstPersonControls(this.camera, this.oz().appView.wrapper.el);
        this.controls.movementSpeed = 20;
        this.controls.lookSpeed = 0.005 * 5;
        this.controls.enabled = false;
      }
      this.materialManager = new IFLMaterialManager;
      this.hotspotManager = new IFLHotspotManager;
      this.params.cameraFOV = this.camera.fov;
      this.params.fogcolor = "#180f20";
      this.scene.fog.far = 757;
      this.scene.fog.near = 0;
      this.scene.fog.color.copy(this.stringToColor(this.params.fogcolor));
      this.params.colorCorrectionPow = "#443f72";
      this.params.colorCorrectionPowM = 2;
      this.params.colorCorrectionMul = "#989898";
      this.params.colorCorrectionMulM = 1.7;
      this.params.colorCorrectionSaturation = -34;
      this.params.colorCorrectionSaturationColors = "#162c46";
      this.dofpost.focus = this.dofpost.bokeh_uniforms["focus"].value = 0.97;
      this.dofpost.aperture = this.dofpost.bokeh_uniforms["aperture"].value = 0.009;
      this.dofpost.maxblur = this.dofpost.bokeh_uniforms["maxblur"].value = 0.007;
      this.dofpost.cameranear = 0.001;
      this.dofpost.camerafar = 956;
      this.params.bloomPower = this.effectBloom.screenUniforms.opacity.value = 0.19;
      this.effectBloom.enabled = true;
      this.debugPaths = new THREE.Object3D;
      if (this.renderer.supportsVertexTextures()) {
        this.windGenerator = new IFLWindGenerator();
        this.windGenerator.noiseSpeed = 0.09;
        this.windGenerator.enabled = this.oz().appView.displayQuality !== "low" ? true : false;
      }
      this.colorCorrection.uniforms.vignetteOffset.value = 0.2;
      this.colorCorrection.uniforms.vignetteDarkness.value = 1;
      if (this.oz().appView.debugMode) {
        this.initGUI();
      }
      this.onColorCorrectionChange();
      this.autoPerformance.steps.push({
        name: "Wind",
        enabled: this.windGenerator != null ? this.windGenerator.enabled : false,
        priority: 50,
        disableFunc: this.onWindEnabledChange
      });
      this.onResize();
      this.lastMouseY = this.mouseY + this.APP_HALF_Y;
      this.lastMouseX = this.mouseX + this.APP_HALF_X;
      return this;
    };

    Carnival3.prototype.render = function() {
      Carnival3.__super__.render.apply(this, arguments);
      $.ajax({
        url: "/models/s003_settings.json",
        dataType: 'json',
        success: this.onSettingsLoaded
      });
      return null;
    };

    Carnival3.prototype.onSettingsLoaded = function(settings) {
      var i, _i, _j, _ref, _ref1;
      this.settings = settings;
      for (i = _i = 0, _ref = settings.positions.length; _i < _ref; i = _i += 3) {
        this.mouseInteraction.cameraPositionPoints.push(new THREE.Vector3(settings.positions[i], settings.positions[i + 1], settings.positions[i + 2]));
      }
      for (i = _j = 0, _ref1 = settings.lookAt.length; _j < _ref1; i = _j += 3) {
        this.mouseInteraction.cameraLookatPoints.push(new THREE.Vector3(settings.lookAt[i], settings.lookAt[i + 1], settings.lookAt[i + 2]));
      }
      if (this.oz().appView.debugMode) {
        this.createDebugPath(this.mouseInteraction.cameraPositionPoints);
        this.createDebugPath(this.mouseInteraction.cameraLookatPoints);
      }
      settings.renderer = this.renderer;
      settings.onProgress = this.onTextureProgress;
      settings.onComplete = this.onTextureComplete;
      settings.textureQuality = this.oz().appView.ddsSupported ? this.oz().appView.textureQuality : "low";
      this.materialManager.enableTextureFiltering = THREE.WebGLRenderer.AnisotropySupported || (QueryString.get("anisotropy") === "off");
      this.materialManager.forcePNGTextures = !this.oz().appView.ddsSupported || !THREE.WebGLRenderer.AnisotropySupported;
      this.materialManager.init(settings);
      this.materialManager.load();
      IFLModelManager.getInstance().load(this.settings.pickables, this.materialManager.instanceMaterial, this.settings.modelURL, this.onSceneLoaded, this.onSceneProgress);
      return null;
    };

    Carnival3.prototype.onTextureProgress = function(percent) {
      this.textureLoadedPerc = percent;
      this.advanceLoading();
      return this;
    };

    Carnival3.prototype.onTextureComplete = function() {
      this.textureLoaded = true;
      this.advanceLoading();
      return this;
    };

    Carnival3.prototype.onSceneProgress = function(loaded, total) {
      this.sceneLoadedPerc = loaded / total;
      this.advanceLoading();
      return this;
    };

    Carnival3.prototype.onSceneLoaded = function(loader, loadedScene) {
      SoundController.send('load_scene_3', 'scene_carnival3_start');
      this.sceneLoaded = true;
      this.loader = loader;
      this.advanceLoading();
      return this;
    };

    Carnival3.prototype.show = function() {
      this.instanceWorld();
      this.oz().appView.showMenu();
      return Carnival3.__super__.show.apply(this, arguments);
    };

    Carnival3.prototype.advanceLoading = function() {
      var total;
      total = this.sceneLoadedPerc * 0.5 + this.textureLoadedPerc * 0.5;
      this.onWorldProgress(total);
      if (this.textureLoaded === true && this.sceneLoaded === true && !this.loadingDone) {
        this.loadingDone = true;
        this.onWorldProgress(1);
        return this.onWorldLoaded();
      }
    };

    Carnival3.prototype.instanceWorld = function() {
      var blacklist, blacklisted, cfm, customFrustumPos, customFrustumRad, desc, dofblacklist, dofblacklisted, elem, foundObj, isBlacklisted, object, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _results;
      this.loadedScene = this.loader.createModel(true);
      desc = this.loadedScene.getDescendants();
      blacklist = ["grass", "branch"];
      dofblacklist = ["grass", "branch"];
      for (_i = 0, _len = desc.length; _i < _len; _i++) {
        elem = desc[_i];
        if ((((_ref = elem.material) != null ? (_ref1 = _ref.uniforms) != null ? _ref1.tWindForce : void 0 : void 0) != null) && elem.material.vertexColors === THREE.VertexColors && (this.windGenerator != null)) {
          elem.material.uniforms.tWindForce.value = this.windGenerator.noiseMap;
          elem.material.uniforms.windDirection.value.copy(this.windGenerator.windDirection);
        }
        foundObj = null;
        if (this.settings.customBounds != null) {
          for (cfm in this.settings.customBounds) {
            if (elem.name.toLowerCase().indexOf(cfm) !== -1) {
              foundObj = this.settings.customBounds[cfm];
              break;
            }
          }
          if (foundObj != null) {
            customFrustumPos = foundObj.position;
            customFrustumRad = foundObj.radius;
            elem.customFrustumMatrix = new THREE.Matrix4;
            elem.customFrustumMatrix.setPosition(new THREE.Vector3(customFrustumPos[0], customFrustumPos[1], customFrustumPos[2]));
            elem.geometry.boundingSphere.radius = customFrustumRad;
          }
        }
        if (this.oz().appView.displayQuality !== "hi") {
          isBlacklisted = false;
          for (_j = 0, _len1 = blacklist.length; _j < _len1; _j++) {
            blacklisted = blacklist[_j];
            if (elem.name.toLowerCase().indexOf(blacklisted.toLowerCase()) !== -1) {
              isBlacklisted = true;
              break;
            }
          }
          if (!isBlacklisted) {
            this.scene.add(elem);
          }
        } else {
          this.scene.add(elem);
        }
        for (_k = 0, _len2 = dofblacklist.length; _k < _len2; _k++) {
          dofblacklisted = dofblacklist[_k];
          if (elem.name.toLowerCase().indexOf(dofblacklisted.toLowerCase()) !== -1) {
            this.excludeFromDOF.push(elem);
            break;
          }
        }
      }
      this.initTornado();
      this.initSun();
      if (this.oz().appView.showInterface) {
        this.hotspotManager.init(this.settings, this.scene, this.materialManager, this.oz().localeTexture, this.camera);
      }
      this.initDustSystems();
      this.enableRender = true;
      this.onResize();
      this.sceneDescendants = this.scene.getDescendants();
      this.pickableObjects = [];
      _ref2 = this.sceneDescendants;
      _results = [];
      for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
        object = _ref2[_l];
        if (object.pickable === true) {
          _results.push(this.pickableObjects.push(object));
        }
      }
      return _results;
    };

    Carnival3.prototype.initTornado = function() {
      var geom, tornadoSize, vertex, _i, _len, _ref;
      this.tornadomaterial = new THREE.MeshBasicMaterial({
        lights: false,
        transparent: true,
        map: this.materialManager.getPreloadedTexture("storm_animation.dds"),
        side: THREE.DoubleSide,
        fog: false
      });
      this.tornadomaterial.map.wrapS = this.tornadomaterial.map.wrapT = THREE.RepeatWrapping;
      this.tornadomaterial.map.flipY = false;
      this.tornadomaterial.time = 0;
      this.tornadomaterial.spritenum = 0;
      this.tornadomaterial.totalframes = 16;
      this.tornadomaterial.spritex = 4;
      this.tornadomaterial.spritey = 4;
      this.tornadomaterial.frametime = 0.01;
      this.materialManager.matLib.push(this.tornadomaterial);
      this.materialManager.texLib.push(this.tornadomaterial.map);
      tornadoSize = 940;
      geom = new THREE.PlaneGeometry(tornadoSize, tornadoSize, 10, 10);
      this.tornado = new THREE.Mesh(geom, this.tornadomaterial);
      this.excludeFromDOF.push(this.tornado);
      this.tornado.name = "tornado_animated";
      this.tornado.tornadoSize = tornadoSize;
      this.tornado.position.set(835, 470, -4100);
      this.animatedSprites.push(this.tornado);
      this.materialManager.texLib.push(this.tornadomaterial.map);
      this.materialManager.matLib.push(this.tornadomaterial);
      _ref = geom.vertices;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vertex = _ref[_i];
        vertex.y = -vertex.y;
        vertex.origX = vertex.x;
        vertex.origY = vertex.y;
        vertex.origZ = vertex.z;
      }
      return this.scene.add(this.tornado);
    };

    Carnival3.prototype.initDustSystems = function() {
      var geom, i, k, mat, num, params, particlesystem, shader, vert, _i, _j;
      for (i = _i = 0; _i < 5; i = ++_i) {
        shader = new IFLWindyParticlesShader();
        params = {};
        params.fragmentShader = shader.fragmentShader;
        params.vertexShader = shader.vertexShader;
        params.uniforms = shader.uniforms;
        params.attributes = {
          speed: {
            type: 'f',
            value: []
          }
        };
        mat = new THREE.ShaderMaterial(params);
        mat.map = shader.uniforms["map"].value = this.materialManager.getPreloadedTexture("/models/textures/particles/dust" + i + ".dds");
        mat.size = shader.uniforms["size"].value = Math.random();
        mat.scale = shader.uniforms["scale"].value = this.APP_HEIGHT / 2;
        mat.transparent = true;
        mat.sizeAttenuation = true;
        mat.blending = THREE.AdditiveBlending;
        this.materialManager.matLib.push(mat);
        this.materialManager.texLib.push(mat.map);
        if (this.windGenerator != null) {
          shader.uniforms["tWindForce"].value = this.windGenerator.noiseMap;
        }
        geom = new THREE.Geometry();
        geom.vertices = [];
        num = this.oz().appView.displayQuality !== "low" ? 300 : 150;
        for (k = _j = 0; 0 <= num ? _j < num : _j > num; k = 0 <= num ? ++_j : --_j) {
          vert = new THREE.Vector3;
          vert.x = vert.startX = this.randRange(this.dustSystemMinX, this.dustSystemMaxX);
          vert.y = vert.startY = this.randRange(this.dustSystemMinY, this.dustSystemMaxY);
          vert.z = vert.startZ = this.randRange(this.dustSystemMinZ, this.dustSystemMaxZ);
          vert.speed = 1 + Math.random() * 10;
          params.attributes.speed.value[k] = vert.speed;
          vert.sinX = Math.random();
          vert.sinXR = Math.random() < 0.5 ? 1 : -1;
          vert.sinY = Math.random();
          vert.sinYR = Math.random() < 0.5 ? 1 : -1;
          vert.sinZ = Math.random();
          vert.sinZR = Math.random() < 0.5 ? 1 : -1;
          vert.rangeX = Math.random() * 5;
          vert.rangeY = Math.random() * 5;
          vert.rangeZ = Math.random() * 5;
          geom.vertices.push(vert);
        }
        particlesystem = new THREE.ParticleSystem(geom, mat);
        this.excludeFromDOF.push(particlesystem);
        this.dustSystems.push(particlesystem);
        this.scene.add(particlesystem);
      }
      return this;
    };

    Carnival3.prototype.initGUI = function(settings) {
      Carnival3.__super__.initGUI.call(this, settings);
      this.gui.add({
        value: -2.5
      }, 'value', -5, 20).name('Fresnel Power').onChange(this.materialManager.changeFresnelPower);
      this.gui.add({
        value: 1.0
      }, 'value', 0, 10).name('Normal Scale').onChange(this.materialManager.changeNormalScale);
      if (this.windGenerator != null) {
        this.gui.add({
          value: this.windGenerator.enabled
        }, 'value').name('Enable Wind').onChange(this.onWindEnabledChange);
      }
      this.gui.add(this.mouseInteraction, "constantSpeed").name("Use Constant Speed");
      this.gui.add(this.mouseInteraction, "maxspeed", 0, 2).name("Maximum slide speed");
      this.gui.add(this.mouseInteraction, "maxYLookDeviation", 0, 100).name("Maximum Y Look");
      this.gui.add(this.mouseInteraction, "maxXLookDeviation", 0, 100).name("Maximum X Look");
      this.gui.add({
        value: false
      }, "value").name("Show Camera Paths").onChange(this.onShowDebugPathChange);
      this.gui.add(this.controls, "enabled").name("Exit Camera Path");
      return this;
    };

    Carnival3.prototype.onWindEnabledChange = function(value) {
      var val, _ref;
      val = value == null ? false : ((value != null) && value === true ? true : false);
      this.materialManager.vertexColorsEnabled(val);
      if ((_ref = this.windGenerator) != null) {
        _ref.enabled = val;
      }
      return this.loader.geometryAttributeEnabled("color", val);
    };

    Carnival3.prototype.onShowDebugPathChange = function(value) {
      if (value) {
        this.scene.add(this.debugPaths);
      } else {
        this.scene.remove(this.debugPaths);
      }
      return this;
    };

    Carnival3.prototype.createDebugPath = function(arr) {
      var dMesh, index, linegeom, linerenderable, point, root, _i, _len;
      root = new THREE.Object3D;
      linegeom = new THREE.Geometry;
      linerenderable = new THREE.Line(linegeom);
      root.add(linerenderable);
      for (index = _i = 0, _len = arr.length; _i < _len; index = ++_i) {
        point = arr[index];
        dMesh = new THREE.Mesh(new THREE.SphereGeometry(.1, 3, 2), new THREE.MeshBasicMaterial({
          wireframe: true,
          color: 0xFF0000,
          lights: false
        }));
        dMesh.name = "debugPathNode_" + index;
        dMesh.position.copy(point);
        root.add(dMesh);
        linegeom.vertices.push(point);
      }
      this.debugPaths.add(root);
      return this;
    };

    Carnival3.prototype.initSun = function() {
      var flare, flareSprite, mainSprite, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      mainSprite = this.materialManager.getPreloadedTexture(this.settings.sun.mainSprite);
      flareSprite = this.materialManager.getPreloadedTexture(this.settings.sun.flareSprite);
      this.materialManager.texLib.push(mainSprite);
      this.materialManager.texLib.push(flareSprite);
      this.lensFlare = new THREE.LensFlare(mainSprite, this.settings.sun.size, 0.0, THREE.AdditiveBlending, new THREE.Color(0xFFFFFF));
      this.lensFlare.position.set(this.settings.sun.position[0], this.settings.sun.position[1], this.settings.sun.position[2]);
      _ref = this.settings.sun.flares;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        flare = _ref[_i];
        this.lensFlare.add(flareSprite, flare[0], flare[1], THREE.AdditiveBlending);
      }
      _ref1 = this.lensFlare.lensFlares;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        flare = _ref1[_j];
        flare.originalSize = flare.size;
      }
      this.lensFlare.customUpdateCallback = function(object) {
        var vecX, vecY, _k, _len2, _ref2;
        vecX = -object.positionScreen.x * 2;
        vecY = -object.positionScreen.y * 2;
        _ref2 = object.lensFlares;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          flare = _ref2[_k];
          flare.x = object.positionScreen.x + vecX * flare.distance;
          flare.y = object.positionScreen.y + vecY * flare.distance;
          flare.rotation = 0;
        }
        object.lensFlares[2].y += 0.025;
        return object.lensFlares[3].rotation = object.positionScreen.x * 0.5 + 45 * Math.PI / 180;
      };
      this.scene.add(this.lensFlare);
      return this;
    };

    Carnival3.prototype.onEnterFrame = function() {
      var _ref, _ref1, _ref2;
      if (!this.enableRender) {
        return;
      }
      if (this.disposed === true) {
        return;
      }
      Carnival3.__super__.onEnterFrame.apply(this, arguments);
      this.updateInitialSettings();
      this.mouseOverObjects = this.checkPicking();
      this.handlePointer();
      this.handleAnimatedSprites();
      this.moveTornado();
      if ((_ref = this.hotspotManager) != null) {
        _ref.update(this.delta);
      }
      this.moveDust();
      this.handleMultiCamera();
      if ((_ref1 = this.renderer) != null) {
        _ref1.clear();
      }
      if ((_ref2 = this.windGenerator) != null) {
        _ref2.update(this.renderer, this.delta);
      }
      if (this.renderer) {
        this.doRender();
      }
      if (this.capturer) {
        return this.capturer.capture(this.oz().appView.renderCanvas3D);
      }
    };

    Carnival3.prototype.handleMultiCamera = function() {
      var _ref, _ref1, _ref2, _ref3;
      if (!this.isGoingToInteractive) {
        if (((this.controls == null) || ((this.controls != null) && !this.controls.enabled)) && this.enableMouse) {
          if ((_ref = this.camera) != null) {
            _ref.matrixAutoUpdate = false;
          }
          if ((_ref1 = this.mouseInteraction) != null) {
            _ref1.update(this.delta, this.mouseX, this.mouseY);
          }
        } else {
          if ((_ref2 = this.camera) != null) {
            _ref2.matrixAutoUpdate = true;
          }
        }
      } else {
        if ((_ref3 = this.camera) != null) {
          _ref3.matrixAutoUpdate = false;
        }
      }
      return null;
    };

    Carnival3.prototype.updateInitialSettings = function() {
      if (this.windinitialSettings == null) {
        this.windinitialSettings = 0;
      }
      if (this.windinitialSettings === 2) {
        if (this.windGenerator != null) {
          this.onWindEnabledChange(this.windGenerator.enabled);
        }
        this.windinitialSettings++;
      } else {
        this.windinitialSettings++;
      }
      return null;
    };

    Carnival3.prototype.moveDust = function() {
      var obj, vert, _i, _j, _len, _len1, _ref, _ref1;
      if (this.dustSystems) {
        _ref = this.dustSystems;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          obj = _ref[_i];
          obj.material.uniforms.time.value += this.delta;
          _ref1 = obj.geometry.vertices;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            vert = _ref1[_j];
            vert.sinX = vert.sinX + ((0.002 * vert.speed) * vert.sinXR) * 10;
            vert.sinY = vert.sinY + ((0.002 * vert.speed) * vert.sinYR) * 10;
            vert.sinZ = vert.sinZ + ((0.002 * vert.speed) * vert.sinZR) * 10;
            vert.x += this.delta * vert.speed * 5;
            if (vert.x > this.dustSystemMaxX) {
              vert.x = this.randRange(this.dustSystemMinX - 200, this.dustSystemMinX);
            }
            vert.y = vert.startY + (Math.sin(vert.sinY) * vert.rangeY);
            vert.z = vert.startZ + (Math.sin(vert.sinZ) * vert.rangeZ);
          }
          obj.geometry.verticesNeedUpdate = true;
        }
      }
      return null;
    };

    Carnival3.prototype.moveTornado = function() {
      var influence, vertex, _i, _len, _ref;
      if (this.tornado) {
        _ref = this.tornado.geometry.vertices;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          vertex = _ref[_i];
          influence = (this.tornado.tornadoSize / 2) - Math.abs(vertex.origY);
          vertex.x = vertex.origX + Math.sin(this.clock.oldTime / 1500) * (influence / 9);
          vertex.y = vertex.origY + Math.sin(this.clock.oldTime / 2000) * (influence / 7);
        }
        this.tornado.geometry.verticesNeedUpdate = true;
      }
      return null;
    };

    Carnival3.prototype.changeView = function(view) {
      if (!this.gotoPositionOnPath(view)) {
        this.oz().router.navigateTo(view);
      }
      return this;
    };

    Carnival3.prototype.onTouchEnd = function(event) {
      Carnival3.__super__.onTouchEnd.apply(this, arguments);
      this.mouseX = this.mouseY = 0;
      return this.onMouseUp(event);
    };

    Carnival3.prototype.onTouchStart = function(event) {
      Carnival3.__super__.onTouchStart.apply(this, arguments);
      return this.onMouseDown(event);
    };

    Carnival3.prototype.onMouseDown = function(event) {
      Carnival3.__super__.onMouseDown.call(this);
      if (!this.enableMouse) {
        return;
      }
      if ((this.controls != null) && this.controls.enabled) {
        return;
      }
      this.mouseDownPoint.set(this.mouseX, this.mouseY);
      this.mouseDownObjects = this.checkPicking();
      return this;
    };

    Carnival3.prototype.onMouseUp = function(event) {
      var elem, h, mouseUpOzific, mousedownozific, obj, ozificable, targetLookAt, targetPosition, _i, _len, _ref,
        _this = this;
      Carnival3.__super__.onMouseUp.call(this);
      if (!this.enableMouse) {
        return;
      }
      if ((this.controls != null) && this.controls.enabled) {
        return;
      }
      this.mouseUpPoint.set(this.mouseX, this.mouseY);
      this.mouseUpObjects = this.checkPicking();
      if (!((this.mouseUpObjects != null) && (this.mouseDownObjects != null))) {
        return;
      }
      if (this.hotspotManager.handleMouseUp(this.mouseUpObjects, this.mouseDownObjects)) {
        if (this.hotspotManager.clickedHotspot === "storm") {
          this.hotspotManager.hotspotsAlpha(0);
          SoundController.send("storm_zoom_in");
          this.isGoingToInteractive = true;
          targetPosition = new THREE.Vector3(140, 20, -300);
          targetLookAt = new THREE.Vector3(120, 55, -400);
          this.hotspotManager.interactiveCameraTween(this.mouseInteraction.currentLookAt, targetPosition, targetLookAt, 35, 3500).onComplete(function() {
            return _this.oz().router.navigateTo(_this.hotspotManager.clickedHotspot);
          });
          return;
        }
      }
      if (this.hotspotManager.handleMouseUp(this.mouseUpObjects, this.mouseDownObjects)) {
        if (this.currentView === this.hotspotManager.clickedHotspot) {
          this.oz().router.navigateTo(this.currentView);
          if (this.hotspotManager.zoomInHotspot(this.currentView, this.onCameraReady, this.mouseInteraction)) {
            this.isGoingToInteractive = true;
          }
        } else {
          h = "";
          /*
                          TODO: add this case for production
                          when "stormtest"
                              h = "stormtest"
                              @oz().router.navigateTo h, false
          */

          switch (this.hotspotManager.clickedHotspot.toLowerCase()) {
            case "zoetrope":
              h = "carnival2";
              this.oz().router.navigateTo(h, false);
              break;
            default:
              h = this.hotspotManager.clickedHotspot;
              this.oz().router.navigateTo(h);
          }
        }
      }
      if (this.settings != null) {
        for (ozificable in this.settings.ozificables) {
          mouseUpOzific = this.mouseUpObjects[ozificable] != null ? this.mouseUpObjects[ozificable] : false;
          mousedownozific = this.mouseDownObjects[ozificable] != null ? this.mouseDownObjects[ozificable] : false;
          if (mousedownozific !== false && mouseUpOzific !== false && this.hotspotManager.is3DMouseClick(mousedownozific, mouseUpOzific)) {
            obj = this.settings.ozificables[ozificable];
            _ref = this.sceneDescendants;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              elem = _ref[_i];
              if (!(elem.name === obj.target)) {
                continue;
              }
              if (elem.ozified !== true) {
                SoundController.send("ozzification_on");
                new TWEEN.Tween(elem.material.uniforms["lightmapBlend"]).to({
                  value: 1
                }, 2000).start();
                new IFLOzifyParticleSystem(mousedownozific.object, this.scene, this.APP_HEIGHT);
                elem.ozified = true;
              } else if (elem.ozified === true) {
                SoundController.send("ozzification_off");
                new TWEEN.Tween(elem.material.uniforms["lightmapBlend"]).to({
                  value: 0
                }, 2000).start();
                elem.ozified = false;
              }
              break;
            }
            break;
          }
        }
      }
      return this;
    };

    Carnival3.prototype.onResize = function() {
      var mat, _i, _len, _ref, _ref1;
      Carnival3.__super__.onResize.apply(this, arguments);
      this.mouseInteraction.handleResize(this.APP_WIDTH, this.APP_HEIGHT);
      if (this.materialManager && this.materialManager.matLib) {
        _ref = this.materialManager.matLib;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mat = _ref[_i];
          if (((_ref1 = mat.uniforms) != null ? _ref1.scale : void 0) != null) {
            mat.uniforms.scale.value = (this.APP_HEIGHT / 2) * this.renderResolutionMultiplier;
          }
        }
      }
      return this;
    };

    Carnival3.prototype.dispose = function() {
      var obj, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
      this.enableRender = false;
      this.disposed = true;
      if ((_ref = this.materialManager) != null) {
        _ref.dispose(this.renderer);
      }
      delete this.materialManager;
      if ((_ref1 = this.loader) != null) {
        _ref1.dispose();
      }
      delete this.loader;
      if ((_ref2 = this.windGenerator) != null) {
        _ref2.dispose(this.renderer);
      }
      delete this.windGenerator;
      if ((_ref3 = this.hotspotManager) != null) {
        _ref3.dispose();
      }
      delete this.hotspotManager;
      _ref4 = this.scene.children;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        obj = _ref4[_i];
        this.scene.remove(obj);
      }
      this.scene.__webglObjects = null;
      this.scene.__objects = null;
      this.scene.__objectsRemoved = null;
      this.scene.children = [];
      this.dustSystems = null;
      this.animatedSprites = null;
      Carnival3.__super__.dispose.apply(this, arguments);
      return this;
    };

    return Carnival3;

  })(Base3DChapter);

  Final = (function(_super) {

    __extends(Final, _super);

    function Final() {
      this.dispose = __bind(this.dispose, this);
      this.changeView = __bind(this.changeView, this);
      this.onWorldProgress = __bind(this.onWorldProgress, this);
      this.cleanloading = __bind(this.cleanloading, this);
      this.render = __bind(this.render, this);
      this.showVideo = __bind(this.showVideo, this);
      this.resume = __bind(this.resume, this);
      this.pause = __bind(this.pause, this);
      this.videoEnded = __bind(this.videoEnded, this);
      this.playVideo = __bind(this.playVideo, this);
      this.fadeIn = __bind(this.fadeIn, this);
      this.changeState = __bind(this.changeState, this);
      this.init = __bind(this.init, this);      return Final.__super__.constructor.apply(this, arguments);
    }

    Final.prototype.simulate = null;

    Final.prototype.content = null;

    Final.prototype.init = function() {
      this.$el.addClass("final");
      this.oz().appView.showMap(false);
      this.oz().appView.footer.shareMenu.hideSoundButton();
      this.changeState("menu");
      return null;
    };

    Final.prototype.changeState = function(status) {
      var landing,
        _this = this;
      if (this.content) {
        this.content.$el.animate({
          opacity: 0
        }, {
          duration: 800,
          complete: function() {
            _this.remove(_this.content);
            _this.content = null;
            return _this.changeState(status);
          }
        });
        return;
      }
      switch (status) {
        case "transitionVideo":
          this.content = new Abstract().setElement("<div class='video'><video width='320' height='240' src=''></video></div>");
          this.content.dispose = function() {
            return null;
          };
          this.addChild(this.content);
          this.playVideo();
          this.fadeIn();
          break;
        case "menu":
          $(window).unbind("blur", this.looseFocus);
          this.content = new Abstract().setElement("<div class='finalmenu stormImage'><div class='blackOverlay'></div></div>");
          this.content.dispose = function() {
            return null;
          };
          this.addChild(this.content);
          this.content.$el.css({
            opacity: 0
          });
          landing = new LandingFinal("finalHeader", "finalSub");
          this.content.addChild(landing);
          landing.render(this.fadeIn, true);
          this.oz().appView.logo.showGoogleLogos();
          this.oz().appView.footer.showMenu(true);
      }
      return null;
    };

    Final.prototype.fadeIn = function() {
      var _this = this;
      this.content.$el.animate({
        opacity: 1
      }, {
        duration: 800,
        complete: function() {
          return _this.$el.css({
            "background-color": "#000000"
          });
        }
      });
      return null;
    };

    Final.prototype.playVideo = function() {
      var videoElement;
      Analytics.track('transition_start_video', 'Google_OZ_ViewPayoff_Movie_EngagementClick');
      videoElement = this.content.$el.find("video")[0];
      this.content.$el.find("video").attr("src", "/videos/eoe.webm");
      videoElement.load();
      videoElement.play();
      videoElement.addEventListener("ended", this.videoEnded, false);
      return null;
    };

    Final.prototype.videoEnded = function(e) {
      var videoElement;
      Analytics.track('transition_end_video');
      videoElement = this.content.$el.find("video")[0];
      videoElement.removeEventListener("ended", this.videoEnded, false);
      videoElement.src = "";
      this.changeState("menu");
      return null;
    };

    Final.prototype.pause = function() {
      var videoElement;
      Final.__super__.pause.call(this);
      videoElement = this.content.$el.find("video")[0];
      if (videoElement != null) {
        videoElement.pause();
      }
      return null;
    };

    Final.prototype.resume = function() {
      var videoElement;
      Final.__super__.resume.call(this);
      videoElement = this.content.$el.find("video")[0];
      if (videoElement != null) {
        videoElement.play();
      }
      return null;
    };

    Final.prototype.showVideo = function() {
      var trailer,
        _this = this;
      trailer = new VideoPlayer;
      this.oz().appView.wrapper.addChild(trailer, true);
      SoundController.send("trailer_start");
      this.content.hide(true, function() {
        return _this.content.$el.css({
          display: "none"
        });
      });
      trailer.show(true);
      this.oz().appView.logo.hideGoogleLogos();
      this.oz().appView.footer.mainMenu.hide(true);
      this.oz().appView.footer.cr.show(true);
      this.oz().appView.footer.shareMenu.hide(true);
      return null;
    };

    Final.prototype.render = function() {
      var _this = this;
      this.simulate = setInterval(function() {
        return _this.onWorldProgress(1);
      }, 400);
      return null;
    };

    Final.prototype.cleanloading = function() {
      clearInterval(this.simulate);
      return null;
    };

    Final.prototype.onWorldProgress = function(percentage) {
      this.trigger('onWorldProgress', percentage);
      return null;
    };

    Final.prototype.changeView = function() {
      return null;
    };

    Final.prototype.dispose = function() {
      this.remove(this.transitionVideo);
      return null;
    };

    return Final;

  })(AbstractScene);

  Payoff = (function(_super) {

    __extends(Payoff, _super);

    function Payoff() {
      this.dispose = __bind(this.dispose, this);
      this.showVideo = __bind(this.showVideo, this);      return Payoff.__super__.constructor.apply(this, arguments);
    }

    Payoff.prototype.className = "payoff";

    Payoff.prototype.init = function() {
      $(window).unbind("blur", this.looseFocus);
      this.video = new VideoPlayer;
      this.addChild(this.video);
      this.video.hide();
      this.oz().appView.changeOpening('final', {
        title: "finalHeader",
        cta: "finalSub"
      });
      this.oz().appView.logo.showGoogleLogos();
      this.oz().appView.footer.showMenu();
      return null;
    };

    Payoff.prototype.showVideo = function() {
      this.show(true);
      this.video.show(true);
      return null;
    };

    Payoff.prototype.dispose = function() {
      return null;
    };

    return Payoff;

  })(AbstractChapter);

  Cutout = (function(_super) {

    __extends(Cutout, _super);

    function Cutout() {
      this.dispose = __bind(this.dispose, this);
      this.moveCamera = __bind(this.moveCamera, this);
      this.backButtonClick = __bind(this.backButtonClick, this);
      this.nextButtonClick = __bind(this.nextButtonClick, this);
      this.enableButtons = __bind(this.enableButtons, this);
      this.changeButtonsState = __bind(this.changeButtonsState, this);
      this.showShareBox = __bind(this.showShareBox, this);
      this.requestSaveDone = __bind(this.requestSaveDone, this);
      this.fail = __bind(this.fail, this);
      this.shareClick = __bind(this.shareClick, this);
      this.onPolaroidOz = __bind(this.onPolaroidOz, this);
      this.takePicture = __bind(this.takePicture, this);
      this.tryAgainClick = __bind(this.tryAgainClick, this);
      this.addShareButtons = __bind(this.addShareButtons, this);
      this.addTakePictureButtons = __bind(this.addTakePictureButtons, this);
      this.onKeyPress = __bind(this.onKeyPress, this);
      this.addInterface = __bind(this.addInterface, this);
      this.startRenderVideo = __bind(this.startRenderVideo, this);
      this.restoreMenu = __bind(this.restoreMenu, this);
      this.onCamFailClose = __bind(this.onCamFailClose, this);
      this.onCamFail = __bind(this.onCamFail, this);
      this.render = __bind(this.render, this);
      this.onAssetsComplete = __bind(this.onAssetsComplete, this);
      this.onClose = __bind(this.onClose, this);
      this.init = __bind(this.init, this);      return Cutout.__super__.constructor.apply(this, arguments);
    }

    Cutout.prototype.video = null;

    Cutout.prototype.canvas = null;

    Cutout.prototype.charStd = null;

    Cutout.prototype.coords = null;

    Cutout.prototype.prevButton = null;

    Cutout.prototype.nextButton = null;

    Cutout.prototype.takePicButton = null;

    Cutout.prototype.cameraViewFinder = null;

    Cutout.prototype.vignette = null;

    Cutout.prototype.current = 1;

    Cutout.prototype.state = 0;

    Cutout.prototype.textureSize = null;

    Cutout.prototype.camSize = null;

    Cutout.prototype.currentPic = null;

    Cutout.prototype.polaroid = null;

    Cutout.prototype.init = function() {
      this.camSize = [186, 140];
      this.coords = [];
      this.textureSize = [429, 595];
      this.coords.push({
        xx: 0,
        yy: 0,
        o: 0,
        x: (this.textureSize[0] / 2) + 30,
        y: this.textureSize[1] / 2
      });
      this.coords.push({
        xx: 0,
        yy: this.textureSize[1],
        o: -90 * (Math.PI / 180),
        x: 295,
        y: 775
      });
      this.coords.push({
        xx: this.textureSize[0],
        yy: 0,
        o: 0,
        x: this.textureSize[0] + (this.textureSize[0] / 2) + 30,
        y: this.textureSize[1] / 2
      });
      this.render();
      return null;
    };

    Cutout.prototype.onClose = function() {
      if (!(this.oz().appView["static"].page instanceof LandingPause)) {
        Analytics.track('cutout_close_section');
        SoundController.send("cutout_end");
        this.restoreMenu();
        this.canvas.paused = true;
        this.canvas.renderTexture(true);
        this.oz().appView.share.hide();
        this.oz().appView.subLoader.hide();
        Cutout.__super__.onClose.call(this);
      }
      return null;
    };

    Cutout.prototype.onAssetsComplete = function() {
      this.render();
      Cutout.__super__.onAssetsComplete.call(this);
      return null;
    };

    Cutout.prototype.render = function() {
      var _this = this;
      this.oz().appView.footer.mainMenu.$el.css({
        display: "none"
      });
      this.oz().appView.logo.disable();
      this.addLayout('instructions_cutout', 'cutoutSub', {
        w: 800,
        h: $(window).height(),
        debug: false,
        adjustH: 50
      });
      this.instructions.show(true, function() {
        _this.addCameraHelper();
        _this.video = _this.oz().cam;
        _this.video.on("CAM_READY", _this.startRenderVideo);
        _this.video.on("CAM_FAIL", _this.onCamFail);
        return _this.video.init();
      });
      Analytics.track('cutout_enter_page');
      return null;
    };

    Cutout.prototype.onCamFail = function() {
      var image, imageFooter,
        _this = this;
      this.removeCameraHelper();
      image = new SSAsset("interface", "instructions_warning");
      image.css({
        "margin": "0 auto"
      });
      this.instructions.hide(false);
      this.instructions.$el.find('.box').find('#c22').empty();
      this.instructions.$el.find('.box').find('#c22').append(image.$el);
      this.instructions.$el.find('.box').find('#c22').append("<p>" + (this.oz().locale.get('no_webcam_copy')) + "</p>");
      imageFooter = new SSAsset("interface", "pause_bottom");
      imageFooter.css({
        "margin": "0 auto"
      });
      this.instructions.$el.find('.box').find('#c22').append(imageFooter.$el);
      this.instructions.show(true, function() {
        return $('body').bind('click', _this.onCamFailClose);
      });
      return null;
    };

    Cutout.prototype.onCamFailClose = function() {
      $('body').unbind('click', this.onCamFailClose);
      Analytics.track('cutout_deny_camera');
      SoundController.send("cutout_end");
      this.restoreMenu();
      this.video.off("CAM_READY", this.startRenderVideo);
      this.video.off("CAM_FAIL", this.onCamFail);
      this.video.dispose();
      this.oz().router.navigateTo('');
      return null;
    };

    Cutout.prototype.restoreMenu = function() {
      this.oz().appView.footer.mainMenu.$el.css({
        display: ""
      });
      this.oz().appView.footer.mainMenu.show(true);
      this.oz().appView.logo.enable();
      return null;
    };

    Cutout.prototype.startRenderVideo = function(event) {
      var _this = this;
      this.removeCameraHelper();
      Analytics.track('cutout_allow_camera', "Google_OZ_HoleInFace_EngagementClick");
      this.addCloseButton();
      this.polaroid = new CutoutPolaroid;
      this.polaroid.on('onPolaroidOz', this.onPolaroidOz);
      this.addChild(this.polaroid);
      this.flash = $('<div class="cutout_flash" />');
      this.addChild(this.flash);
      this.$el.animate({
        'background-color': 'rgba(0,0,0,0)'
      }, 500, function() {
        _this.video.off("CAM_READY", _this.startRenderVideo);
        _this.video.off("CAM_FAIL", _this.onCamFail);
        return _this.instructions.hide(true, _this.addInterface);
      });
      return null;
    };

    Cutout.prototype.addInterface = function() {
      SoundController.send("cutout_start");
      this.remove(this.instructions);
      this.canvas = new CutoutCanvas;
      this.addChild(this.canvas);
      this.canvas.setup({
        textureS: this.textureSize,
        camSize: this.camSize,
        coords: this.coords[this.current],
        videoSrc: this.video.get(),
        img: this.oz().baseAssets.get('cutout_normal').result,
        imgOz: this.oz().baseAssets.get('cutout_oz').result
      });
      this.contButtonsCont = new Abstract().setElement($("<div/>"));
      this.contButtonsCont.$el.addClass('cutout_button_container_center');
      this.contButtonsCont.dispose = function() {
        return null;
      };
      this.addChild(this.contButtonsCont);
      this.contButtons = new Abstract().setElement($("<div/>"));
      this.contButtons.$el.addClass('cutout_button_container');
      this.contButtons.dispose = function() {
        return null;
      };
      this.contButtonsCont.addChild(this.contButtons);
      this.addTakePictureButtons();
      this.addShare();
      return null;
    };

    Cutout.prototype.onKeyPress = function(event) {
      if (event.which === 32) {
        event.preventDefault();
        this.takePicture();
      }
      return null;
    };

    Cutout.prototype.addTakePictureButtons = function() {
      this.$el.css({
        'background': 'rgba(0,0,0,0)'
      });
      this.state = 0;
      this.contButtons.empty();
      this.prevButton = new SSAsset('interface', 'button_prev');
      this.prevButton.$el.addClass('button_alpha_enabled');
      this.prevButton.$el.bind('click', this.backButtonClick);
      this.prevButton.$el.css({
        'margin-right': '15px'
      });
      this.nextButton = new SSAsset('interface', 'button_next');
      this.nextButton.$el.addClass('button_alpha_enabled');
      this.nextButton.$el.bind('click', this.nextButtonClick);
      this.nextButton.$el.css({
        'margin-left': '15px'
      });
      this.takePicButton = new SimpleButton("pictureBtn", this.oz().locale.get('cutoutPicBtn'));
      this.takePicButton.on('click', this.takePicture);
      this.contButtons.addChild(this.prevButton);
      this.contButtons.addChild(this.takePicButton);
      this.contButtons.addChild(this.nextButton);
      $(window).bind('keypress', this.onKeyPress);
      this.canvas.reset();
      return null;
    };

    Cutout.prototype.addShareButtons = function() {
      this.state = 1;
      this.contButtons.empty();
      this.polaroid.addShareButtons(this.shareClick, this.tryAgainClick);
      this.$el.css({
        'background': 'rgba(0,0,0,0)'
      });
      return null;
    };

    Cutout.prototype.tryAgainClick = function() {
      var _this = this;
      this.polaroid.shareButton.off('click');
      this.polaroid.tryAgainButton.off('click');
      this.oz().appView.pauseEnabled = true;
      Analytics.track('cutout_take_another');
      this.contButtonsCont.hide(true, function() {
        $(".scene3d").css({
          "-webkit-filter": "blur(0px)"
        });
        _this.canvas.reset();
        _this.addTakePictureButtons();
        _this.changeButtonsState();
        return _this.polaroid.animateOut(function() {
          return _this.contButtonsCont.show(true, null, 300);
        });
      });
      return null;
    };

    Cutout.prototype.takePicture = function() {
      var _this = this;
      this.oz().appView.pauseEnabled = false;
      $(".scene3d").css({
        "-webkit-filter": "blur(10px)"
      });
      Analytics.track('cutout_take_picture');
      SoundController.send("cutout_photo");
      $(window).unbind('keypress', this.onKeyPress);
      this.polaroid.update(this.canvas.getPhoto(true), this.canvas.getPhoto(true, true));
      this.contButtonsCont.hide(true, null, 200, "linear", true);
      this.flash.animate({
        'opacity': 1
      }, 100, function() {
        return _this.flash.animate({
          'opacity': 0
        }, 400, function() {
          return _this.polaroid.animateIn();
        });
      });
      return null;
    };

    Cutout.prototype.onPolaroidOz = function(event) {
      this.addShareButtons();
      return null;
    };

    Cutout.prototype.shareClick = function() {
      var data;
      this.polaroid.shareButton.off('click');
      this.polaroid.tryAgainButton.off('click');
      Analytics.track('cutout_click_share');
      this.oz().appView.subLoader.show(true);
      data = this.canvas.getPhoto(false, true);
      Requester.addImage(data, "cutout", this.requestSaveDone, this.fail);
      return null;
    };

    Cutout.prototype.fail = function() {
      this.tryAgainClick();
      this.oz().appView.subLoader.showError();
      return null;
    };

    Cutout.prototype.requestSaveDone = function(event) {
      var url;
      url = window.location.origin + "/preview/cutout/" + event.result.id;
      Requester.shortURL(url, this.showShareBox, this.fail);
      return null;
    };

    Cutout.prototype.showShareBox = function(event) {
      this.oz().appView.subLoader.hide();
      this.$el.css({
        'background-color': 'rgba(0,0,0,.6)'
      });
      this.oz().appView.share.show({
        title: this.oz().locale.get("cutoutCTA"),
        sub: this.oz().locale.get("shareBoxSubCutout"),
        back: this.oz().locale.get("shareBoxBackCutout"),
        link: event.id,
        backCall: this.tryAgainClick,
        type: 'cutout'
      });
      return null;
    };

    Cutout.prototype.changeButtonsState = function() {
      this.enableButtons();
      if (this.current === 2) {
        this.nextButton.mouseEnabled(false);
        this.nextButton.$el.addClass('button_alpha_disabled');
        this.nextButton.$el.css({
          'visibility': 'hidden'
        });
      }
      if (this.current === 0) {
        this.prevButton.mouseEnabled(false);
        this.prevButton.$el.addClass('button_alpha_disabled');
        this.prevButton.$el.css({
          'visibility': 'hidden'
        });
      }
      return null;
    };

    Cutout.prototype.enableButtons = function() {
      this.nextButton.mouseEnabled(true);
      this.nextButton.$el.removeClass('button_alpha_disabled');
      this.nextButton.$el.css({
        'visibility': 'visible'
      });
      this.prevButton.mouseEnabled(true);
      this.prevButton.$el.removeClass('button_alpha_disabled');
      this.prevButton.$el.css({
        'visibility': 'visible'
      });
      return null;
    };

    Cutout.prototype.nextButtonClick = function() {
      this.current++;
      this.changeButtonsState();
      this.moveCamera();
      this.canvas.changeCamera(this.coords[this.current]);
      return null;
    };

    Cutout.prototype.backButtonClick = function() {
      this.current--;
      this.changeButtonsState();
      this.moveCamera();
      this.canvas.changeCamera(this.coords[this.current]);
      return null;
    };

    Cutout.prototype.moveCamera = function() {
      SoundController.send("cutout_switch");
      switch (this.current) {
        case 0:
          this.oz().appView.area.changeCutout('left');
          break;
        case 1:
          this.oz().appView.area.changeCutout('middle');
          break;
        case 2:
          this.oz().appView.area.changeCutout('right');
      }
      return null;
    };

    Cutout.prototype.dispose = function() {
      var _ref;
      this.oz().appView.pauseEnabled = true;
      Cutout.__super__.dispose.call(this);
      this.instructions = null;
      if ((_ref = this.video) != null) {
        _ref.dispose();
      }
      return null;
    };

    return Cutout;

  })(AbstractScene);

  CutoutCanvas = (function(_super) {

    __extends(CutoutCanvas, _super);

    function CutoutCanvas() {
      this.dispose = __bind(this.dispose, this);
      this.getPhoto = __bind(this.getPhoto, this);
      this.reset = __bind(this.reset, this);
      this.createTextureWebCam = __bind(this.createTextureWebCam, this);
      this.renderTexture = __bind(this.renderTexture, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.resume = __bind(this.resume, this);
      this.pause = __bind(this.pause, this);
      this.changeCamera = __bind(this.changeCamera, this);
      this.setup = __bind(this.setup, this);
      this.init = __bind(this.init, this);      return CutoutCanvas.__super__.constructor.apply(this, arguments);
    }

    CutoutCanvas.prototype.ctx = null;

    CutoutCanvas.prototype.cutout = null;

    CutoutCanvas.prototype.cutout_oz = null;

    CutoutCanvas.prototype.textureImgOz = null;

    CutoutCanvas.prototype.textureImg = null;

    CutoutCanvas.prototype.coord = null;

    CutoutCanvas.prototype.canvas = null;

    CutoutCanvas.prototype.camCanvas = null;

    CutoutCanvas.prototype.camCtx = null;

    CutoutCanvas.prototype.paused = true;

    CutoutCanvas.prototype.camSize = null;

    CutoutCanvas.prototype.textureSize = null;

    CutoutCanvas.prototype.className = 'cutout_canvas';

    CutoutCanvas.prototype.photoCanvas = null;

    CutoutCanvas.prototype.photoCtx = null;

    CutoutCanvas.prototype.photoCanvasTemp = null;

    CutoutCanvas.prototype.photoCtxTemp = null;

    CutoutCanvas.prototype.colorCorrectCanvas = null;

    CutoutCanvas.prototype.colorCorrectCtx = null;

    CutoutCanvas.prototype.portrait = null;

    CutoutCanvas.prototype.paused = true;

    CutoutCanvas.prototype.init = function() {
      this.canvas = document.createElement('canvas');
      this.canvas.width = 1024;
      this.canvas.height = 1024;
      this.ctx = this.canvas.getContext('2d');
      this.camCanvas = document.createElement('canvas');
      this.camCanvas.width = 1024;
      this.camCanvas.height = 1024;
      this.camCtx = this.camCanvas.getContext('2d');
      $(this.canvas).css({
        "z-index": 99,
        "position": "absolute",
        "width": "1024px",
        "height": "1024px",
        "top": "-90000px",
        "left": "-90000px"
      });
      $('body').append($(this.canvas));
      return null;
    };

    CutoutCanvas.prototype.setup = function(params) {
      this.coord = params.coords;
      this.camSize = params.camSize;
      this.textureSize = params.textureS;
      this.cutout = params.img;
      this.cutout_oz = params.imgOz;
      return null;
    };

    CutoutCanvas.prototype.changeCamera = function(params) {
      Analytics.track('cutout_change_camera');
      this.coord = params;
      this.paused = false;
      return null;
    };

    CutoutCanvas.prototype.pause = function() {};

    CutoutCanvas.prototype.resume = function() {};

    CutoutCanvas.prototype.onEnterFrame = function() {
      if (this.paused) {
        return;
      }
      this.renderTexture();
      return null;
    };

    CutoutCanvas.prototype.renderTexture = function(nocamera) {
      if (nocamera == null) {
        nocamera = false;
      }
      this.canvas = this.createTextureWebCam(this.ctx, this.canvas, false, nocamera);
      this.oz().appView.area.updateCutoutsTexture(this.canvas);
      return null;
    };

    CutoutCanvas.prototype.createTextureWebCam = function(context, canvas, oz, nocamera) {
      if (nocamera == null) {
        nocamera = false;
      }
      context.clearRect(0, 0, 1024, 1024);
      context.setTransform(1, 0, 0, 1, 0, 0);
      context.save();
      if (nocamera === false) {
        if (this.coord.o !== 0) {
          context.translate(this.coord.x, this.coord.y + this.camSize[0]);
          context.rotate(this.coord.o);
          context.drawImage(this.oz().cam.flipImage(), this.camSize[0] >> 1, -(this.camSize[1] >> 1), this.camSize[0], this.camSize[1]);
        } else {
          context.rotate(this.coord.o);
          context.translate(this.coord.x, this.coord.y);
          context.drawImage(this.oz().cam.flipImage(), -(this.camSize[0] >> 1), -(this.camSize[1] >> 1), this.camSize[0], this.camSize[1]);
        }
        context.restore();
      }
      context.translate(0, 0);
      context.rotate(0);
      context.drawImage((oz ? this.cutout_oz : this.cutout), 0, 0);
      return canvas;
    };

    CutoutCanvas.prototype.reset = function() {
      this.paused = false;
      return null;
    };

    CutoutCanvas.prototype.getPhoto = function(canvas, oz) {
      var imgData;
      if (canvas == null) {
        canvas = false;
      }
      if (oz == null) {
        oz = false;
      }
      if (canvas === true) {
        this.portrait = null;
      }
      this.camCanvas = this.createTextureWebCam(this.camCtx, this.camCanvas, oz);
      this.renderTexture();
      this.photoCanvas = document.createElement('canvas');
      this.photoCtx = this.photoCanvas.getContext('2d');
      this.photoCanvasTemp = document.createElement('canvas');
      this.photoCtxTemp = this.photoCanvasTemp.getContext('2d');
      if (this.coord.o !== 0) {
        this.photoCanvasTemp.width = this.textureSize[1];
        this.photoCanvasTemp.height = this.textureSize[0];
        this.photoCanvas.width = this.textureSize[0];
        this.photoCanvas.height = this.textureSize[1];
        if (canvas) {
          imgData = this.camCtx.getImageData(this.coord.xx, this.coord.yy, this.textureSize[1], this.textureSize[0]);
          this.portrait = this.camCtx.getImageData(this.coord.xx, this.coord.yy, this.textureSize[1], this.textureSize[0]);
        } else {
          imgData = this.portrait;
        }
        this.photoCtxTemp.putImageData(imgData, 0, 0);
        this.photoCtx.translate(this.photoCanvas.height - 166, 0);
        this.photoCtx.rotate(90 * (Math.PI / 180));
        this.photoCtx.drawImage(this.photoCanvasTemp, 0, 0);
      } else {
        this.photoCanvasTemp.width = this.textureSize[0];
        this.photoCanvasTemp.height = this.textureSize[1];
        this.photoCanvas.width = this.textureSize[0];
        this.photoCanvas.height = this.textureSize[1];
        if (canvas) {
          imgData = this.camCtx.getImageData(this.coord.xx, this.coord.yy, this.textureSize[0], this.textureSize[1]);
          this.portrait = this.camCtx.getImageData(this.coord.xx, this.coord.yy, this.textureSize[0], this.textureSize[1]);
        } else {
          imgData = this.portrait;
        }
        this.photoCtxTemp.putImageData(imgData, 0, 0);
        this.photoCtx.drawImage(this.photoCanvasTemp, 0, 0);
      }
      this.paused = true;
      if (canvas) {
        return this.photoCanvas;
      } else {
        this.portrait = null;
        return this.image = this.photoCanvas.toDataURL("image/jpeg").slice("data:image/jpeg;base64,".length);
      }
    };

    CutoutCanvas.prototype.dispose = function() {
      $(this.canvas).remove();
      this.portrait = null;
      this.photoCanvas = this.photoCtx = this.photoCanvasTemp = this.photoCtxTemp = null;
      return null;
    };

    CutoutCanvas.prototype.colorCorrectCam = function(imageObj) {
      var data, i, imageData, _i, _ref;
      this.colorCorrectCanvas.width = imageObj.width;
      this.colorCorrectCanvas.height = imageObj.height;
      this.colorCorrectCtx.drawImage(imageObj, 0, 0);
      imageData = this.colorCorrectCtx.getImageData(0, 0, imageObj.width, imageObj.height);
      data = imageData.data;
      for (i = _i = 0, _ref = data.length; _i < _ref; i = _i += 4) {
        data[i] *= 1.6;
        data[i + 1] *= 1.6;
        data[i + 2] *= 1.6;
      }
      this.colorCorrectCtx.putImageData(imageData, 0, 0);
      return this.colorCorrectCanvas;
    };

    return CutoutCanvas;

  })(Abstract);

  CutoutPolaroid = (function(_super) {

    __extends(CutoutPolaroid, _super);

    function CutoutPolaroid() {
      this.onClick = __bind(this.onClick, this);
      this.update = __bind(this.update, this);
      this.animateOut = __bind(this.animateOut, this);
      this.animateIn = __bind(this.animateIn, this);
      this.addShareButtons = __bind(this.addShareButtons, this);
      this.init = __bind(this.init, this);      return CutoutPolaroid.__super__.constructor.apply(this, arguments);
    }

    CutoutPolaroid.prototype.className = 'cutout_polaroid';

    CutoutPolaroid.prototype.tagName = 'div';

    CutoutPolaroid.prototype.container = null;

    CutoutPolaroid.prototype.mask = null;

    CutoutPolaroid.prototype.canvasOz = null;

    CutoutPolaroid.prototype.canvasNormal = null;

    CutoutPolaroid.prototype.ctxNormal = null;

    CutoutPolaroid.prototype.ctxOz = null;

    CutoutPolaroid.prototype.fluf1 = null;

    CutoutPolaroid.prototype.title = null;

    CutoutPolaroid.prototype.fluf2 = null;

    CutoutPolaroid.prototype.mainContainer = null;

    CutoutPolaroid.prototype.containerButtons = null;

    CutoutPolaroid.prototype.shareButton = null;

    CutoutPolaroid.prototype.tryAgainButton = null;

    CutoutPolaroid.prototype.init = function() {
      this.mouseEnabled(false);
      this.mainContainer = $('<div class="cutout_polaroid_cell"/>');
      this.addChild(this.mainContainer);
      this.titleContainer = new Abstract().setElement($('<div class="cutout_polaroid_title_container"/>'));
      this.fluf1 = new SSAsset('interface', 'instructions_flourish_top');
      this.fluf1.$el.css({
        margin: '0 auto'
      });
      this.titleContainer.addChild(this.fluf1);
      this.title = $('<p>' + this.oz().locale.get('shareBoxTitleCutout') + "</>");
      this.titleContainer.addChild(this.title);
      this.fluf2 = new SSAsset('interface', 'instructions_flourish');
      this.fluf2.$el.css({
        margin: '0 auto'
      });
      this.titleContainer.addChild(this.fluf2);
      this.mainContainer.append(this.titleContainer.$el);
      this.container = $('<div class="cutout_polaroid_cont" />');
      this.mask = $('<div class="cutout_polaroid_mask" />');
      this.canvasNormal = document.createElement('canvas');
      this.canvasNormal.width = 438;
      this.canvasNormal.height = 526;
      this.ctxNormal = this.canvasNormal.getContext('2d');
      this.mask.append(this.canvasNormal);
      this.canvasOz = document.createElement('canvas');
      this.canvasOz.width = 438;
      this.canvasOz.height = 526;
      this.ctxOz = this.canvasOz.getContext('2d');
      this.mask.append(this.canvasOz);
      this.container.append(this.mask);
      this.container.append(this.oz().baseAssets.get('cutout_polaroid').result);
      this.mainContainer.append(this.container);
      this.containerButtons = new Abstract().setElement($('<div/>'));
      this.containerButtons.hide(false);
      this.containerButtons.$el.css({
        "visibility": "hidden"
      });
      this.tryAgainButton = new SimpleButton("tryAgainBtn", this.oz().locale.get('cutoutTry'));
      this.tryAgainButton.$el.css({
        'margin-right': '20px'
      });
      this.shareButton = new SimpleButton("shareCutoutBtn", this.oz().locale.get('cutoutShare'));
      this.containerButtons.addChild(this.tryAgainButton);
      this.containerButtons.addChild(this.shareButton);
      this.mainContainer.append(this.containerButtons.$el);
      return null;
    };

    CutoutPolaroid.prototype.addShareButtons = function(call1, call2) {
      var width;
      this.containerButtons.$el.css({
        "visibility": "visible"
      });
      this.shareButton.on('click', call1);
      this.tryAgainButton.on('click', call2);
      width = Math.max(this.shareButton.$el.width(), this.tryAgainButton.$el.width());
      this.shareButton.$el.width(width);
      this.tryAgainButton.$el.width(width);
      this.containerButtons.show(true);
      return null;
    };

    CutoutPolaroid.prototype.animateIn = function(callback) {
      var _this = this;
      this.show(true, function() {
        _this.$el.css({
          cursor: 'pointer'
        });
        _this.$el.bind('click', _this.onClick);
        _this.mouseEnabled(true);
        return typeof callback === "function" ? callback() : void 0;
      });
      return null;
    };

    CutoutPolaroid.prototype.animateOut = function(callback) {
      var _this = this;
      this.shareButton.off('click');
      this.tryAgainButton.off('click');
      this.mouseEnabled(false);
      this.containerButtons.hide(true);
      this.hide(true, function() {
        if (typeof callback === "function") {
          callback();
        }
        _this.hide(false);
        _this.$el.css({
          visibility: false
        });
        return _this.containerButtons.$el.css({
          "visibility": "hidden"
        });
      });
      return null;
    };

    CutoutPolaroid.prototype.update = function(normal, oz) {
      $(this.canvasOz).css({
        opacity: 0
      });
      this.ctxOz.clearRect(0, 0, this.canvasOz.width, this.canvasOz.height);
      this.ctxOz.drawImage(oz, 0, 0);
      this.ctxNormal.clearRect(0, 0, this.canvasNormal.width, this.canvasNormal.height);
      this.ctxNormal.drawImage(normal, 0, 0);
      return null;
    };

    CutoutPolaroid.prototype.onClick = function() {
      var _this = this;
      this.$el.unbind('click', this.onClick);
      this.$el.css({
        cursor: 'auto'
      });
      this.titleContainer.hide(true, null, 200);
      $(this.canvasOz).animate({
        opacity: 1
      }, 700, function() {
        return _this.trigger('onPolaroidOz');
      });
      return null;
    };

    return CutoutPolaroid;

  })(Abstract);

  ThumbCutout = (function(_super) {

    __extends(ThumbCutout, _super);

    function ThumbCutout() {
      this.initAnimation = __bind(this.initAnimation, this);
      this.initialize = __bind(this.initialize, this);      return ThumbCutout.__super__.constructor.apply(this, arguments);
    }

    ThumbCutout.prototype.fullImg = null;

    ThumbCutout.prototype.thumb = null;

    ThumbCutout.prototype.polaroid = null;

    ThumbCutout.prototype.src = null;

    ThumbCutout.prototype.initialize = function(id) {
      var _this = this;
      this.setElement($('.wrapper'));
      this.fullImg = $('<div/>');
      this.fullImg.addClass('imgAnim');
      this.thumb = $('.wrapper img');
      this.fullImg.append(this.thumb);
      this.$el.append(this.fullImg);
      this.thumb.bind('load', function() {
        _this.polaroid = new Image;
        _this.polaroid.onload = function() {
          _this.thumb.addClass('imgLoaded');
          _this.fullImg.append(_this.polaroid);
          return _this.initAnimation();
        };
        return _this.polaroid.src = '/img/preview/cutout_polaroid.png';
      });
      this.src = "";
      if (window.location.href.indexOf(':8888') > -1) {
        this.src = "/img/preview/1.jpeg";
      } else {
        this.src = "/api/image/get/" + id;
      }
      this.thumb.attr({
        src: this.src
      });
      this.fullImg.on('webkitAnimationEnd', function() {
        return $(document).trigger('thumbTransitionEnded');
      });
      return null;
    };

    ThumbCutout.prototype.initAnimation = function() {
      this.fullImg.addClass('img');
      return null;
    };

    return ThumbCutout;

  })(Backbone.View);

  Loading = (function(_super) {

    __extends(Loading, _super);

    function Loading() {
      this.dispose = __bind(this.dispose, this);
      this.onClick = __bind(this.onClick, this);
      this.onMouseMove = __bind(this.onMouseMove, this);
      this.hide = __bind(this.hide, this);
      this.onAnimateOut = __bind(this.onAnimateOut, this);
      this.onAnimateIn = __bind(this.onAnimateIn, this);
      this.update = __bind(this.update, this);
      this.render = __bind(this.render, this);
      this.changeCopy = __bind(this.changeCopy, this);
      this.init = __bind(this.init, this);      return Loading.__super__.constructor.apply(this, arguments);
    }

    Loading.prototype.angleX = 0;

    Loading.prototype.angleY = 0;

    Loading.prototype.card = null;

    Loading.prototype.copy = null;

    Loading.prototype.state = 0;

    Loading.prototype.timerChange = null;

    Loading.prototype.out = false;

    Loading.prototype.particles = null;

    Loading.prototype.containerCopy = null;

    Loading.prototype.top = null;

    Loading.prototype.bottom = null;

    Loading.prototype.copySwitcher = null;

    Loading.prototype.c = null;

    Loading.prototype.t = null;

    Loading.prototype.s = null;

    Loading.prototype.x = null;

    Loading.prototype.y = null;

    Loading.prototype.visible = null;

    Loading.prototype.disclaimer = [
      {
        s: "loading_magician",
        t: 4
      }, {
        s: "loading_wizard",
        t: 4
      }, {
        s: "loading_copy",
        t: 4
      }, {
        s: "loading_uncover",
        t: 4
      }
    ];

    Loading.prototype.currentDisclaimer = 0;

    Loading.prototype.init = function() {
      this.particles = new Particles(1, 20, 80, {
        x: 0,
        y: 0,
        w: $(window).innerWidth(),
        h: $(window).innerHeight()
      });
      this.addChild(this.particles);
      this.particles.hide();
      setTimeout(this.particles.show, 500, true);
      this.card = new LoadingCard;
      this.addChild(this.card);
      this.$el.addClass('landingPage');
      this.containerCopy = $('<div class="loadingCopy"/>');
      this.top = new SSAsset('interface', 'swosh_up');
      this.top.$el.css({
        'margin': '0 auto'
      });
      this.containerCopy.append(this.top.$el);
      this.copy = $('<div class="loadingCardCopy"><div></div></div>');
      this.containerCopy.append(this.copy);
      this.bottom = new SSAsset('interface', 'swosh_down');
      this.bottom.$el.css({
        'margin': '0 auto'
      });
      this.containerCopy.append(this.bottom.$el);
      this.addChild(this.containerCopy);
      this.render();
      return null;
    };

    Loading.prototype.changeCopy = function() {
      var _this = this;
      this.c = this.disclaimer[this.currentDisclaimer].s;
      this.t = this.disclaimer[this.currentDisclaimer].t;
      this.copy.animate({
        'opacity': '0'
      }, 200, 'linear', function() {
        _this.s = _this.oz().locale.get(_this.c);
        _this.copy.find('div').html(_this.s.toUpperCase());
        return _this.copy.animate({
          'opacity': '1'
        }, 200);
      });
      this.currentDisclaimer++;
      if (this.currentDisclaimer >= this.disclaimer.length) {
        this.currentDisclaimer = 0;
      }
      this.copySwitcher = setTimeout(this.changeCopy, this.t * 1000);
      return null;
    };

    Loading.prototype.render = function() {
      this.card.animateIn(this.onAnimateIn);
      return null;
    };

    Loading.prototype.update = function(perc) {
      this.card.update(perc);
      return null;
    };

    Loading.prototype.onAnimateIn = function() {
      var _this = this;
      this.changeCopy();
      $(window).bind('mousemove', this.onMouseMove);
      $(window).bind('click', this.onClick);
      this.containerCopy.animate({
        opacity: 1
      }, 500, 'linear', function() {
        _this.timerChange = setTimeout(_this.onClick, 8000, null);
        return _this.oz().appView.footer.shareMenu.render();
      });
      return null;
    };

    Loading.prototype.onAnimateOut = function(callback) {
      var _this = this;
      this.out = true;
      clearInterval(this.timerChange);
      clearInterval(this.copySwitcher);
      $(window).unbind('mousemove', this.onMouseMove);
      $(window).unbind('click', this.onClick);
      this.containerCopy.animate({
        opacity: 0
      }, 700, 'linear', function() {
        return _this.card.animateOut(function() {
          _this.containerCopy.remove();
          _this.remove(_this.card);
          return callback();
        });
      });
      return null;
    };

    Loading.prototype.hide = function(anim, callback) {
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      this.visible = false;
      if (!anim) {
        this.$el.css({
          opacity: 0
        });
      } else {
        this.$el.animate({
          opacity: 0
        }, 800, 'linear', callback);
      }
      return null;
    };

    Loading.prototype.onMouseMove = function(event) {
      if (!!this.paused) {
        return;
      }
      this.x = (event.clientX - ($(window).innerWidth() / 2)) / 40;
      this.y = (event.clientY - ($(window).innerHeight() / 2)) / 35;
      this.angleX += (this.x - this.angleX) * .075;
      this.angleY += (this.y - this.angleY) * .075;
      this.angleX = this.angleX % 360;
      this.angleY = this.angleY % 360;
      this.card.transform(this.angleX, this.angleY);
      return null;
    };

    Loading.prototype.onClick = function(event) {
      if (this.out) {
        return;
      }
      clearInterval(this.timerChange);
      this.timerChange = setTimeout(this.onClick, 8000);
      this.card.toggleTopple();
      return null;
    };

    Loading.prototype.dispose = function() {
      this.particles.pause();
      this.remove(this.particles);
      clearInterval(this.timerChange);
      return null;
    };

    return Loading;

  })(AbstractScene);

  LoadingCard = (function(_super) {

    __extends(LoadingCard, _super);

    function LoadingCard() {
      this.dispose = __bind(this.dispose, this);
      this.resetRotation = __bind(this.resetRotation, this);
      this.animateOut = __bind(this.animateOut, this);
      this.animateIn = __bind(this.animateIn, this);
      this.transform = __bind(this.transform, this);
      this.update = __bind(this.update, this);
      this.init = __bind(this.init, this);      return LoadingCard.__super__.constructor.apply(this, arguments);
    }

    LoadingCard.prototype.className = 'card';

    LoadingCard.prototype.frontImage = null;

    LoadingCard.prototype.containerFront = null;

    LoadingCard.prototype.containerBack = null;

    LoadingCard.prototype.cardWidth = 228;

    LoadingCard.prototype.cardHeight = 333;

    LoadingCard.prototype.counter = 0;

    LoadingCard.prototype.flipped = false;

    LoadingCard.prototype.flipping = false;

    LoadingCard.prototype.percTop = null;

    LoadingCard.prototype.percBot = null;

    LoadingCard.prototype.rotation = null;

    LoadingCard.prototype.angle = null;

    LoadingCard.prototype.init = function() {
      this.containerFront = new SSAsset('interface', 'preloader_front');
      this.containerFront.addChild($('<span class="percLoadingTop">00%</span>'));
      this.containerFront.addChild($('<span class="percLoadingBottom">00%</span>'));
      this.containerFront.$el.addClass('cardImg');
      this.containerBack = new SSAsset('interface', 'preloader_back');
      this.containerBack.$el.addClass('cardImgBack');
      this.containerFront.$el.css({
        display: 'none'
      });
      this.percTop = this.containerFront.$el.find('.percLoadingTop');
      this.percBot = this.containerFront.$el.find('.percLoadingBottom');
      this.addChild(this.containerFront);
      return this.addChild(this.containerBack);
    };

    LoadingCard.prototype.update = function(perc) {
      var p;
      if (perc === NaN || perc === Infinity) {
        perc = 0;
      }
      if (perc >= 99) {
        perc = 99;
      }
      p = perc < 10 ? "0" + perc.toFixed(0) : perc.toFixed(0);
      this.percTop.html(p + "%");
      return this.percBot.html(p + "%");
    };

    LoadingCard.prototype.transform = function(x, y, time, ease, callback) {
      if (time == null) {
        time = 0;
      }
      if (ease == null) {
        ease = 'linear';
      }
      if (callback == null) {
        callback = null;
      }
      return this.$el.transition({
        perspective: this.cardHeight,
        rotateY: x,
        rotateX: y
      }, time, ease, callback);
    };

    LoadingCard.prototype.animateIn = function(onComplete) {
      var _this = this;
      SoundController.send('card_in');
      this.transform(-360, -20);
      this.$el.transition({
        scale: 0
      }, 0);
      return this.$el.transition({
        perspective: this.cardHeight,
        rotateY: -270,
        scale: .5
      }, 400, 'in', function() {
        _this.containerFront.css({
          display: 'block'
        });
        _this.containerBack.css({
          display: 'none'
        });
        return _this.$el.transition({
          perspective: _this.cardHeight,
          rotateY: 0,
          rotateX: 0,
          scale: 1
        }, 500, 'ease', onComplete);
      });
    };

    LoadingCard.prototype.animateOut = function(onComplete) {
      var _this = this;
      SoundController.send("card_out");
      return this.$el.transition({
        perspective: this.cardHeight,
        rotateY: 0,
        rotateX: -90,
        scale: 1
      }, 600, 'in', function() {
        _this.containerFront.css({
          display: 'none'
        });
        _this.containerBack.css({
          display: 'block'
        });
        return _this.$el.transition({
          perspective: _this.cardHeight,
          rotateY: 90,
          rotateX: -180,
          scale: 0.8
        }, 200, 'linear', function() {
          _this.containerFront.css({
            display: 'block'
          });
          _this.containerBack.css({
            display: 'none'
          });
          return _this.$el.transition({
            perspective: _this.cardHeight,
            rotateY: 270,
            rotateX: -150,
            scale: 0.6
          }, 200, 'out', onComplete);
        });
      });
    };

    LoadingCard.prototype.toggleTopple = function(callback) {
      var _this = this;
      if (this.flipping) {
        return;
      }
      SoundController.send("card_flip");
      this.rotation = this.getRotationDegrees();
      this.flipping = true;
      this.containerBack.$el.transition({
        'rotate': this.rotation
      }, function() {
        _this.resetRotation;
        return typeof callback === "function" ? callback(_this.flipped ? 1 : 0) : void 0;
      });
      return this.containerFront.$el.transition({
        'rotate': this.rotation
      }, this.resetRotation);
    };

    LoadingCard.prototype.resetRotation = function() {
      if (this.flipped === false) {
        this.containerBack.$el.transition({
          'rotate': 0
        }, 0);
        this.containerFront.$el.transition({
          'rotate': 0
        }, 0);
      }
      return this.flipping = false;
    };

    LoadingCard.prototype.getRotationDegrees = function() {
      this.angle = this.flipped ? 359 : 180;
      this.flipped = !this.flipped;
      return this.angle;
    };

    LoadingCard.prototype.dispose = function() {
      return this;
    };

    return LoadingCard;

  })(Abstract);

  MusicBox = (function(_super) {

    __extends(MusicBox, _super);

    function MusicBox() {
      this.dispose = __bind(this.dispose, this);
      this.onClose = __bind(this.onClose, this);
      this.restore = __bind(this.restore, this);
      this.goShare = __bind(this.goShare, this);
      this.onDone = __bind(this.onDone, this);
      this.pauseState = __bind(this.pauseState, this);
      this.playState = __bind(this.playState, this);
      this.advance = __bind(this.advance, this);
      this.instructionsDismiss = __bind(this.instructionsDismiss, this);
      this.createMusicStep = __bind(this.createMusicStep, this);
      this.cancel = __bind(this.cancel, this);
      this.addCreateMusicButton = __bind(this.addCreateMusicButton, this);
      this.looseFocus = __bind(this.looseFocus, this);
      this.render = __bind(this.render, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return MusicBox.__super__.constructor.apply(this, arguments);
    }

    MusicBox.prototype.data = null;

    MusicBox.prototype.initialize = function() {
      if (SoundController.userLoop) {
        this.data = SoundController.userLoop;
      } else {
        this.data = JSON.parse(this.oz().baseAssets.get('loopstart').result);
      }
      return MusicBox.__super__.initialize.call(this);
    };

    MusicBox.prototype.init = function() {
      this.addLayout('instructions_music', 'musicInstructions', {
        w: 757,
        h: $(window).height(),
        debug: false,
        adjustH: 0
      });
      this.container = new Abstract().setElement('<div class="musicbox"/>');
      this.container.dispose = function() {};
      this.addChild(this.container);
      $(window).bind('blur', this.looseFocus);
      this.render();
      return null;
    };

    MusicBox.prototype.render = function() {
      this.oz().appView.footer.mainMenu.$el.css({
        display: "none"
      });
      this.oz().appView.logo.disable();
      this.instructions.active = true;
      this.createMusicStep();
      return null;
    };

    MusicBox.prototype.looseFocus = function() {
      var _ref;
      if ((_ref = this.table) != null) {
        _ref.stop();
      }
      return null;
    };

    MusicBox.prototype.addCreateMusicButton = function() {
      var firstState;
      this.addCloseButton();
      firstState = false;
      if (this.containerFirst) {
        this.containerFirst.$el.empty();
        $('body').unbind("click", this.instructionsDismiss);
        firstState = false;
      } else {
        this.containerFirst = new Abstract().setElement('<div class="musicbox_firstButtonContainer"/>');
        this.containerFirst.dispose = function() {};
        firstState = true;
      }
      this.containerFirstButton = new Abstract().setElement('<div class="musicbox_createMusicContainer"/>');
      this.containerFirstButton.dispose = function() {};
      this.containerFirstButton.addChild(new SSAsset('interface', 'pause_left'));
      this.buttonEnter = new SimpleButton("createMusic", this.oz().locale.get('music_create_music_button'));
      this.buttonEnter.$el.addClass('button_alpha_enabled');
      this.buttonEnter.on('click', this.createMusicStep);
      this.containerFirstButton.addChild(this.buttonEnter);
      this.containerFirstButton.addChild(new SSAsset('interface', 'pause_right'));
      this.containerFirst.addChild(this.containerFirstButton.$el);
      this.container.addChild(this.containerFirst);
      this.containerFirst.hide();
      this.containerFirst.show(true);
      this.$el.css({
        "background-color": "rgba(0, 0, 0, 0.0)"
      });
      this.closeBtn.$el.bind("click", this.cancel);
      return null;
    };

    MusicBox.prototype.cancel = function() {
      this.closeBtn.$el.unbind("click");
      this.onClose(true);
      this.$el.css({
        "background-color": "rgba(0, 0, 0, 0.6)"
      });
      return null;
    };

    MusicBox.prototype.createMusicStep = function() {
      var _this = this;
      Analytics.track('music_enter_page', "Google_OZ_Music Box");
      this.instructions.show(true, function() {
        return $('body').bind("click", _this.instructionsDismiss);
      });
      return null;
    };

    MusicBox.prototype.instructionsDismiss = function() {
      $('body').unbind("click", this.instructionsDismiss);
      this.instructions.hide(true, this.advance);
      return null;
    };

    MusicBox.prototype.advance = function() {
      this.remove(this.instructions);
      this.addCloseButton();
      SoundController.stopBackgroundMusic();
      SoundController.send("musicbox_start");
      this.top = new SSAsset('interface', 'music_top');
      this.top.$el.css({
        margin: "25px auto"
      });
      this.container.addChild(this.top);
      this.table = new MusicBoxTable(this.data);
      this.table.on("SHARE", this.goShare);
      this.table.on("fail", this.onDone);
      this.table.on('playState', this.playState);
      this.table.on('pauseState', this.pauseState);
      this.container.addChild(this.table);
      this.table.addLine();
      this.bottomContainer = $('<div class="musicbox_bottomContainer"/>');
      this.playBtn = new SSAsset('interface', 'button_play');
      this.playBtn.$el.css({
        "width": "" + (parseInt(this.playBtn.$el.css("width")) + 1) + "px"
      });
      this.pauseBtn = new SSAsset('interface', 'button_pause');
      this.pauseBtn.$el.css({
        "width": "" + (parseInt(this.pauseBtn.$el.css("width")) + 1) + "px"
      });
      this.pauseBtn.hide();
      this.playPauseBtn = new Abstract().setElement($("<div class='musicbox_autoplay'/>"));
      this.playPauseBtn.$el.on("click", this.table.togglePlay);
      this.playPauseBtn.addChild(this.playBtn);
      this.playPauseBtn.addChild(this.pauseBtn);
      this.playPauseBtn.$el.css({
        "position": "relative"
      });
      this.bottom = new SSAsset('interface', 'music_bottom');
      this.bottom.$el.css({
        margin: "0 auto"
      });
      this.bottomContainer.append(this.bottom.$el);
      this.bottomContainer.append(this.playPauseBtn.$el);
      this.container.addChild(this.bottomContainer);
      this.buttons = new MusicButtons;
      this.buttons.on('doneAct', this.onDone);
      this.buttons.on('goShare', this.table.goShare);
      this.container.addChild(this.buttons);
      this.buttons.render();
      return null;
    };

    MusicBox.prototype.playState = function() {
      this.playBtn.hide(true);
      this.pauseBtn.show(true);
      return null;
    };

    MusicBox.prototype.pauseState = function() {
      this.playBtn.show(true);
      this.pauseBtn.hide(true);
      return null;
    };

    MusicBox.prototype.onDone = function() {
      this.table.saveUserLoop();
      SoundController.transition(this.table.playing, this.table.colNo);
      this.table.stop();
      this.onClose();
      return null;
    };

    MusicBox.prototype.goShare = function(link) {
      this.oz().appView.pauseEnabled = false;
      this.container.$el.animate({
        opacity: 0
      }, 300, 'linear');
      this.oz().appView.share.show({
        title: this.oz().locale.get("music_nice_tune"),
        sub: this.oz().locale.get("music_share_disclaimer"),
        back: this.oz().locale.get("music_make_another"),
        link: link,
        backCall: this.restore,
        type: 'music'
      });
      return null;
    };

    MusicBox.prototype.restore = function() {
      this.oz().appView.pauseEnabled = true;
      this.container.$el.animate({
        opacity: 1
      }, 300, "linear");
      return null;
    };

    MusicBox.prototype.onClose = function(cancelling) {
      if (cancelling == null) {
        cancelling = false;
      }
      if (!(this.oz().appView["static"].page instanceof LandingPause)) {
        MusicBox.__super__.onClose.call(this);
        if (!cancelling) {
          this.table.saveUserLoop();
          SoundController.transition(this.table.playing, this.table.colNo);
          this.table.stop();
        }
        Analytics.track('music_close_section');
        SoundController.send("musicbox_end");
        this.oz().appView.footer.mainMenu.$el.css({
          display: ""
        });
        this.oz().appView.logo.enable();
        return this.oz().appView.share.hide();
      }
    };

    MusicBox.prototype.dispose = function() {
      this.oz().appView.pauseEnabled = true;
      $(window).unbind("blur", this.looseFocus);
      this.instructions = null;
      MusicBox.__super__.dispose.call(this);
      return null;
    };

    return MusicBox;

  })(AbstractScene);

  MusicBoxGrid = (function(_super) {

    __extends(MusicBoxGrid, _super);

    function MusicBoxGrid() {
      this.activateCell = __bind(this.activateCell, this);
      this.cellClick = __bind(this.cellClick, this);
      this.buildTable = __bind(this.buildTable, this);
      this.init = __bind(this.init, this);      return MusicBoxGrid.__super__.constructor.apply(this, arguments);
    }

    MusicBoxGrid.prototype.template = "musicbox-grid";

    MusicBoxGrid.prototype.table = null;

    MusicBoxGrid.prototype.data = null;

    MusicBoxGrid.prototype.init = function() {
      this.table = this.$el.find("table");
      return null;
    };

    MusicBoxGrid.prototype.buildTable = function(data) {
      var col, content, i, j, row, _i, _j, _ref, _ref1;
      this.data = data;
      content = $("<tbody></tbody>");
      for (i = _i = 0, _ref = this.data.dimensions.lines; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        row = $("<tr></tr>");
        for (j = _j = 0, _ref1 = this.data.dimensions.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          col = $("<td data-note='" + i + "' data-col='" + j + "' id='" + j + "-" + i + "'></td>");
          row.append(col);
          if ($.inArray(i, this.data.cols[j].rows) > -1) {
            this.activateCell(col);
          }
        }
        content.append(row);
      }
      this.table.append(content);
      this.render();
      return null;
    };

    MusicBoxGrid.prototype.events = {
      "click td": "cellClick"
    };

    MusicBoxGrid.prototype.cellClick = function(e) {
      Analytics.track('music_click_note');
      this.activateCell($(e.currentTarget));
      if (this.oz().appView.subArea.table.playing) {
        if ($(e.currentTarget).hasClass("on")) {
          this.oz().appView.subArea.table.addChord($(e.currentTarget).attr("data-col"), $(e.currentTarget).attr("data-note"));
        } else {
          this.oz().appView.subArea.table.removeChord($(e.currentTarget).attr("data-col"), $(e.currentTarget).attr("data-note"));
        }
      }
      return null;
    };

    MusicBoxGrid.prototype.activateCell = function(el) {
      el.toggleClass("on");
      return null;
    };

    return MusicBoxGrid;

  })(Abstract);

  MusicBoxTable = (function(_super) {

    __extends(MusicBoxTable, _super);

    function MusicBoxTable() {
      this.dispose = __bind(this.dispose, this);
      this.checkCell = __bind(this.checkCell, this);
      this.cleanFlash = __bind(this.cleanFlash, this);
      this.removeChord = __bind(this.removeChord, this);
      this.addChord = __bind(this.addChord, this);
      this.exportSong = __bind(this.exportSong, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.saveUserLoop = __bind(this.saveUserLoop, this);
      this.playLoop = __bind(this.playLoop, this);
      this.playCell = __bind(this.playCell, this);
      this.checkColumn = __bind(this.checkColumn, this);
      this.cloneTable = __bind(this.cloneTable, this);
      this.removeTable = __bind(this.removeTable, this);
      this.resetTimer = __bind(this.resetTimer, this);
      this.stop = __bind(this.stop, this);
      this.play = __bind(this.play, this);
      this.togglePlay = __bind(this.togglePlay, this);
      this.fail = __bind(this.fail, this);
      this.showShareBox = __bind(this.showShareBox, this);
      this.musicSaved = __bind(this.musicSaved, this);
      this.goShare = __bind(this.goShare, this);
      this.addLine = __bind(this.addLine, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return MusicBoxTable.__super__.constructor.apply(this, arguments);
    }

    MusicBoxTable.prototype.template = "musicbox-table";

    MusicBoxTable.prototype.playing = false;

    MusicBoxTable.prototype.tempo = 1 / 3;

    MusicBoxTable.prototype.cellWidth = 31;

    MusicBoxTable.prototype.colNo = 0;

    MusicBoxTable.prototype.initialize = function(data) {
      this.data = data;
      MusicBoxTable.__super__.initialize.call(this);
      return null;
    };

    MusicBoxTable.prototype.init = function() {
      var chordsList, i, _i, _ref;
      this.clock = new THREE.Clock();
      this.grid = new MusicBoxGrid;
      this.grid.buildTable(this.data);
      this.container = this.$el.find(".grid-mask");
      this.container.append(this.grid.$el);
      chordsList = new Abstract().setElement('<div class="chordsList"></div>');
      for (i = _i = 0, _ref = this.data.notes.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        chordsList.$el.prepend(this.data.notes[i].label);
        if (i < this.data.notes.length - 1) {
          chordsList.$el.prepend("<br />");
        }
      }
      chordsList.dispose = function() {};
      this.container.append(chordsList.$el);
      return null;
    };

    MusicBoxTable.prototype.addLine = function() {
      var centerBar;
      centerBar = new SSAsset('interface', 'music_mid_bar');
      this.$el.find('.decorated-box').find('.center_bar').append(centerBar.$el);
      return null;
    };

    MusicBoxTable.prototype.goShare = function() {
      var data;
      Analytics.track('music_share');
      this.oz().appView.subArea.buttons.share.disable();
      this.oz().appView.subLoader.show(true);
      data = this.exportSong('col');
      data.dimensions = {
        "lines": this.data.dimensions.lines,
        "cols": this.data.dimensions.cols
      };
      data.notes = this.data.notes;
      data.loops = this.data.loops;
      Requester.addMusic(JSON.stringify(data), this.musicSaved, this.fail);
      return null;
    };

    MusicBoxTable.prototype.musicSaved = function(data) {
      var url;
      url = window.location.origin + "/preview/music/" + data.result.id;
      Requester.shortURL(url, this.showShareBox, this.fail);
      return null;
    };

    MusicBoxTable.prototype.showShareBox = function(event) {
      this.oz().appView.subArea.buttons.share.enable();
      this.oz().appView.subLoader.hide();
      this.trigger("SHARE", event.id);
      return null;
    };

    MusicBoxTable.prototype.fail = function() {
      this.oz().appView.subLoader.showError();
      this.trigger("fail");
      return null;
    };

    MusicBoxTable.prototype.togglePlay = function() {
      if (this.playing) {
        this.stop();
      } else {
        this.play();
      }
      return null;
    };

    MusicBoxTable.prototype.play = function() {
      Analytics.track('music_click_play');
      SoundController.send("musicbox_play");
      this.trigger('playState');
      this.colNo = this.data.cols.length / 2;
      this.cloneTable();
      this.saveUserLoop();
      this.playing = true;
      return null;
    };

    MusicBoxTable.prototype.stop = function() {
      this.playing = false;
      Analytics.track('music_click_pause');
      SoundController.send("musicbox_pause");
      this.trigger('pauseState');
      this.resetTimer();
      this.grid.$el.animate({
        'margin-left': 0
      }, 800, "easeInOutQuad", this.removeTable);
      /*@grid.$el.css {'margin-left' : 0}
      ()
      */

      return null;
    };

    MusicBoxTable.prototype.resetTimer = function() {
      this.clock.stop();
      this.clock.startTime = 0;
      this.clock.oldTime = 0;
      return this.clock.elapsedTime = 0;
    };

    MusicBoxTable.prototype.removeTable = function() {
      var table;
      if (this.$el.find('table').length > 1) {
        table = $(this.$el.find('table')[0]);
        table.remove();
      }
      $(this.$el.find('table')).removeClass("leftTweak");
      return null;
    };

    MusicBoxTable.prototype.cloneTable = function() {
      var clone, table;
      table = $(this.grid.$el.find('table')[0]);
      clone = table.clone(true, true);
      this.grid.$el.append(clone);
      clone.addClass('leftTweak');
      this.cleanFlash(clone);
      return null;
    };

    MusicBoxTable.prototype.checkColumn = function() {
      var currentCol, i, rowNo;
      if (this.lastCol !== this.colNo) {
        this.lastCol = this.colNo;
        currentCol = this.data.cols[this.colNo];
        i = 0;
        while (i < currentCol.rows.length) {
          rowNo = currentCol.rows[i];
          this.animateCell(this.colNo, rowNo);
          this.playCell(this.colNo, rowNo);
          i++;
        }
        i = 0;
        while (i < this.data.loops.length) {
          this.playLoop(this.data.loops[i]);
          i++;
        }
      }
      return null;
    };

    MusicBoxTable.prototype.animateCell = function(colNo, rowNo) {
      var cell, row, table,
        _this = this;
      if (colNo < (this.data.cols.length / 2) && this.$el.find('table').length > 1) {
        table = this.$el.find('table')[1];
      } else {
        table = this.$el.find('table')[0];
      }
      row = $(table).find('tr')[rowNo];
      cell = $(row).find('td')[colNo];
      $(cell).stop().addClass("flash");
      $(cell).delay(400).queue(function() {
        $(cell).removeClass("flash");
        return $(cell).dequeue();
      });
      return null;
    };

    MusicBoxTable.prototype.playCell = function(col, row) {
      MusicBoxSequencer.playSound(col, row);
      return null;
    };

    MusicBoxTable.prototype.playLoop = function(data) {
      var event;
      event = "";
      if (this.colNo === data.col) {
        event = data.event;
      }
      if (event !== "") {
        SoundController.send(data.event);
      }
      return null;
    };

    MusicBoxTable.prototype.saveUserLoop = function() {
      this.data.cols = this.exportSong('col').cols;
      SoundController.userLoop = this.data;
      return null;
    };

    MusicBoxTable.prototype.onEnterFrame = function() {
      var col, diff, margins, nPw, progressWidth, timePercent;
      if (!this.playing) {
        return;
      }
      timePercent = (this.clock.getElapsedTime() * 100) / (this.tempo * this.data.dimensions.cols);
      progressWidth = (this.grid.$el.width() * timePercent) / 100;
      this.grid.$el.css({
        "margin-left": -progressWidth / 2
      });
      diff = (this.cellWidth * (timePercent / 100).toFixed(1)).toFixed(1);
      nPw = progressWidth + (diff * 2);
      col = Math.floor((nPw * (this.data.dimensions.cols - 1)) / this.grid.$el.width());
      if (col < (this.data.dimensions.cols / 2)) {
        col = col + (this.data.dimensions.cols / 2);
      } else {
        col = col - (this.data.dimensions.cols / 2);
      }
      this.colNo = col;
      this.checkColumn();
      margins = 6;
      if ((Math.abs(parseInt(this.grid.$el.css("margin-left"))) * 2) + margins >= this.grid.$el.width()) {
        this.removeTable();
        this.grid.$el.css({
          "margin-left": 0
        });
        this.cloneTable();
        this.resetTimer();
      }
      return null;
    };

    MusicBoxTable.prototype.exportSong = function(orderBy) {
      var i, n, songExport, table;
      if (!orderBy) {
        orderBy = 'row';
      }
      table = $(this.$el.find('table'));
      if (orderBy === 'row') {
        songExport = {
          'rows': []
        };
        i = 0;
        while (i < this.data.dimensions.lines) {
          songExport.rows[i] = {
            'columns': []
          };
          n = 0;
          while (n < this.data.dimensions.cols) {
            if (this.checkCell(table, i, n) === true) {
              songExport.rows[i].columns.push(n);
            }
            n++;
          }
          i++;
        }
      } else if (orderBy === 'col') {
        songExport = {
          'cols': []
        };
        i = 0;
        while (i < this.data.dimensions.cols) {
          songExport.cols[i] = {
            'rows': []
          };
          n = 0;
          while (n < this.data.dimensions.lines) {
            if (this.checkCell(table, n, i) === true) {
              songExport.cols[i].rows.push(n);
            }
            n++;
          }
          i++;
        }
      }
      return songExport;
    };

    MusicBoxTable.prototype.addChord = function(col, row) {
      var tables;
      tables = this.$el.find('table');
      $(tables[0]).find("#" + col + "-" + row).addClass("on");
      $(tables[1]).find("#" + col + "-" + row).addClass("on");
      this.data.cols[col].rows.push(parseInt(row));
      return null;
    };

    MusicBoxTable.prototype.removeChord = function(col, row) {
      var index, tables;
      tables = this.$el.find('table');
      $(tables[0]).find("#" + col + "-" + row).removeClass("on");
      $(tables[1]).find("#" + col + "-" + row).removeClass("on");
      index = this.data.cols[col].rows.indexOf(row);
      this.data.cols[col].rows.splice(index, 1);
      return null;
    };

    MusicBoxTable.prototype.cleanFlash = function(table) {
      table.children().children().children().removeClass("flash");
      return null;
    };

    MusicBoxTable.prototype.checkCell = function(table, rowNum, colNum) {
      var cell, row;
      row = $(table.find('tr')[rowNum]);
      cell = $(row.find('td')[colNum]);
      if (cell) {
        if (cell.hasClass('on')) {
          return true;
        } else {
          return false;
        }
      } else {
        throw "Error exporting song: couldn't find specified cell.";
      }
    };

    MusicBoxTable.prototype.dispose = function() {
      return null;
    };

    return MusicBoxTable;

  })(Abstract);

  MusicButtons = (function(_super) {

    __extends(MusicButtons, _super);

    function MusicButtons() {
      this.togglePlay = __bind(this.togglePlay, this);
      this.goShare = __bind(this.goShare, this);
      this.doneAct = __bind(this.doneAct, this);
      this.render = __bind(this.render, this);
      this.init = __bind(this.init, this);      return MusicButtons.__super__.constructor.apply(this, arguments);
    }

    MusicButtons.prototype.tagName = 'div';

    MusicButtons.prototype.className = 'musicbox_button_container';

    MusicButtons.prototype.init = function() {
      this.left = new SSAsset('interface', 'pause_left');
      this.addChild(this.left);
      this.done = new SimpleButton("doneMusic", this.oz().locale.get('music_done_button'));
      this.done.on("click", this.doneAct);
      this.addChild(this.done);
      this.share = new SimpleButton("shareTune", this.oz().locale.get('music_share_your_tune'));
      this.share.on("click", this.goShare);
      this.addChild(this.share);
      this.right = new SSAsset('interface', 'pause_right');
      this.addChild(this.right);
      return null;
    };

    MusicButtons.prototype.render = function() {
      var width;
      width = Math.max(this.done.$el.width(), this.share.$el.width());
      this.share.$el.width(width);
      this.done.$el.width(width);
      return null;
    };

    MusicButtons.prototype.doneAct = function() {
      this.trigger('doneAct');
      return null;
    };

    MusicButtons.prototype.goShare = function() {
      this.trigger('goShare');
      return null;
    };

    MusicButtons.prototype.togglePlay = function() {
      this.trigger('togglePlay');
      return null;
    };

    return MusicButtons;

  })(Abstract);

  ShareScene = (function(_super) {

    __extends(ShareScene, _super);

    function ShareScene() {
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.init = __bind(this.init, this);      return ShareScene.__super__.constructor.apply(this, arguments);
    }

    ShareScene.prototype.shareBox = null;

    ShareScene.prototype.init = function() {
      this.$el.css({
        width: "100%"
      });
      this.$el.css({
        height: "100%"
      });
      this.$el.css({
        opacity: 0,
        display: "none",
        "position": "absolute",
        "z-index": 10,
        "background-color": "transparent"
      });
      return null;
    };

    ShareScene.prototype.show = function(data) {
      this.shareBox = new ShareBox(data.title, data.sub, data.back, data.backCall, data.link, data.type);
      this.shareBox.on('removeShareBox', this.hide);
      this.addChild(this.shareBox);
      this.$el.css({
        display: 'table'
      });
      ShareScene.__super__.show.call(this, true);
      return null;
    };

    ShareScene.prototype.hide = function() {
      var _this = this;
      ShareScene.__super__.hide.call(this, true, function() {
        var _ref;
        _this.remove(_this.shareBox);
        if ((_ref = _this.shareBox) != null) {
          _ref.off('removeShareBox');
        }
        _this.shareBox = null;
        return _this.$el.css({
          display: 'none'
        });
      });
      return null;
    };

    return ShareScene;

  })(AbstractScene);

  StormInstructions = (function(_super) {

    __extends(StormInstructions, _super);

    function StormInstructions() {
      this.addLayout = __bind(this.addLayout, this);
      this.dispose = __bind(this.dispose, this);
      this.render = __bind(this.render, this);
      this.hideMe = __bind(this.hideMe, this);
      this.init = __bind(this.init, this);      return StormInstructions.__super__.constructor.apply(this, arguments);
    }

    StormInstructions.prototype.id = "storm";

    StormInstructions.prototype.videoElement = null;

    StormInstructions.prototype.video = null;

    StormInstructions.prototype.init = function() {
      this.render();
      this.$el.bind("click", this.hideMe);
      this.oz().appView.footer.mainMenu.hide(true);
      this.hide();
      return this.show(true);
    };

    StormInstructions.prototype.hideMe = function() {
      var _this = this;
      this.$el.unbind('click', this.hideMe);
      this.hide(true, function() {
        _this.remove(_this.instructions);
        _this.oz().appView.wrapper.remove(_this.subArea);
        _this.oz().appView.wrapper.remove(_this.containerSubArea);
        _this.oz().appView.subArea = null;
        return _this.mouseEnabled(false);
      });
      return this.oz().appView.area.activate();
    };

    StormInstructions.prototype.render = function() {
      this.addLayout("instructions_balloon", "storm_intructions");
      return StormInstructions.__super__.render.call(this);
    };

    StormInstructions.prototype.dispose = function() {
      return this;
    };

    StormInstructions.prototype.addLayout = function(assetID, localeID) {
      StormInstructions.__super__.addLayout.call(this, assetID, localeID);
      return this.instructions.show(true);
    };

    return StormInstructions;

  })(AbstractScene);

  SimpleButton = (function(_super) {

    __extends(SimpleButton, _super);

    function SimpleButton() {
      this.dispose = __bind(this.dispose, this);
      this.onclick = __bind(this.onclick, this);
      this.onout = __bind(this.onout, this);
      this.onover = __bind(this.onover, this);
      this.init = __bind(this.init, this);      return SimpleButton.__super__.constructor.apply(this, arguments);
    }

    SimpleButton.prototype.initialize = function(_id, _label, transitionClass) {
      if (transitionClass == null) {
        transitionClass = "btanimated";
      }
      this.id = _id;
      this.label = _label;
      this.classAnimated = transitionClass;
      return SimpleButton.__super__.initialize.call(this);
    };

    SimpleButton.prototype.init = function() {
      return this.enable();
    };

    SimpleButton.prototype.onover = function() {
      return SimpleButton.__super__.onover.call(this);
    };

    SimpleButton.prototype.onout = function() {
      return SimpleButton.__super__.onout.call(this);
    };

    SimpleButton.prototype.onclick = function() {
      this.trigger("click", this);
      return null;
    };

    SimpleButton.prototype.dispose = function() {
      return null;
    };

    return SimpleButton;

  })(AbstractButton);

  Zoetrope = (function(_super) {

    __extends(Zoetrope, _super);

    function Zoetrope() {
      this.dispose = __bind(this.dispose, this);
      this.restore = __bind(this.restore, this);
      this.goShare = __bind(this.goShare, this);
      this.goMakeMovie = __bind(this.goMakeMovie, this);
      this.next = __bind(this.next, this);
      this.cleanCameraListeners = __bind(this.cleanCameraListeners, this);
      this.onDisableCamera = __bind(this.onDisableCamera, this);
      this.onCamFail = __bind(this.onCamFail, this);
      this.onEnableCamera = __bind(this.onEnableCamera, this);
      this.addLayout = __bind(this.addLayout, this);
      this.onClose = __bind(this.onClose, this);
      this.render = __bind(this.render, this);
      this.onAssetsComplete = __bind(this.onAssetsComplete, this);
      this.init = __bind(this.init, this);      return Zoetrope.__super__.constructor.apply(this, arguments);
    }

    Zoetrope.prototype.id = "zoetrope";

    Zoetrope.prototype.container = null;

    Zoetrope.prototype.camera = null;

    Zoetrope.prototype.image = null;

    Zoetrope.prototype.imageFooter = null;

    Zoetrope.prototype.instructionsBox = null;

    Zoetrope.prototype.init = function() {
      this.render();
      return null;
    };

    Zoetrope.prototype.onAssetsComplete = function() {
      this.remove(this.loader);
      Zoetrope.__super__.onAssetsComplete.call(this);
      return null;
    };

    Zoetrope.prototype.render = function() {
      Analytics.track('zoe_enter_page', "Google_OZ_Zeotrope");
      this.addLayout('instructions_zoetrope', 'zoetrope_intructions', {
        w: 656,
        h: 750,
        debug: false
      });
      Zoetrope.__super__.render.call(this);
      return null;
    };

    Zoetrope.prototype.onClose = function() {
      if (!(this.oz().appView["static"].page instanceof LandingPause)) {
        Analytics.track('zoe_close_section');
        SoundController.send("zoetrope_end");
        SoundController.send("zoetrope_scene_end");
        this.oz().appView.footer.mainMenu.$el.css({
          display: ""
        });
        this.oz().appView.logo.enable();
        this.oz().appView.share.hide();
        this.oz().appView.subLoader.hide();
        Zoetrope.__super__.onClose.call(this);
      }
      return null;
    };

    Zoetrope.prototype.addLayout = function(assetID, localeID, boundaries) {
      var _this = this;
      SoundController.send("zoetrope_start");
      Zoetrope.__super__.addLayout.call(this, assetID, localeID, boundaries);
      this.oz().appView.footer.mainMenu.$el.css({
        display: "none"
      });
      this.oz().appView.logo.disable();
      this.instructions.show(true, function() {
        _this.addCameraHelper();
        _this.camera = _this.oz().cam;
        _this.camera.on("CAM_READY", _this.onEnableCamera);
        _this.camera.on("CAM_FAIL", _this.onCamFail);
        return _this.camera.init();
      });
      return null;
    };

    Zoetrope.prototype.onEnableCamera = function() {
      Analytics.track('zoe_allow_camera');
      SoundController.send("zoetrope_scene_start");
      this.addCloseButton();
      this.cleanCameraListeners();
      this.next();
      return null;
    };

    Zoetrope.prototype.onCamFail = function() {
      var _this = this;
      this.image = new SSAsset("interface", "instructions_warning");
      this.image.css({
        "margin": "0 auto"
      });
      this.cleanCameraListeners();
      this.instructions.hide(false);
      this.instructionsBox = this.instructions.$el.find('.box').find('#c22');
      this.instructionsBox.empty();
      this.instructionsBox.append(this.image.$el);
      this.instructionsBox.append("<p>" + (this.oz().locale.get('no_webcam_copy')) + "</p>");
      this.imageFooter = new SSAsset("interface", "pause_bottom");
      this.imageFooter.css({
        "margin": "0 auto"
      });
      this.instructionsBox.append(this.imageFooter.$el);
      this.instructions.show(true, function() {
        return $('body').bind('click', _this.onDisableCamera);
      });
      return null;
    };

    Zoetrope.prototype.onDisableCamera = function() {
      $('body').unbind('click', this.onDisableCamera);
      Analytics.track('zoe_deny_camera');
      this.cleanCameraListeners();
      this.onClose();
      return null;
    };

    Zoetrope.prototype.cleanCameraListeners = function() {
      var _ref, _ref1;
      this.removeCameraHelper();
      if ((_ref = this.camera) != null) {
        _ref.off("CAM_READY", this.onEnableCamera);
      }
      if ((_ref1 = this.camera) != null) {
        _ref1.off("CAM_FAIL", this.onCamFail);
      }
      return null;
    };

    Zoetrope.prototype.next = function() {
      this.instructions.hide(true, this.goMakeMovie);
      return null;
    };

    Zoetrope.prototype.goMakeMovie = function() {
      this.remove(this.instructions);
      this.makemovie = new ZoetropeMakeMovie(this.camera);
      this.makemovie.on("SHARE", this.goShare);
      this.makemovie.on("fail", this.restore);
      this.addChild(this.makemovie);
      return null;
    };

    Zoetrope.prototype.goShare = function(link) {
      this.oz().appView.pauseEnabled = false;
      this.makemovie.$el.animate({
        opacity: 0
      }, 300, 'linear');
      this.oz().appView.share.show({
        title: this.oz().locale.get("zoetrope_nice_illusion"),
        sub: this.oz().locale.get("zoetrope_share_copy"),
        back: this.oz().locale.get("zoetrope_record_another"),
        link: link,
        backCall: this.restore,
        type: "zoe"
      });
      return null;
    };

    Zoetrope.prototype.restore = function() {
      this.makemovie.off("fail", this.restore);
      this.oz().appView.pauseEnabled = true;
      this.makemovie.$el.animate({
        opacity: 1
      }, 300, "linear");
      this.makemovie.goTryAgain(false);
      return null;
    };

    Zoetrope.prototype.dispose = function() {
      var _ref, _ref1, _ref2;
      if ((_ref = this.makemovie) != null) {
        _ref.stopRecord();
      }
      this.oz().appView.pauseEnabled = true;
      Zoetrope.__super__.dispose.call(this);
      this.instructions = null;
      this.cleanCameraListeners();
      if ((_ref1 = this.camera) != null) {
        _ref1.dispose();
      }
      this.camera = null;
      if ((_ref2 = this.makemovie) != null) {
        _ref2.off("SHARE", this.goShare);
      }
      return null;
    };

    /*
        addPreview: =>
    
            @makemovie.mouseEnabled false
    
            @preview = new ZoetropePreview
            @preview.on "BACK", @removePreview
            @addChild @preview
    
        removePreview: =>
            
            @preview.off "BACK"
            @remove @preview
    
            @makemovie.mouseEnabled true
            @makemovie.$el.animate { opacity: 1 }, 300, 'linear'
    */


    return Zoetrope;

  })(AbstractScene);

  ZoetropeCountDown = (function(_super) {

    __extends(ZoetropeCountDown, _super);

    function ZoetropeCountDown() {
      this.dispose = __bind(this.dispose, this);
      this.done = __bind(this.done, this);
      this.next = __bind(this.next, this);
      this.start = __bind(this.start, this);
      this.stopCountDown = __bind(this.stopCountDown, this);
      this.startCountDown = __bind(this.startCountDown, this);
      this.init = __bind(this.init, this);      return ZoetropeCountDown.__super__.constructor.apply(this, arguments);
    }

    ZoetropeCountDown.prototype.className = "counter";

    ZoetropeCountDown.prototype.counter = 3;

    ZoetropeCountDown.prototype.counting = null;

    ZoetropeCountDown.prototype.numbers = [];

    ZoetropeCountDown.prototype.circle = null;

    ZoetropeCountDown.prototype.init = function() {
      var i, n, _i, _ref;
      this.numbers = null;
      this.numbers = [];
      for (i = _i = 1, _ref = this.counter; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        n = $("<div>" + i + "</div>");
        n.css({
          fontSize: "0px",
          opacity: 0
        });
        this.numbers.push(n);
        this.addChild(n);
      }
      i = null;
      this.hold = $("<div>- - -</div>");
      this.hold.css({
        "fontSize": "38px",
        "opacity": 1,
        "letter-spacing": "-1px",
        "line-height": "49px"
      });
      this.addChild(this.hold);
      return null;
    };

    ZoetropeCountDown.prototype.startCountDown = function() {
      this.counter = 3;
      this.hold.stop().animate({
        opacity: 0
      });
      this.counting = setInterval(this.start, 500);
      this.start();
      return null;
    };

    ZoetropeCountDown.prototype.stopCountDown = function() {
      var i, _i;
      clearInterval(this.counting);
      for (i = _i = 0; _i < 3; i = ++_i) {
        this.numbers[i].stop().animate({
          opacity: 0,
          fontSize: "16px"
        }, 400, 'easeOutExpo');
      }
      i = null;
      this.hold.stop().animate({
        opacity: 1
      });
      return null;
    };

    ZoetropeCountDown.prototype.start = function() {
      if (this.counter < this.numbers.length) {
        this.numbers[this.counter].stop().animate({
          opacity: 0,
          fontSize: "36px"
        }, 400, 'easeOutExpo');
        if (this.counter === 0) {
          this.done();
        }
      }
      if (this.counter > 0) {
        this.numbers[this.counter - 1].delay(100).stop().animate({
          opacity: 1,
          fontSize: "38px"
        }, 700, 'easeOutBack');
        this.counter--;
      }
      return null;
    };

    ZoetropeCountDown.prototype.next = function() {
      this.counter--;
      return null;
    };

    ZoetropeCountDown.prototype.done = function() {
      this.hold.stop().animate({
        opacity: 1
      });
      clearInterval(this.counting);
      this.trigger("COUNTDOWN_COMPLETE");
      return null;
    };

    ZoetropeCountDown.prototype.dispose = function() {
      return null;
    };

    return ZoetropeCountDown;

  })(Abstract);

  ZoetropeMakeMovie = (function(_super) {

    __extends(ZoetropeMakeMovie, _super);

    function ZoetropeMakeMovie() {
      this.dispose = __bind(this.dispose, this);
      this.showShareBox = __bind(this.showShareBox, this);
      this.fail = __bind(this.fail, this);
      this.imageSaved = __bind(this.imageSaved, this);
      this.get3DTexture = __bind(this.get3DTexture, this);
      this.requestSave = __bind(this.requestSave, this);
      this.goShare = __bind(this.goShare, this);
      this.goTryAgain = __bind(this.goTryAgain, this);
      this.addButtons = __bind(this.addButtons, this);
      this.recordFrame = __bind(this.recordFrame, this);
      this.recordOneFrame = __bind(this.recordOneFrame, this);
      this.completed = __bind(this.completed, this);
      this.stopRecord = __bind(this.stopRecord, this);
      this.resume = __bind(this.resume, this);
      this.pause = __bind(this.pause, this);
      this.onCountdownComplete = __bind(this.onCountdownComplete, this);
      this.startRecord = __bind(this.startRecord, this);
      this.onDone = __bind(this.onDone, this);
      this.toogleRecord = __bind(this.toogleRecord, this);
      this.start = __bind(this.start, this);
      this.updateSettings = __bind(this.updateSettings, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return ZoetropeMakeMovie.__super__.constructor.apply(this, arguments);
    }

    ZoetropeMakeMovie.prototype.id = "makemovie";

    ZoetropeMakeMovie.prototype.container = null;

    ZoetropeMakeMovie.prototype.controls = null;

    ZoetropeMakeMovie.prototype.flourish = null;

    ZoetropeMakeMovie.prototype.webcamfeed = null;

    ZoetropeMakeMovie.prototype.navContainer = null;

    ZoetropeMakeMovie.prototype.record = null;

    ZoetropeMakeMovie.prototype.tryagain = null;

    ZoetropeMakeMovie.prototype.preview = null;

    ZoetropeMakeMovie.prototype.timeline = null;

    ZoetropeMakeMovie.prototype.recording = false;

    ZoetropeMakeMovie.prototype.bright = null;

    ZoetropeMakeMovie.prototype.contrast = null;

    ZoetropeMakeMovie.prototype.camera = null;

    ZoetropeMakeMovie.prototype.header = null;

    ZoetropeMakeMovie.prototype.headerFlourish = null;

    ZoetropeMakeMovie.prototype.bottom = null;

    ZoetropeMakeMovie.prototype.bottomFlourish = null;

    ZoetropeMakeMovie.prototype.countdown = null;

    ZoetropeMakeMovie.prototype.done = null;

    ZoetropeMakeMovie.prototype.share = null;

    ZoetropeMakeMovie.prototype.rep = null;

    ZoetropeMakeMovie.prototype.data = null;

    ZoetropeMakeMovie.prototype.scale = null;

    ZoetropeMakeMovie.prototype.img = null;

    ZoetropeMakeMovie.prototype.canvasTexture = null;

    ZoetropeMakeMovie.prototype.ctxTexture = null;

    ZoetropeMakeMovie.prototype.canvasRef = null;

    ZoetropeMakeMovie.prototype.ctxRef = null;

    ZoetropeMakeMovie.prototype.line = null;

    ZoetropeMakeMovie.prototype.col = null;

    ZoetropeMakeMovie.prototype.imgData = null;

    ZoetropeMakeMovie.prototype.w = null;

    ZoetropeMakeMovie.prototype.h = null;

    ZoetropeMakeMovie.prototype.initialize = function(_camera) {
      this.scale = 128 / 600;
      this.camera = _camera;
      ZoetropeMakeMovie.__super__.initialize.call(this);
      return null;
    };

    ZoetropeMakeMovie.prototype.init = function() {
      this.container = new Abstract().setElement("<div class='zoetropeContainer'></div>");
      this.container.dispose = function() {
        return null;
      };
      this.addChild(this.container);
      this.header = new Abstract().setElement("<div class='zoeheader'></div>");
      this.header.dispose = function() {
        return null;
      };
      this.container.addChild(this.header);
      this.headerFlourish = new SSAsset("interface", "zoe_top");
      this.header.addChild(this.headerFlourish);
      this.webcamfeed = new ZoetropeWebcamFeed(this.camera);
      this.container.addChild(this.webcamfeed);
      this.bottom = new Abstract().setElement("<div class='zoebottom'></div>");
      this.bottom.dispose = function() {
        return null;
      };
      this.bottomFlourish = new SSAsset("interface", "zoe_bottom");
      this.bottomFlourish.$el.css({
        "background-position-y": "" + (parseInt(this.bottomFlourish.$el.css("background-position-y")) + 1) + "px",
        "height": "" + (parseInt(this.bottomFlourish.$el.css("height")) + 1) + "px"
      });
      this.bottom.addChild(this.bottomFlourish);
      this.countdown = new ZoetropeCountDown;
      this.bottom.addChild(this.countdown);
      this.timeline = new ZoetropeTimeline(this.webcamfeed.canvas, this.webcamfeed.player);
      this.timeline.on("REPLACE_THUMB", this.recordOneFrame);
      this.container.addChild(this.timeline);
      this.container.addChild(this.bottom);
      this.navContainer = new Abstract().setElement("<div class='navContainer'></div>");
      this.navContainer.dispose = function() {
        return null;
      };
      this.navContainer.hide();
      this.addChild(this.navContainer);
      this.addButtons();
      this.$el.css({
        "margin-top": "-20px",
        "display": "inline-block",
        "position": "relative",
        "z-index": 5,
        "opacity": 0
      });
      this.$el.animate({
        opacity: 1
      }, 800, 'linear');
      return null;
    };

    ZoetropeMakeMovie.prototype.updateSettings = function(value) {
      this.webcamfeed.setBrightness(this.bright.percent);
      this.webcamfeed.setContrast(this.contrast.percent);
      return null;
    };

    ZoetropeMakeMovie.prototype.start = function() {
      this.record.enable();
      return null;
    };

    ZoetropeMakeMovie.prototype.toogleRecord = function() {
      if (!this.recording) {
        this.startRecord();
      } else {
        this.stopRecord();
        this.timeline.clear();
      }
      return null;
    };

    ZoetropeMakeMovie.prototype.onDone = function() {
      this.oz().appView.subArea.onClose();
      return null;
    };

    ZoetropeMakeMovie.prototype.startRecord = function() {
      Analytics.track('zoe_click_record');
      SoundController.send("zoetrope_recording_start");
      this.recording = true;
      this.record.changeLabel("<span class='red'>&#149;</span> " + (this.oz().locale.get('zoetrope_stop_recording')));
      this.countdown.on("COUNTDOWN_COMPLETE", this.onCountdownComplete);
      this.countdown.startCountDown();
      return null;
    };

    ZoetropeMakeMovie.prototype.onCountdownComplete = function() {
      this.countdown.stopCountDown();
      this.timeline.addFrame();
      if (this.timeline.currentFrame < this.timeline.numberOfPictures) {
        this.rep = setTimeout(this.countdown.startCountDown, 1000);
      } else {
        this.completed();
      }
      return null;
    };

    ZoetropeMakeMovie.prototype.pause = function() {
      if (this.recording) {
        clearInterval(this.rep);
        this.countdown.stopCountDown();
        this.countdown.off("COUNTDOWN_COMPLETE", this.onCountdownComplete);
        this.recording = false;
      }
      ZoetropeMakeMovie.__super__.pause.call(this);
      return null;
    };

    ZoetropeMakeMovie.prototype.resume = function() {
      if (this.timeline.currentFrame > 0) {
        this.recording = true;
        this.countdown.on("COUNTDOWN_COMPLETE", this.onCountdownComplete);
        this.countdown.startCountDown();
      }
      ZoetropeMakeMovie.__super__.resume.call(this);
      return null;
    };

    ZoetropeMakeMovie.prototype.stopRecord = function() {
      Analytics.track('zoe_stop_record');
      SoundController.send("zoetrope_recording_stop");
      clearInterval(this.rep);
      this.countdown.stopCountDown();
      this.countdown.off("COUNTDOWN_COMPLETE", this.onCountdownComplete);
      this.recording = false;
      this.record.changeLabel("<span>&#149;</span> " + (this.oz().locale.get('zoetrope_start_recording')));
      this.timeline.stop();
      return null;
    };

    ZoetropeMakeMovie.prototype.completed = function() {
      this.stopRecord();
      this.record.off("click");
      this.record.on("click", this.goTryAgain);
      this.share.enable();
      this.done.enable();
      this.timeline.setStatus("end");
      this.webcamfeed.player.showAndPlay(this.timeline.canvas);
      this.get3DTexture();
      return null;
    };

    ZoetropeMakeMovie.prototype.recordOneFrame = function(frame) {
      var _this = this;
      Analytics.track('zoe_replace_image');
      this.countdown.on("COUNTDOWN_COMPLETE", function() {
        return _this.recordFrame(frame);
      });
      this.countdown.startCountDown();
      this.webcamfeed.player.stopIt();
      this.webcamfeed.player.hide(true);
      this.done.disable();
      this.share.disable();
      this.timeline.disableThumbs();
      this.timeline.$el.css({
        "pointer-events": "none"
      });
      return null;
    };

    ZoetropeMakeMovie.prototype.recordFrame = function(frame) {
      this.timeline.$el.css({
        "pointer-events": "auto"
      });
      this.timeline.enableThumbs();
      this.countdown.off("COUNTDOWN_COMPLETE");
      this.timeline.shotOnFrame(frame);
      this.webcamfeed.player.showAndPlay(this.timeline.canvas);
      this.done.enable();
      this.share.enable();
      this.timeline.thumbsArr[frame].onOut();
      this.get3DTexture();
      return null;
    };

    ZoetropeMakeMovie.prototype.addButtons = function() {
      var _this = this;
      this.done = new SimpleButton("done", "" + (this.oz().locale.get('zoetrope_done_button')));
      this.done.on("click", this.onDone);
      this.navContainer.addChild(this.done);
      this.done.disable();
      this.record = new SimpleButton("record", "<span>&#149;</span> " + (this.oz().locale.get('zoetrope_start_recording')));
      this.record.on("click", this.toogleRecord);
      this.navContainer.addChild(this.record);
      this.share = new SimpleButton("share", "" + (this.oz().locale.get('zoetrope_share_movie')));
      this.share.on("click", this.goShare);
      this.navContainer.addChild(this.share);
      this.share.disable();
      setTimeout(function() {
        var w;
        w = Math.max(_this.done.$el.width(), _this.record.$el.width(), _this.share.$el.width());
        _this.done.$el.width(w);
        _this.record.$el.width(w);
        _this.share.$el.width(w);
        return _this.navContainer.show(true);
      }, 300);
      return null;
    };

    ZoetropeMakeMovie.prototype.goTryAgain = function(autostart) {
      if (autostart == null) {
        autostart = true;
      }
      Analytics.track('zoe_create_another');
      this.share.disable();
      this.done.disable();
      this.webcamfeed.player.stopIt();
      this.webcamfeed.player.hide(true);
      this.timeline.clear();
      this.record.off("click");
      this.record.on("click", this.toogleRecord);
      if (autostart) {
        this.toogleRecord();
      }
      return null;
    };

    ZoetropeMakeMovie.prototype.goShare = function() {
      Analytics.track('zoe_share');
      this.share.disable();
      this.done.disable();
      this.oz().appView.subLoader.show(true);
      this.requestSave();
      return null;
    };

    ZoetropeMakeMovie.prototype.requestSave = function() {
      this.data = this.timeline.canvas[0].toDataURL("image/jpeg").slice("data:image/jpeg;base64,".length);
      Requester.addImage(this.data, "zoetrope", this.imageSaved, this.fail);
      return null;
    };

    ZoetropeMakeMovie.prototype.get3DTexture = function() {
      var _this = this;
      this.data = this.timeline.canvas[0].toDataURL("image/jpeg");
      this.img = new Image();
      this.img.onload = function() {
        var i, _i;
        _this.canvasTexture = document.createElement('canvas');
        _this.canvasTexture.width = 384;
        _this.canvasTexture.height = 512;
        _this.ctxTexture = _this.canvasTexture.getContext('2d');
        _this.canvasRef = document.createElement('canvas');
        _this.canvasRef.width = 7200;
        _this.canvasRef.height = 340;
        _this.ctxRef = _this.canvasRef.getContext('2d');
        _this.ctxRef.scale(_this.scale, _this.scale);
        _this.ctxRef.drawImage(_this.img, 0, 0);
        _this.line = 0;
        _this.col = 0;
        for (i = _i = 0; _i < 12; i = ++_i) {
          _this.imgData = _this.ctxRef.getImageData(i * (600 * _this.scale), 0, 600 * _this.scale, 340 * _this.scale);
          _this.w = _this.col * (600 * _this.scale);
          _this.h = 28 + (128 * _this.line);
          _this.ctxTexture.putImageData(_this.imgData, _this.w, _this.h);
          if (_this.col === 2) {
            _this.col = 0;
            _this.line++;
          } else {
            _this.col++;
          }
        }
        return _this.oz().appView.area.updateFilmTexture(_this.canvasTexture);
      };
      this.img.src = this.data;
      return null;
    };

    ZoetropeMakeMovie.prototype.imageSaved = function(data) {
      Requester.shortURL(window.location.origin + "/preview/zoe/" + data.result.id, this.showShareBox, this.fail);
      return null;
    };

    ZoetropeMakeMovie.prototype.fail = function() {
      this.oz().appView.subLoader.showError();
      this.trigger('fail');
      return null;
    };

    ZoetropeMakeMovie.prototype.showShareBox = function(event) {
      this.oz().appView.subLoader.hide();
      this.trigger("SHARE", event.id);
      return null;
    };

    ZoetropeMakeMovie.prototype.dispose = function() {
      this.canvasRef = null;
      this.canvasTexture = null;
      this.webcamfeed.dispose();
      this.webcamfeed.off("COUNTDOWN_COMPLETE");
      this.timeline.off("COMPLETED");
      this.timeline.off("REPLACE_THUMB");
      return null;
    };

    return ZoetropeMakeMovie;

  })(Abstract);

  ZoetropePlayer = (function(_super) {

    __extends(ZoetropePlayer, _super);

    function ZoetropePlayer() {
      this.gotoFrame = __bind(this.gotoFrame, this);
      this.stopIt = __bind(this.stopIt, this);
      this.play = __bind(this.play, this);
      this.nextFrame = __bind(this.nextFrame, this);
      this.showAndPlay = __bind(this.showAndPlay, this);
      this.init = __bind(this.init, this);      return ZoetropePlayer.__super__.constructor.apply(this, arguments);
    }

    ZoetropePlayer.prototype.className = "player";

    ZoetropePlayer.prototype.data = null;

    ZoetropePlayer.prototype.timer = null;

    ZoetropePlayer.prototype.transitionTime = 100;

    ZoetropePlayer.prototype.currentX = 0;

    ZoetropePlayer.prototype.w = 600;

    ZoetropePlayer.prototype.numberOfPictures = 12;

    ZoetropePlayer.prototype.init = function() {
      this.$el.css({
        opacity: 0
      });
      return null;
    };

    ZoetropePlayer.prototype.showAndPlay = function(canvas) {
      this.$el.animate({
        "opacity": 1.0
      }, 700);
      this.$el.css({
        "background-image": "url(" + (canvas[0].toDataURL("image/jpeg")) + ")"
      });
      this.play();
      return null;
    };

    ZoetropePlayer.prototype.nextFrame = function() {
      this.$el.css({
        "background-position-x": "" + this.currentX + "px"
      });
      this.currentX -= this.w;
      if (this.currentX <= -this.w * this.numberOfPictures) {
        this.currentX = 0;
      }
      return null;
    };

    ZoetropePlayer.prototype.play = function() {
      var _this = this;
      clearInterval(this.timer);
      this.timer = setInterval((function() {
        return _this.nextFrame();
      }), this.transitionTime);
      return null;
    };

    ZoetropePlayer.prototype.stopIt = function() {
      clearInterval(this.timer);
      return null;
    };

    ZoetropePlayer.prototype.gotoFrame = function(frame) {
      this.stopIt();
      this.currentX = -(frame * this.w);
      this.$el.css({
        "background-position-x": "" + this.currentX + "px"
      });
      return null;
    };

    return ZoetropePlayer;

  })(Abstract);

  ZoetropeReplaceLabel = (function(_super) {

    __extends(ZoetropeReplaceLabel, _super);

    function ZoetropeReplaceLabel() {
      this.dispose = __bind(this.dispose, this);
      this.hide = __bind(this.hide, this);
      this.showAt = __bind(this.showAt, this);
      this.init = __bind(this.init, this);      return ZoetropeReplaceLabel.__super__.constructor.apply(this, arguments);
    }

    ZoetropeReplaceLabel.prototype.className = "labelContainer";

    ZoetropeReplaceLabel.prototype.label = null;

    ZoetropeReplaceLabel.prototype.init = function() {
      this.label = new Abstract().setElement("<div class='label'></div>");
      this.label.dispose = function() {
        return null;
      };
      this.label.$el.css({
        "height": this.thumbH
      });
      this.addChild(this.label);
      this.hide();
      this.left = new SSAsset("interface", "tooltip_large");
      this.left.$el.css({
        "float": "left",
        "width": "20px"
      });
      this.label.addChild(this.left);
      this.content = $("<div class='content'><div class='text'>" + (this.oz().locale.get('zoetrope_replace')) + "</div></div>");
      this.label.$el.append(this.content);
      this.contentBG = new SSAsset("interface", "tooltip_large");
      this.content.append(this.contentBG.$el);
      this.contentBG.$el.css({
        "position": "relative",
        "width": "20px",
        "margin-top": "-38px",
        "left": "50%",
        "margin-left": "-7px",
        "z-index": "-1",
        "width": "13px",
        "background-position-x": "" + (parseFloat(this.contentBG.$el.css("background-position-x")) - 30) + "px"
      });
      this.right = new SSAsset("interface", "tooltip_large");
      this.label.addChild(this.right);
      this.right.$el.css({
        "float": "left",
        "width": "20px",
        "background-position-x": "" + (parseFloat(this.right.$el.css("background-position-x")) - 52) + "px"
      });
      this.clear = $("div class='clearfix'></div>");
      this.label.$el.append(this.clear);
      return null;
    };

    ZoetropeReplaceLabel.prototype.showAt = function(x) {
      this.label.$el.stop().animate({
        opacity: 1
      });
      this.label.$el.css({
        left: "" + x + "px"
      });
      return null;
    };

    ZoetropeReplaceLabel.prototype.hide = function() {
      this.label.$el.stop().animate({
        opacity: 0
      });
      return null;
    };

    ZoetropeReplaceLabel.prototype.dispose = function() {
      return null;
    };

    return ZoetropeReplaceLabel;

  })(Abstract);

  ZoetropeThumb = (function(_super) {

    __extends(ZoetropeThumb, _super);

    function ZoetropeThumb() {
      this.animate = __bind(this.animate, this);
      this.getRandomColor = __bind(this.getRandomColor, this);
      this.clear = __bind(this.clear, this);
      this.draw = __bind(this.draw, this);
      this.onOut = __bind(this.onOut, this);
      this.onOver = __bind(this.onOver, this);
      this.onMouseDown = __bind(this.onMouseDown, this);
      this.onMouseUp = __bind(this.onMouseUp, this);
      this.onMouseOut = __bind(this.onMouseOut, this);
      this.onMouseOver = __bind(this.onMouseOver, this);
      this.disable = __bind(this.disable, this);
      this.enable = __bind(this.enable, this);
      this.initialize = __bind(this.initialize, this);      return ZoetropeThumb.__super__.constructor.apply(this, arguments);
    }

    ZoetropeThumb.prototype.className = "thumb";

    ZoetropeThumb.prototype.pos = 0;

    ZoetropeThumb.prototype.w = 0;

    ZoetropeThumb.prototype.h = 0;

    ZoetropeThumb.prototype.id = 0;

    ZoetropeThumb.prototype.canvas = null;

    ZoetropeThumb.prototype.initialize = function(id, w, h, gap) {
      ZoetropeThumb.__super__.initialize.call(this);
      this.id = id;
      this.pos = (id * w) + (gap * id);
      this.w = w;
      this.h = h;
      this.$el.css({
        width: w,
        height: h,
        left: this.pos
      });
      this.overlay = new Abstract().setElement("<div class='overlay'></div>");
      this.overlay.$el.css({
        "opacity": 0
      });
      this.overlay.dispose = function() {
        return null;
      };
      this.addChild(this.overlay);
      this.camera = new SSAsset("interface", "camera_icon");
      this.overlay.addChild(this.camera);
      this.canvas = new Abstract().setElement("<canvas width='" + w + "' height='" + h + "' ></canvas>");
      this.canvas.dispose = function() {
        return null;
      };
      this.addChild(this.canvas);
      this.enable();
      return null;
    };

    ZoetropeThumb.prototype.enable = function() {
      this.$el.bind("mouseover", this.onMouseOver);
      this.$el.bind("mouseout", this.onMouseOut);
      this.$el.bind("mouseup", this.onMouseUp);
      this.$el.bind("mousedown", this.onMouseDown);
      return null;
    };

    ZoetropeThumb.prototype.disable = function() {
      this.$el.unbind("mouseover");
      this.$el.unbind("mouseout");
      this.$el.unbind("mouseup");
      this.$el.unbind("mousedown");
      return null;
    };

    ZoetropeThumb.prototype.onMouseOver = function() {
      this.trigger("ON_OVER", this.id, this);
      return null;
    };

    ZoetropeThumb.prototype.onMouseOut = function() {
      this.trigger("ON_OUT", this.id, this);
      return null;
    };

    ZoetropeThumb.prototype.onMouseUp = function(e) {
      this.trigger("ON_MOUSE_UP", this.id, e.pageX, this);
      return null;
    };

    ZoetropeThumb.prototype.onMouseDown = function(e) {
      this.trigger("ON_MOUSE_DOWN", this.id, e.pageX, this);
      return null;
    };

    ZoetropeThumb.prototype.onOver = function() {
      this.overlay.$el.stop().animate({
        "opacity": 1
      }, 400);
      return null;
    };

    ZoetropeThumb.prototype.onOut = function() {
      this.overlay.$el.stop().animate({
        "opacity": 0
      }, 400);
      return null;
    };

    ZoetropeThumb.prototype.draw = function(data) {
      this.canvas.$el.css({
        "opacity": "0"
      });
      this.canvas.$el.animate({
        "opacity": 1
      });
      this.canvas.$el[0].getContext("2d").drawImage(data, 0, 0, this.w, this.h);
      return null;
    };

    ZoetropeThumb.prototype.clear = function() {
      this.canvas.$el[0].getContext("2d").clearRect(0, 0, this.w, this.h);
      return null;
    };

    ZoetropeThumb.prototype.getRandomColor = function() {
      var color, i, letters, _i;
      letters = '0123456789ABCDEF'.split('');
      color = '#';
      for (i = _i = 0; _i < 6; i = ++_i) {
        color += letters[Math.round(Math.random() * 15)];
      }
      return color;
    };

    ZoetropeThumb.prototype.animate = function(from, to) {
      var brightnessF, brightnessI, tween,
        _this = this;
      brightnessI = {
        opacity: from.opacity,
        brightness: from.brightness
      };
      brightnessF = {
        opacity: to.opacity,
        brightness: to.brightness
      };
      tween = new TWEEN.Tween(brightnessI).to(brightnessF, 700);
      tween.easing(TWEEN.Easing.Quadratic.Out);
      tween.onUpdate(function() {
        return _this.canvas.$el.css({
          "opacity": "" + brightnessI.opacity,
          "-webkit-filter": "brightness(" + brightnessI.brightness + "%)"
        });
      });
      tween.start();
      return null;
    };

    return ZoetropeThumb;

  })(Abstract);

  ZoetropeTimeline = (function(_super) {

    __extends(ZoetropeTimeline, _super);

    function ZoetropeTimeline() {
      this.dispose = __bind(this.dispose, this);
      this.enableThumbs = __bind(this.enableThumbs, this);
      this.disableThumbs = __bind(this.disableThumbs, this);
      this.setStatus = __bind(this.setStatus, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.clear = __bind(this.clear, this);
      this.stop = __bind(this.stop, this);
      this.record = __bind(this.record, this);
      this.upThumb = __bind(this.upThumb, this);
      this.clickThumb = __bind(this.clickThumb, this);
      this.outThumb = __bind(this.outThumb, this);
      this.overThumb = __bind(this.overThumb, this);
      this.drawOzElement = __bind(this.drawOzElement, this);
      this.shotOnFrame = __bind(this.shotOnFrame, this);
      this.addFrame = __bind(this.addFrame, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return ZoetropeTimeline.__super__.constructor.apply(this, arguments);
    }

    ZoetropeTimeline.prototype.className = "timeline";

    ZoetropeTimeline.prototype.canvas = null;

    ZoetropeTimeline.prototype.recording = false;

    ZoetropeTimeline.prototype.webcamfeed = null;

    ZoetropeTimeline.prototype.player = null;

    ZoetropeTimeline.prototype.status = null;

    ZoetropeTimeline.prototype.currentFrame = 0;

    ZoetropeTimeline.prototype.numberOfPictures = 12;

    ZoetropeTimeline.prototype.thumbsArr = [];

    ZoetropeTimeline.prototype.thumbs = null;

    ZoetropeTimeline.prototype.thumbslist = null;

    ZoetropeTimeline.prototype.thumbW = 44;

    ZoetropeTimeline.prototype.thumbH = 25;

    ZoetropeTimeline.prototype.thumbGap = 6;

    ZoetropeTimeline.prototype.progress = null;

    ZoetropeTimeline.prototype.mouseX = null;

    ZoetropeTimeline.prototype.thumbToReplace = null;

    ZoetropeTimeline.prototype.initialize = function(webcamfeed, player) {
      this.webcamfeed = webcamfeed;
      this.player = player;
      ZoetropeTimeline.__super__.initialize.call(this);
      return null;
    };

    ZoetropeTimeline.prototype.init = function() {
      var i, thumb, w, _i, _ref;
      this.label = new ZoetropeReplaceLabel;
      this.label.$el.css({
        "height": this.thumbH
      });
      this.addChild(this.label, true);
      this.thumbs = new Abstract().setElement("<div class='thumbs'></div>");
      this.thumbs.dispose = function() {
        return null;
      };
      this.thumbs.$el.css({
        "height": this.thumbH
      });
      this.addChild(this.thumbs);
      this.thumbslist = new Abstract().setElement("<div class='list'></div>");
      this.thumbslist.dispose = function() {
        return null;
      };
      this.thumbs.addChild(this.thumbslist);
      this.thumbsArr = [];
      for (i = _i = 0, _ref = this.numberOfPictures; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        thumb = new ZoetropeThumb(i, this.thumbW, this.thumbH, this.thumbGap);
        thumb.on("ON_OVER", this.overThumb);
        thumb.on("ON_OUT", this.outThumb);
        thumb.on("ON_MOUSE_DOWN", this.clickThumb);
        thumb.on("ON_MOUSE_UP", this.upThumb);
        this.thumbslist.addChild(thumb);
        this.thumbsArr.push(thumb);
      }
      w = this.numberOfPictures * 600;
      this.canvas = $("<canvas width='" + w + "' height='" + 340 + "'></canvas>");
      this.canvas.css({
        "display": "none"
      });
      this.addChild(this.canvas, true);
      return null;
    };

    ZoetropeTimeline.prototype.addFrame = function() {
      this.oz().appView.subArea.makemovie.webcamfeed.flash();
      this.thumbsArr[this.currentFrame].draw(this.webcamfeed[0]);
      this.canvas[0].getContext("2d").drawImage(this.webcamfeed[0], this.currentFrame * 600, 0, 600, 340);
      this.drawOzElement(this.currentFrame);
      this.currentFrame++;
      return null;
    };

    ZoetropeTimeline.prototype.shotOnFrame = function(frame) {
      this.oz().appView.subArea.makemovie.webcamfeed.flash();
      this.thumbsArr[frame].draw(this.webcamfeed[0]);
      this.canvas[0].getContext("2d").drawImage(this.webcamfeed[0], frame * 600, 0, 600, 340);
      this.drawOzElement(frame);
      return null;
    };

    ZoetropeTimeline.prototype.drawOzElement = function(frame) {
      var icon, id;
      id = "fairy_final_" + (frame + 1);
      icon = this.oz().baseAssets.get(id).result;
      this.canvas[0].getContext("2d").drawImage(icon, frame * 600, 0, 600, 340);
      return null;
    };

    ZoetropeTimeline.prototype.overThumb = function(id, target) {
      var pos;
      if (this.status === "end") {
        pos = target.$el.position().left - (this.label.label.$el.width() / 2) + 29;
        this.label.showAt(pos);
        this.player.gotoFrame(id);
        target.onOver();
      }
      return null;
    };

    ZoetropeTimeline.prototype.outThumb = function(id, target) {
      if (this.status === "end") {
        this.label.hide();
        this.player.play();
        target.onOut();
      }
      return null;
    };

    ZoetropeTimeline.prototype.clickThumb = function(id, mouseX, target) {
      if (this.status === "end") {
        this.label.hide();
        this.mouseX = mouseX;
        this.thumbToReplace = id;
      }
      return null;
    };

    ZoetropeTimeline.prototype.upThumb = function(id, mouseX, target) {
      if (this.status === "end" && this.thumbToReplace === id && this.mouseX === mouseX) {
        this.trigger("REPLACE_THUMB", id);
      }
      return null;
    };

    ZoetropeTimeline.prototype.record = function() {
      this.clear();
      return null;
    };

    ZoetropeTimeline.prototype.stop = function() {
      this.currentFrame = 0;
      return null;
    };

    ZoetropeTimeline.prototype.clear = function() {
      var i, _i, _ref;
      this.setStatus("normal");
      this.thumbs.$el[0].scrollLeft = 0;
      this.canvas[0].getContext('2d').clearRect(0, 0, this.canvas.width(), this.thumbH);
      for (i = _i = 0, _ref = this.numberOfPictures; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.thumbsArr[i].clear();
      }
      return;
      return null;
    };

    ZoetropeTimeline.prototype.onEnterFrame = function() {
      return null;
    };

    ZoetropeTimeline.prototype.setStatus = function(status) {
      this.status = status;
      return null;
    };

    ZoetropeTimeline.prototype.disableThumbs = function() {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.numberOfPictures; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.thumbsArr[i].disable();
      }
      return;
      return null;
    };

    ZoetropeTimeline.prototype.enableThumbs = function() {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.numberOfPictures; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.thumbsArr[i].enable();
      }
      return;
      return null;
    };

    ZoetropeTimeline.prototype.dispose = function() {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.numberOfPictures; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.thumbsArr[i].off("ON_OUT");
        this.thumbsArr[i].off("ON_OVER");
        this.thumbsArr[i].off("ON_MOUSE_DOWN");
        this.thumbsArr[i].off("ON_MOUSE_UP");
      }
      return;
      return null;
    };

    return ZoetropeTimeline;

  })(Abstract);

  ZoetropeWebcamFeed = (function(_super) {

    __extends(ZoetropeWebcamFeed, _super);

    function ZoetropeWebcamFeed() {
      this.dispose = __bind(this.dispose, this);
      this.animate = __bind(this.animate, this);
      this.setContrast = __bind(this.setContrast, this);
      this.setBrightness = __bind(this.setBrightness, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.addTexture = __bind(this.addTexture, this);
      this.flash = __bind(this.flash, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return ZoetropeWebcamFeed.__super__.constructor.apply(this, arguments);
    }

    ZoetropeWebcamFeed.prototype.className = "webcamfeed";

    ZoetropeWebcamFeed.prototype.canvas = null;

    ZoetropeWebcamFeed.prototype.filtered = null;

    ZoetropeWebcamFeed.prototype.player = null;

    ZoetropeWebcamFeed.prototype.videoW = 640;

    ZoetropeWebcamFeed.prototype.videoH = 360;

    ZoetropeWebcamFeed.prototype.countdown = null;

    ZoetropeWebcamFeed.prototype.camera = null;

    ZoetropeWebcamFeed.prototype.brightness = {
      min: -70,
      max: 70,
      current: 0
    };

    ZoetropeWebcamFeed.prototype.contrast = {
      min: -0.7,
      max: 0.7,
      current: 0
    };

    ZoetropeWebcamFeed.prototype.saturation = 0;

    ZoetropeWebcamFeed.prototype.flasher = null;

    ZoetropeWebcamFeed.prototype.initialize = function(_camera) {
      this.camera = _camera;
      ZoetropeWebcamFeed.__super__.initialize.call(this);
      return null;
    };

    ZoetropeWebcamFeed.prototype.init = function() {
      this.flasher = $("<div class='flasher'></div>");
      this.addChild(this.flasher);
      this.flasher.css({
        opacity: 0
      });
      this.canvas = $("<canvas class='videocanvas' width='600' height='340'/>");
      this.addChild(this.canvas);
      this.player = new ZoetropePlayer();
      this.addChild(this.player, true);
      this.canvas[0].getContext("2d").translate(600, 0);
      this.canvas[0].getContext("2d").scale(-1, 1);
      this.camera.get();
      return null;
    };

    ZoetropeWebcamFeed.prototype.flash = function() {
      var _this = this;
      this.flasher.stop().animate({
        opacity: 0.8
      }, {
        duration: 300,
        complete: function() {
          return _this.flasher.stop().animate({
            opacity: 0
          }, {
            duration: 600
          });
        }
      });
      return null;
    };

    ZoetropeWebcamFeed.prototype.addTexture = function() {
      var img,
        _this = this;
      img = new Image();
      img.onload = function() {
        _this.texture[0].width = img.width;
        _this.texture[0].height = img.height;
        return _this.texture[0].getContext("2d").drawImage(img, 0, 0, img.width, img.height);
      };
      img.src = "../img/zoetrope/zoetrope_canvas_texture.png";
      return null;
    };

    ZoetropeWebcamFeed.prototype.onEnterFrame = function() {
      this.canvas[0].getContext("2d").drawImage(this.oz().cam.dom(), 0, 0, this.canvas.width(), this.canvas.height(), 0, 0, this.canvas.width(), this.canvas.height());
      return null;
    };

    ZoetropeWebcamFeed.prototype.setBrightness = function(brightness) {
      this.brightness.current = (brightness * (this.brightness.max - this.brightness.min) / 100) + this.brightness.min;
      return null;
    };

    ZoetropeWebcamFeed.prototype.setContrast = function(contrast) {
      this.contrast.current = (contrast * (this.contrast.max - this.contrast.min) / 100) + this.contrast.min;
      return null;
    };

    ZoetropeWebcamFeed.prototype.animate = function(from, to) {
      var brightnessF, brightnessI, tween,
        _this = this;
      brightnessI = {
        opacity: from.opacity,
        brightness: from.brightness
      };
      brightnessF = {
        opacity: to.opacity,
        brightness: to.brightness
      };
      tween = new TWEEN.Tween(brightnessI).to(brightnessF, 700);
      tween.easing(TWEEN.Easing.Quadratic.Out);
      tween.onUpdate(function() {
        return _this.canvas.$el.css({
          "opacity": "" + brightnessI.opacity,
          "-webkit-filter": "brightness(" + brightnessI.brightness + "%)"
        });
      });
      tween.start();
      return null;
    };

    ZoetropeWebcamFeed.prototype.dispose = function() {
      this.canvas.remove();
      this.oz().cam.dispose();
      return null;
    };

    return ZoetropeWebcamFeed;

  })(Abstract);

  Storm = (function(_super) {

    __extends(Storm, _super);

    function Storm() {
      this.dispose = __bind(this.dispose, this);
      this.createAxis = __bind(this.createAxis, this);
      this.v = __bind(this.v, this);
      this.debugaxis = __bind(this.debugaxis, this);
      this.onResize = __bind(this.onResize, this);
      this.flipBalloon = __bind(this.flipBalloon, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.onUnLock = __bind(this.onUnLock, this);
      this.onLock = __bind(this.onLock, this);
      this.onLockMouseMove = __bind(this.onLockMouseMove, this);
      this.onDocumentMouseMove = __bind(this.onDocumentMouseMove, this);
      this.addPlane = __bind(this.addPlane, this);
      this.changeView = __bind(this.changeView, this);
      this.activate = __bind(this.activate, this);
      this.init = __bind(this.init, this);      return Storm.__super__.constructor.apply(this, arguments);
    }

    Storm.prototype.clock = null;

    Storm.prototype.APP_HEIGHT = 800;

    Storm.prototype.APP_WIDTH = 600;

    Storm.prototype.APP_HALF_X = 800 / 2;

    Storm.prototype.APP_HALF_Y = 600 / 2;

    Storm.prototype.mouseX = 0;

    Storm.prototype.mouseY = 0;

    Storm.prototype.followX = 0;

    Storm.prototype.followY = 0;

    Storm.prototype.cubeRefMesh = null;

    Storm.prototype.bal = null;

    Storm.prototype.sl1 = null;

    Storm.prototype.sl2 = null;

    Storm.prototype.sl3 = null;

    Storm.prototype.sl4 = null;

    Storm.prototype.currentScale = 0.3;

    Storm.prototype.speed = 1;

    Storm.prototype.running = true;

    Storm.prototype.init = function() {
      var ambient, cube;
      this.clock = new THREE.Clock();
      this.APP_WIDTH = $(window).width();
      this.APP_HEIGHT = $(window).height();
      this.renderer = new THREE.WebGLRenderer({
        canvas: this.oz().appView.renderCanvas3D,
        antialias: true,
        clearAlpha: 1,
        clearColor: 0x000000
      });
      this.renderer.setSize(this.APP_WIDTH, this.APP_HEIGHT);
      this.camera = new THREE.PerspectiveCamera(75, this.APP_WIDTH / this.APP_HEIGHT, 10, 100000);
      this.camera.position.set(0, 0, 40);
      this.camera.updateMatrix();
      this.scene = new THREE.Scene();
      ambient = new THREE.AmbientLight(0xFFFFFF);
      this.scene.add(ambient);
      cube = new THREE.CubeGeometry(1, 1, 1);
      this.cubeRefMesh = new THREE.Mesh(cube, new THREE.MeshLambertMaterial({
        color: 0xFFFFFF
      }));
      this.sl1 = this.addPlane(2000, 227, 1.0, 1100, 0, -80, 0, 0, 0, "/models/textures/stormsky/storm/sl1.png");
      this.sl2 = this.addPlane(2000, 227, 1.0, 1100, 0, -90, 0, 0, 0, "/models/textures/stormsky/storm/sl2.png");
      this.sl3 = this.addPlane(2100, 327, 1.0, 1000, 0, -100, 0, 0, 0, "/models/textures/stormsky/storm/sl3.png");
      this.bal = this.addPlane(212, 315, 0.3, 0, 0, -150, 0, 0, 0, "/models/textures/stormsky/storm/balloon.png");
      this.sl4 = this.addPlane(2500, 374, 1.0, 900, 0, -180, 0, 0, 0, "/models/textures/stormsky/storm/sl4.png");
      this.scene.add(this.sl1);
      this.scene.add(this.sl2);
      this.scene.add(this.sl3);
      this.scene.add(this.bal);
      this.scene.add(this.sl4);
      this.onResize();
      return this.trigger('onWorldLoaded');
    };

    Storm.prototype.activate = function() {
      return $('body').bind('click', this.pointLock);
    };

    Storm.prototype.changeView = function() {
      return this;
    };

    Storm.prototype.addPlane = function(w, h, scale, x, y, z, rx, ry, rz, mat) {
      var plane, planeGeom, planeMat, planeText;
      planeGeom = new THREE.PlaneGeometry(w, h, 39, 9);
      planeText = THREE.ImageUtils.loadTexture(mat);
      planeMat = new THREE.MeshLambertMaterial({
        color: 0x00ff80,
        ambient: 0xFFFFFF,
        shading: THREE.SmoothShading,
        map: planeText,
        transparent: true,
        wireframe: false,
        side: THREE.DoubleSide
      });
      plane = new THREE.Mesh(planeGeom, planeMat);
      plane.scale.x = plane.scale.y = plane.scale.z = scale;
      plane.position.x = x;
      plane.position.y = y;
      plane.position.z = z;
      plane.rotation.x = rx;
      plane.rotation.y = ry;
      plane.rotation.z = rz;
      plane.updateMatrix();
      return plane;
    };

    Storm.prototype.initSky = function() {
      var cubeShader, format, material, path, skyText, urls;
      path = "/models/textures/stormsky/";
      format = '.png';
      urls = [path + 'posx' + format, path + 'negx' + format, path + 'posy' + format, path + 'negy' + format, path + 'negz' + format, path + 'posz' + format];
      skyText = THREE.ImageUtils.loadTextureCube(urls);
      skyText.format = THREE.RGBFormat;
      cubeShader = new IFLSkyCubeShader;
      cubeShader.uniforms["tCube"].value = skyText;
      cubeShader.uniforms["tFlip"].value = true;
      material = new THREE.ShaderMaterial({
        fragmentShader: cubeShader.fragmentShader,
        vertexShader: cubeShader.vertexShader,
        uniforms: cubeShader.uniforms,
        depthWrite: false,
        side: THREE.BackSide
      });
      this.skyCube = new THREE.Mesh(new THREE.CubeGeometry(10000, 10000, 10000), material);
      this.skyCube.name = "skyCube";
      return this.scene.add(this.skyCube);
    };

    Storm.prototype.onDocumentMouseMove = function(event) {
      this.mouseX = event.clientX - (this.APP_WIDTH / 2);
      return this.mouseY = event.clientY - (this.APP_HEIGHT / 2);
    };

    Storm.prototype.onLockMouseMove = function(event) {
      var e, mX, mY;
      e = event.originalEvent;
      mX = e.movementX || e.mozMovementX || e.webkitMovementX || 0;
      mY = e.movementY || e.mozMovementY || e.webkitMovementY || 0;
      this.mouseX += mX * 1.2;
      return this.mouseY += mY;
    };

    Storm.prototype.onLock = function() {
      return this;
    };

    Storm.prototype.onUnLock = function() {
      this.mouseX = 0;
      return this.mouseY = 0;
    };

    Storm.prototype.onEnterFrame = function() {
      var delta, moveX, moveY, r;
      if (this.running) {
        delta = this.clock.getDelta();
        moveX = (this.mouseX - this.followX) / 10;
        moveY = (this.mouseY - this.followY) / 10;
        this.followX += moveX;
        this.followY += moveY;
        this.sl4.position.y = this.followY / 40;
        this.bal.position.y = this.followY / 20;
        this.sl3.position.y = this.followY / 30;
        this.sl2.position.y = this.followY / 50;
        this.sl1.position.y = this.followY / 60;
        this.speed = this.followX / (this.APP_WIDTH / 2);
        this.sl4.position.x -= this.speed;
        this.sl3.position.x -= this.speed * 1.1;
        this.sl2.position.x -= this.speed * 1.2;
        this.sl1.position.x -= this.speed * 1.3;
        if (this.sl4.position.x < -1150) {
          $('body').unbind('click', this.pointLock);
          this.running = false;
          this.oz().appView.subArea.playVideo();
          this.releasePointLock();
          return;
        }
        r = Date.now() * 0.002;
        this.bal.rotation.z = -0.2 * this.speed;
        this.bal.rotation.x = 0.1 * Math.cos(r);
        this.bal.rotation.y = 0.1 * Math.cos(r);
        /*if @followX > 0
            @flipBalloon 0.3
        else
            @flipBalloon -0.3
        */

        this.renderer.clear();
        this.renderer.render(this.scene, this.camera);
        return TWEEN.update();
      }
    };

    Storm.prototype.flipBalloon = function(scale) {
      var position, target, tween;
      if (scale !== this.currentScale) {
        position = {
          model: this.bal,
          scale: this.currentScale
        };
        target = {
          scale: scale
        };
        tween = new TWEEN.Tween(position).to(target, 700);
        tween.easing(TWEEN.Easing.Quadratic.Out);
        tween.onUpdate(function() {
          return position.model.scale.x = position.scale;
        });
        tween.start();
        return this.currentScale = scale;
      }
    };

    Storm.prototype.onResize = function() {
      this.APP_WIDTH = $(window).width();
      this.APP_HEIGHT = $(window).height();
      this.APP_HALF_X = this.APP_WIDTH / 2;
      this.APP_HALF_Y = this.APP_HEIGHT / 2;
      this.camera.aspect = this.APP_WIDTH / this.APP_HEIGHT;
      this.camera.updateProjectionMatrix();
      return this.renderer.setSize(this.APP_WIDTH, this.APP_HEIGHT);
    };

    Storm.prototype.debugaxis = function(axisLength) {
      this.createAxis(this.v(-axisLength, 0, 0), this.v(axisLength, 0, 0), 0xFF0000);
      this.createAxis(this.v(0, -axisLength, 0), this.v(0, axisLength, 0), 0x00FF00);
      return this.createAxis(this.v(0, 0, -axisLength), this.v(0, 0, axisLength), 0x0000FF);
    };

    Storm.prototype.v = function(x, y, z) {
      return new THREE.Vector3(x, y, z);
    };

    Storm.prototype.createAxis = function(p1, p2, color) {
      var line, lineGeometry, lineMat;
      line = new THREE.Geometry;
      lineGeometry = new THREE.Geometry;
      lineMat = new THREE.LineBasicMaterial({
        color: color,
        lineWidth: 1
      });
      lineGeometry.vertices.push(p1, p2);
      line = new THREE.Line(lineGeometry, lineMat);
      return this.scene.add(line);
    };

    Storm.prototype.dispose = function() {
      this.releasePointLock();
      $('body').unbind('click', this.pointLock);
      this.renderer = null;
      return this;
    };

    return Storm;

  })(AbstractChapter);

  Stormtest = (function(_super) {

    __extends(Stormtest, _super);

    function Stormtest() {
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.onResize = __bind(this.onResize, this);
      this.instanceBasicMaterial = __bind(this.instanceBasicMaterial, this);
      this.instanceFresnelMaterial = __bind(this.instanceFresnelMaterial, this);
      this.instanceMaterial = __bind(this.instanceMaterial, this);
      this.instanceAnimation = __bind(this.instanceAnimation, this);
      this.onSceneLoaded = __bind(this.onSceneLoaded, this);
      this.onSceneProgress = __bind(this.onSceneProgress, this);
      this.onTexLoaded = __bind(this.onTexLoaded, this);
      this.onWorldProgress = __bind(this.onWorldProgress, this);
      this.onRestart = __bind(this.onRestart, this);
      this.randomRange = __bind(this.randomRange, this);
      this.onKeyDown = __bind(this.onKeyDown, this);
      this.onLockMouseMove = __bind(this.onLockMouseMove, this);
      this.onMouseClick = __bind(this.onMouseClick, this);
      this.changeView = __bind(this.changeView, this);      return Stormtest.__super__.constructor.apply(this, arguments);
    }

    Stormtest.prototype.SCENE_SCALE = 1 / 12;

    Stormtest.prototype.CAMERA_DATA_FPS = 25;

    Stormtest.prototype.CAMERA_ORBIT_H = 0.7;

    Stormtest.prototype.CAMERA_ORBIT_V = 0.5;

    Stormtest.prototype.SPEED_MIN = 0.50;

    Stormtest.prototype.SPEED_MAX = 2.00;

    Stormtest.prototype.TIME_ENTER_TORNADO = 22.2;

    Stormtest.prototype.TIME_END = 45;

    Stormtest.prototype.MAX_DROPS = 60;

    Stormtest.prototype.MIN_SAMPLES = 2;

    Stormtest.prototype.MAX_SAMPLES = 16;

    Stormtest.prototype.Q_STR = null;

    Stormtest.prototype.Q_EXT = null;

    Stormtest.prototype.Q_LOADER = null;

    Stormtest.prototype.Q_DROPS = true;

    Stormtest.prototype.OPTIONS = {
      tornadoRotation: 0.9,
      envmapMul: 10.0,
      envmapMix: 0.76,
      envmapPow: 0.57,
      specmapMul: 0.57,
      specmapPow: 0.1,
      cubeX: -126.0,
      cubeY: 107.0,
      cubeZ: 51.0,
      overrideValues: false,
      dropsRatio: 0.07,
      dropsScale: 1.0
    };

    Stormtest.prototype.L_TEX = 0;

    Stormtest.prototype.L_TEXNUM = 49;

    Stormtest.prototype.L_LOADTEX = 0;

    Stormtest.prototype.L_LOADSCENE = 0;

    Stormtest.prototype.enableRender = false;

    Stormtest.prototype.stormAnimTime = 0;

    Stormtest.prototype.stormState = 0;

    Stormtest.prototype.sceneRT = null;

    Stormtest.prototype.hudRT = null;

    Stormtest.prototype.tornadoSamples = 8;

    Stormtest.prototype.tornadoW = null;

    Stormtest.prototype.tornadoH = null;

    Stormtest.prototype.tornadoShader = null;

    Stormtest.prototype.tornadoMaterial = null;

    Stormtest.prototype.tornadoTexture = true;

    Stormtest.prototype.tornadoRT = null;

    Stormtest.prototype.tornadoFilter = true;

    Stormtest.prototype.sal2xShader = null;

    Stormtest.prototype.sal2xMaterial = null;

    Stormtest.prototype.texClouds = null;

    Stormtest.prototype.texWhite = null;

    Stormtest.prototype.texDrops = [];

    Stormtest.prototype.drops = [];

    Stormtest.prototype.dropsTime = 0;

    Stormtest.prototype.dropsRatio = 0.15;

    Stormtest.prototype.dropsScale = 0.7;

    Stormtest.prototype.godrays = null;

    Stormtest.prototype.timeFps = 0;

    Stormtest.prototype.fpsCur = 0;

    Stormtest.prototype.fpsAcc = 0;

    Stormtest.prototype.fpsCount = 0;

    Stormtest.prototype.audioListener = null;

    Stormtest.prototype.stormControls = null;

    Stormtest.prototype.cameraPosData = null;

    Stormtest.prototype.cameraTgtData = null;

    Stormtest.prototype.matTranslate = new THREE.Matrix4();

    Stormtest.prototype.matRotX = new THREE.Matrix4();

    Stormtest.prototype.matRotY = new THREE.Matrix4();

    Stormtest.prototype.matInverse = new THREE.Matrix4();

    Stormtest.prototype.matTornado = new THREE.Matrix4();

    Stormtest.prototype.debrisOutside = [];

    Stormtest.prototype.debrisInside = [];

    Stormtest.prototype.debrisOrgan = [];

    Stormtest.prototype.sceneLoaded = false;

    Stormtest.prototype.textureLoaded = false;

    Stormtest.prototype.loadingDone = false;

    Stormtest.prototype.animStarted = false;

    Stormtest.prototype.animPaused = false;

    Stormtest.prototype.mousePos = {
      x: 0,
      y: 0
    };

    Stormtest.prototype.curPos = {
      x: 0,
      y: 0
    };

    Stormtest.prototype.prevPos = {
      x: 0,
      y: 0
    };

    Stormtest.prototype.changeView = function() {
      return this.onCameraReady();
    };

    Stormtest.prototype.onMouseClick = function(event) {
      if (!(this.enableMouse && this.animStarted)) {
        return;
      }
      if (!this.animPaused || !this.stormControls) {
        this.pointLock();
      }
      return Stormtest.__super__.onMouseClick.apply(this, arguments);
    };

    Stormtest.prototype.onLockMouseMove = function(event) {
      var MOUSE_RANGE_X, MOUSE_RANGE_Y, SPEED, e;
      SPEED = 0.3;
      MOUSE_RANGE_X = 400;
      MOUSE_RANGE_Y = 400;
      e = event.originalEvent;
      this.prevPos.x += e.webkitMovementX * SPEED;
      this.prevPos.y += e.webkitMovementY * SPEED;
      this.prevPos.x = UTILS.clamp(this.prevPos.x, -MOUSE_RANGE_X, MOUSE_RANGE_X);
      this.prevPos.y = UTILS.clamp(this.prevPos.y, -MOUSE_RANGE_Y, MOUSE_RANGE_Y);
      this.mousePos.x = this.prevPos.x / MOUSE_RANGE_X;
      this.mousePos.y = this.prevPos.y / MOUSE_RANGE_Y;
      this.pickMouse.x = (event.clientX / this.APP_WIDTH) * 2 - 1;
      return this.pickMouse.y = -(event.clientY / this.APP_HEIGHT) * 2 + 1;
    };

    Stormtest.prototype.onKeyDown = function(event) {
      Stormtest.__super__.onKeyDown.call(this, event);
      if (this.oz().appView.debugMode) {
        if (event.ctrlKey && event.keyCode === 66) {
          this.onRestart(true);
        }
        if (event.ctrlKey && event.keyCode === 65) {
          this.animPaused = !this.animPaused;
          if (this.animPaused) {
            this.releasePointLock();
            SoundController.send("storm_scene_pause");
            this.CAMERA_ORBIT_H = Math.PI / 2.0;
            this.CAMERA_ORBIT_V = Math.PI / 2.5;
          } else {
            this.pointLock();
            SoundController.send("storm_scene_resume");
            this.CAMERA_ORBIT_H = 0.7;
            this.CAMERA_ORBIT_V = 0.5;
          }
        }
        /*
                    if event.ctrlKey && event.keyCode == 77
                        @scene.remove( cloud ) for cloud in @farclouds
                        @farclouds = @addCloudsFar( 180,-14,80, 80,1,60, 25, 'far43' )
                        @scene.add( cloud ) for cloud in @farclouds
        
                        @scene.remove( cloud ) for cloud in @fdclouds
                        mesh = @fdclouds.mesh
                        @fdclouds = @addClouds( mesh, 90,35,90, 160, false, 'fd20' )
                        @fdclouds.mesh = mesh
                        @scene.add( cloud ) for cloud in @fdclouds
        */

      }
    };

    Stormtest.prototype.randomRangeInt = function(lower, upper) {
      var start, _ref, _ref1;
      if (upper == null) {
        upper = 0;
      }
      start = Math.random();
      if (lower == null) {
        _ref = [0, lower], lower = _ref[0], upper = _ref[1];
      }
      if (lower > upper) {
        _ref1 = [upper, lower], lower = _ref1[0], upper = _ref1[1];
      }
      return Math.floor(start * (upper - lower + 1) + lower);
    };

    Stormtest.prototype.randomRange = function(lower, upper) {
      return Math.random() * (upper - lower) + lower;
    };

    Stormtest.prototype.normalizeAngle = function(angle) {
      return Math.atan(Math.sin(angle, Math.cos(angle))) + Math.PI;
    };

    Stormtest.prototype.animateParam = function(value, valuefin, time, timeini, timeend) {
      if (time < timeini) {
        return value;
      }
      if (time > timeend) {
        return valuefin;
      }
      return UTILS.lerp(UTILS.time01(time, timeini, timeend - timeini), value, valuefin);
    };

    Stormtest.prototype.initQuality = function() {
      this.quality = this.oz().appView.displayQuality;
      switch (this.quality) {
        case "low":
          this.SCENE_WIDTH = this.APP_WIDTH * 0.75;
          this.SCENE_HEIGHT = this.APP_HEIGHT * 0.75;
          this.MIN_SAMPLES = 8;
          this.MAX_SAMPLES = 16;
          this.Q_STR = "_low";
          break;
        case "med":
          this.SCENE_WIDTH = this.APP_WIDTH * 0.75;
          this.SCENE_HEIGHT = this.APP_HEIGHT * 0.75;
          this.MIN_SAMPLES = 4;
          this.MAX_SAMPLES = 12;
          this.Q_STR = "_low";
          break;
        case "hi":
          this.SCENE_WIDTH = this.APP_WIDTH;
          this.SCENE_HEIGHT = this.APP_HEIGHT;
          this.MIN_SAMPLES = 4;
          this.MAX_SAMPLES = 12;
          this.Q_STR = "";
      }
      if (this.oz().appView.ddsSupported) {
        this.Q_EXT = ".dds";
        this.Q_LOADER = THREE.ImageUtils.loadCompressedTexture;
        this.Q_DROPS = true;
      } else {
        this.Q_STR = "_low";
        this.Q_EXT = ".png";
        this.Q_LOADER = THREE.ImageUtils.loadTexture;
        this.Q_DROPS = false;
      }
      this.tornadoSamples = this.MIN_SAMPLES;
      this.tornadoW = this.APP_WIDTH / this.tornadoSamples;
      this.tornadoH = this.APP_HEIGHT / this.tornadoSamples;
      if (!this.hudRT) {
        this.hudRT = new Hud(this.renderer, this.SCENE_WIDTH, this.SCENE_HEIGHT, false, false);
      } else {
        this.hudRT.resize(this.SCENE_WIDTH, this.SCENE_HEIGHT);
      }
    };

    Stormtest.prototype.init = function() {
      Stormtest.__super__.init.apply(this, arguments);
      document.addEventListener('mouseup', this.onMouseUp, false);
      document.addEventListener('mousedown', this.onMouseDown, false);
      document.addEventListener('click', this.onMouseClick, false);
      this.initQuality();
      this.scene.fog.far = 10000000;
      this.renderer.gammaInput = false;
      this.renderer.gammaOutput = false;
      this.renderer.sortObjects = true;
      this.renderer.shadowMapEnabled = false;
      this.renderer.shadowMapSoft = false;
      this.camera.fov = 43;
      this.camera.near = 1;
      this.camera.far = 10000;
      this.params.cameraFOV = 43;
      this.params.colorCorrectionPow = "#000000";
      this.params.colorCorrectionPowM = 1;
      this.params.colorCorrectionMul = "#FFFFFF";
      this.params.colorCorrectionMulM = 1;
      this.params.colorCorrectionSaturation = 0;
      this.params.colorCorrectionSaturationColors = "#FFFFFF";
      this.params.bloomPower = 0.39;
      this.params.fogcolor = "#caa46f";
      this.effectBloom.enabled = false;
      this.colorCorrection.uniforms.vignetteOffset.value = 1;
      this.colorCorrection.uniforms.vignetteDarkness.value = 1;
      if (this.oz().appView.debugMode) {
        this.stormControls = new THREE.FirstPersonControls(this.camera, this.oz().appView.wrapper.el);
      }
      this.initCameraData();
      this.initSun();
      this.loader = new IFLLoader;
      this.loader.enableMaterialCache = false;
      this.loader.enableTextureCache = false;
      this.loader.pickableObjects = [];
      this.loader.customMaterialInstancer = this.instanceMaterial;
      this.loader.load("/models/storm.if3d", this.onSceneLoaded, this.onSceneProgress);
      this.onColorCorrectionChange();
      this.initGodrays();
      this.initTornado();
      this.initDrops();
      if (this.oz().appView.debugMode) {
        this.initGUI();
      }
      this.onResize();
      this.$el.bind('click', this.onMouseClick);
      this.$el.bind('mousedown', this.onMouseDown);
      return this.$el.bind('mouseup', this.onMouseUp);
    };

    Stormtest.prototype.initGodrays = function() {
      var godraysCombineShader, godraysGenShader;
      this.godrays = {
        enabled: false
      };
      this.godrays.depthMaterial = new THREE.MeshBasicMaterial({
        color: 0xFFFFFF,
        map: null
      });
      this.godrays.depthMaterialSkinned = new THREE.MeshLambertMaterial({
        color: 0xFFFFFF,
        ambient: 0xFFFFFF,
        specular: 0xFFFFFF,
        skinning: true,
        lights: false
      });
      this.godrays.scene = new THREE.Scene();
      this.godrays.camera = new THREE.OrthographicCamera(this.SCENE_WIDTH / -2, this.SCENE_WIDTH / 2, this.SCENE_HEIGHT / 2, this.SCENE_HEIGHT / -2, -10000, 10000);
      this.godrays.camera.position.z = 1000;
      this.godrays.scene.add(this.godrays.camera);
      godraysGenShader = THREE.ShaderGodRays["godrays_generate"];
      this.godrays.godrayGenUniforms = THREE.UniformsUtils.clone(godraysGenShader.uniforms);
      this.godrays.materialGodraysGenerate = new THREE.ShaderMaterial({
        uniforms: this.godrays.godrayGenUniforms,
        vertexShader: godraysGenShader.vertexShader,
        fragmentShader: godraysGenShader.fragmentShader
      });
      godraysCombineShader = THREE.ShaderGodRays["godrays_combine"];
      this.godrays.godrayCombineUniforms = THREE.UniformsUtils.clone(godraysCombineShader.uniforms);
      this.godrays.materialGodraysCombine = new THREE.ShaderMaterial({
        uniforms: this.godrays.godrayCombineUniforms,
        vertexShader: godraysCombineShader.vertexShader,
        fragmentShader: godraysCombineShader.fragmentShader
      });
      this.godrays.quad = new THREE.Mesh(new THREE.PlaneGeometry(this.SCENE_WIDTH, this.SCENE_HEIGHT), this.godrays.materialGodraysGenerate);
      this.godrays.quad.position.z = -3000;
      return this.godrays.scene.add(this.godrays.quad);
    };

    Stormtest.prototype.initSun = function() {
      var flareColor, sunLight, textureFlare0, textureFlare3,
        _this = this;
      sunLight = new THREE.AmbientLight();
      this.scene.add(sunLight);
      textureFlare0 = THREE.ImageUtils.loadTexture("/models/textures/lensflare/lensflare0_low.png", null, this.onTexLoaded);
      textureFlare3 = THREE.ImageUtils.loadTexture("/models/textures/lensflare/hexangle.png", null, this.onTexLoaded);
      flareColor = new THREE.Color(0xFFFFFF);
      this.lensFlare = new THREE.LensFlare(textureFlare0, 1000, 0.0, THREE.AdditiveBlending, flareColor);
      this.lensFlare.add(textureFlare3, 60, 0.6, THREE.AdditiveBlending);
      this.lensFlare.add(textureFlare3, 70, 0.7, THREE.AdditiveBlending);
      this.lensFlare.add(textureFlare3, 120, 0.9, THREE.AdditiveBlending);
      this.lensFlare.add(textureFlare3, 70, 1.0, THREE.AdditiveBlending);
      return this.lensFlare.customUpdateCallback = function(object) {
        var flare, vecX, vecY, _i, _len, _ref;
        vecX = -object.positionScreen.x * 2;
        vecY = -object.positionScreen.y * 2;
        _ref = object.lensFlares;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          flare = _ref[_i];
          flare.x = object.positionScreen.x + vecX * flare.distance;
          flare.y = object.positionScreen.y + vecY * flare.distance;
          flare.rotation = 0;
        }
        object.lensFlares[2].y += 0.025;
        return object.lensFlares[3].rotation = object.positionScreen.x * 0.5 + 45 * Math.PI / 180;
      };
    };

    Stormtest.prototype.initTornado = function() {
      var format, path, urls, win;
      this.tornadoW = this.SCENE_WIDTH / this.tornadoSamples;
      this.tornadoH = this.SCENE_HEIGHT / this.tornadoSamples;
      this.TORNADO_POS = new THREE.Vector3(0, -500 * this.SCENE_SCALE, -400 * this.SCENE_SCALE);
      format = this.Q_STR + '.png';
      path = "/models/textures/storm/Env/earth_diff_";
      urls = [path + 'posx' + format, path + 'negx' + format, path + 'posy' + format, path + 'negy' + format, path + 'negz' + format, path + 'posz' + format];
      this.tornadoEnvMap = THREE.ImageUtils.loadTextureCube(urls, null, this.onTexLoaded);
      this.tornadoEnvMap.format = THREE.RGBFormat;
      path = "/models/textures/storm/Env/earth_spec_";
      urls = [path + 'posx' + format, path + 'negx' + format, path + 'posy' + format, path + 'negy' + format, path + 'negz' + format, path + 'posz' + format];
      this.tornadoSpecMap = THREE.ImageUtils.loadTextureCube(urls, null, this.onTexLoaded);
      this.tornadoSpecMap.format = THREE.RGBFormat;
      this.tornadoTexture = THREE.ImageUtils.loadTexture("/models/textures/storm/tornado.png", null, this.onTexLoaded);
      this.tornadoTexture.flipY = true;
      this.tornadoTexture.wrapS = this.tornadoTexture.wrapT = THREE.RepeatWrapping;
      win = false;
      this.tornadoShader = win ? new IFLTornadoShaderWin : new IFLTornadoShader;
      this.tornadoMaterial = new THREE.ShaderMaterial({
        vertexShader: this.tornadoShader.vertexShader,
        fragmentShader: this.tornadoShader.fragmentShader,
        uniforms: this.tornadoShader.uniforms,
        depthTest: false,
        depthWrite: false,
        transparent: true,
        map: this.tornadoTexture
      });
      this.tornadoMaterial.uniforms["resolution"].value = new THREE.Vector2(this.tornadoW, this.tornadoH);
      this.tornadoMaterial.uniforms["tDiffuse"].value = this.tornadoTexture;
      this.sal2xShader = new IFLSal2x;
      this.sal2xMaterial = new THREE.ShaderMaterial({
        vertexShader: this.sal2xShader.vertexShader,
        fragmentShader: this.sal2xShader.fragmentShader,
        uniforms: this.sal2xShader.uniforms,
        depthTest: false,
        depthWrite: false,
        transparent: true
      });
      this.sal2xMaterial.uniforms["resolution"].value = new THREE.Vector2(this.SCENE_WIDTH, this.SCENE_HEIGHT);
      return this.texWhite = THREE.ImageUtils.loadTexture("/models/textures/white.png", null, this.onTexLoaded);
    };

    Stormtest.prototype.addClouds = function(mesh, rx, ry, rz, num, white, seed) {
      var alpha, cloud, clouds, i, idx, mat, params, positions, tex, x, y, z, _i, _ref;
      Math.seedrandom(seed);
      mesh.scale.set(mesh.scale.x * this.SCENE_SCALE, mesh.scale.y * this.SCENE_SCALE, mesh.scale.z * this.SCENE_SCALE);
      if (!this.texClouds) {
        this.texClouds = [];
        this.texClouds.push(this.Q_LOADER("/models/textures/storm/cloud1" + this.Q_STR + this.Q_EXT));
        this.shaderClouds = new IFLCloudsShader;
      }
      clouds = [];
      positions = mesh.geometry.attributes.position.array;
      for (i = _i = 0, _ref = num - 1; _i <= _ref; i = _i += 1) {
        idx = Math.round(this.randomRange(0, (positions.length - 1) / 3)) * 3;
        x = positions[idx + 0] * mesh.scale.x + mesh.position.x + this.randomRange(-rx, rx);
        y = positions[idx + 1] * mesh.scale.y + mesh.position.y + this.randomRange(-ry, ry);
        z = positions[idx + 2] * mesh.scale.z + mesh.position.z + this.randomRange(-rz, rz);
        alpha = 0.30;
        tex = 0;
        params = {
          fragmentShader: this.shaderClouds.fragmentShader,
          vertexShader: this.shaderClouds.vertexShader,
          uniforms: THREE.UniformsUtils.clone(this.shaderClouds.uniforms),
          depthTest: false,
          depthWrite: false,
          alphaTest: 0.1,
          transparent: true,
          map: this.texClouds[tex]
        };
        mat = new THREE.ShaderMaterial(params);
        mat.uniforms["tDiffuse"].value = this.texClouds[tex];
        mat.uniforms["scale"].value = this.SCENE_SCALE;
        mat.uniforms["alpha"].value = this.randomRange(alpha, alpha + 0.15);
        cloud = new THREE.Mesh(new THREE.PlaneGeometry(1000, 1000, 1, 1, 1), mat);
        cloud.position.x = x;
        cloud.position.y = y;
        cloud.position.z = z;
        clouds.push(cloud);
      }
      return clouds;
    };

    Stormtest.prototype.addCloudsFar = function(x, y, z, rx, ry, rz, num, seed) {
      var alpha, cloud, clouds, i, mat, params, tex, _i, _ref;
      Math.seedrandom(seed);
      clouds = [];
      for (i = _i = 0, _ref = num - 1; _i <= _ref; i = _i += 1) {
        x = x + this.randomRange(-rx, rx);
        y = y + this.randomRange(-ry, ry);
        z = z + this.randomRange(-rz, rz);
        alpha = 0.30;
        tex = 0;
        params = {
          fragmentShader: this.shaderClouds.fragmentShader,
          vertexShader: this.shaderClouds.vertexShader,
          uniforms: THREE.UniformsUtils.clone(this.shaderClouds.uniforms),
          depthTest: false,
          depthWrite: false,
          alphaTest: 0.1,
          transparent: true,
          map: this.texClouds[tex]
        };
        mat = new THREE.ShaderMaterial(params);
        mat.uniforms["tDiffuse"].value = this.texClouds[tex];
        mat.uniforms["scale"].value = this.SCENE_SCALE;
        mat.uniforms["alpha"].value = this.randomRange(alpha, alpha + 0.15);
        cloud = new THREE.Mesh(new THREE.PlaneGeometry(1000, 1000, 1, 1, 1), mat);
        cloud.position.x = x;
        cloud.position.y = y;
        cloud.position.z = z;
        clouds.push(cloud);
      }
      return clouds;
    };

    Stormtest.prototype.addDebris = function(mesh, scale, x, y, speed, offset) {
      var debris, obj;
      obj = new THREE.Mesh(mesh.geometry, mesh.material);
      obj.position.set(x, y, 0);
      obj.scale.set(scale, scale, scale);
      obj.speed = this.randomRange(0.5, 0.9);
      debris = new THREE.Object3D();
      debris.speed = speed;
      debris.offset = offset;
      debris.obj = obj;
      debris.add(obj);
      this.scene.add(debris);
      return debris;
    };

    Stormtest.prototype.addDebrisOutside = function(mesh, scale) {
      var debris;
      debris = this.addDebris(mesh, scale, this.randomRange(32, 38), this.randomRange(0, 70), this.randomRange(0.5, 0.9), this.randomRange(0, Math.PI * 2));
      this.debrisOutside.push(debris);
      return debris;
    };

    Stormtest.prototype.addDebrisInside = function(mesh, scale) {
      var debris;
      debris = this.addDebris(mesh, scale, this.randomRange(8, 10), this.randomRange(10, 40), this.randomRange(0.5, 0.9), this.randomRange(0, Math.PI * 2));
      this.debrisInside.push(debris);
      return debris;
    };

    Stormtest.prototype.addDebrisOrgan = function(mesh, scale, x, y, speed, offset, audio) {
      var debris;
      debris = this.addDebris(mesh, scale, x, y, speed, offset);
      this.debrisInside.push(debris);
      debris.audio = new THREE.AudioObject(audio);
      debris.obj.add(debris.audio);
      return debris;
    };

    Stormtest.prototype.updateDebris = function(debris, cameraAngle) {
      var obj;
      debris.position.set(this.TORNADO_POS.x, 0, this.TORNADO_POS.z);
      debris.rotation.y = debris.speed * this.stormAnimTime + debris.offset;
      debris.front = this.normalizeAngle(debris.rotation.y - cameraAngle) < Math.PI;
      obj = debris.obj;
      obj.rotation.x = obj.speed * this.stormAnimTime * 0.39;
      obj.rotation.y = obj.speed * this.stormAnimTime * 1.23;
      obj.rotation.z = obj.speed * this.stormAnimTime * 0.89;
    };

    Stormtest.prototype.initDrops = function() {
      var i, _i, _ref;
      if (!this.Q_DROPS) {
        return;
      }
      this.texDrops[0] = this.Q_LOADER("/models/textures/storm/drop1" + this.Q_EXT, null, this.onTexLoaded);
      this.texDrops[1] = this.Q_LOADER("/models/textures/storm/drop2" + this.Q_EXT, null, this.onTexLoaded);
      this.texDrops[2] = this.Q_LOADER("/models/textures/storm/drop3" + this.Q_EXT, null, this.onTexLoaded);
      this.texDrops[3] = this.Q_LOADER("/models/textures/storm/drop4" + this.Q_EXT, null, this.onTexLoaded);
      this.texDrops[4] = this.Q_LOADER("/models/textures/storm/drop5" + this.Q_EXT, null, this.onTexLoaded);
      for (i = _i = 0, _ref = this.MAX_DROPS; _i <= _ref; i = _i += 1) {
        this.drops[i] = {
          active: false,
          time: 0,
          len: 0,
          sprite: 0,
          x: 0,
          y: 0
        };
      }
    };

    Stormtest.prototype.addDrop = function(time) {
      var angle, drop, ra, rd, rs, rx, ry, scale, spr, x, y, _i, _len, _ref;
      if (!this.Q_DROPS) {
        return;
      }
      _ref = this.drops;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        drop = _ref[_i];
        if (!drop.active) {
          scale = this.SCENE_WIDTH / 2048;
          switch (this.randomRangeInt(0, 3)) {
            case 0:
              x = 0;
              y = 0;
              angle = 0;
              break;
            case 1:
              x = this.SCENE_WIDTH;
              y = 0;
              angle = Math.PI / 2.0;
              break;
            case 2:
              x = 0;
              y = this.SCENE_HEIGHT;
              angle = Math.PI * 1.5;
              break;
            case 3:
              x = this.SCENE_WIDTH;
              y = this.SCENE_HEIGHT;
              angle = Math.PI;
          }
          ra = angle + this.randomRange(0, Math.PI / 2.0);
          rd = Math.cos(Math.random() * (Math.PI / 2.0)) * this.randomRange(0, this.SCENE_WIDTH * 0.35);
          rx = Math.cos(ra) * rd;
          ry = Math.sin(ra) * rd;
          rs = scale * this.randomRange(this.dropsScale * 0.75, this.dropsScale * 1.25);
          spr = this.randomRangeInt(0, this.texDrops.length - 1);
          drop.sprite = this.texDrops[spr];
          drop.w = drop.sprite.image.width * rs;
          drop.h = drop.sprite.image.height * rs;
          drop.x = x - drop.w * 0.5 + rx;
          drop.y = y - drop.h * 0.5 + ry;
          drop.down = this.randomRange(0, 40) * scale;
          drop.time = time;
          drop.len = this.randomRange(1.5, 4.0);
          drop.active = true;
          return;
        }
      }
    };

    Stormtest.prototype.drawDrops = function(time) {
      var FADE_IN, drop, fade, h, t, w, x, y, _i, _len, _ref;
      if (!this.Q_DROPS) {
        return;
      }
      this.hudRT.flipy = false;
      this.hudRT.renderTarget = this.sceneRT;
      _ref = this.drops;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        drop = _ref[_i];
        if (drop.active) {
          t = time - drop.time;
          if (t < drop.len) {
            FADE_IN = 0.1;
            if (t < FADE_IN) {
              fade = UTILS.time01(t, 0, FADE_IN);
            } else {
              fade = UTILS.time10(t, FADE_IN, drop.len - FADE_IN);
            }
            x = drop.x;
            y = drop.y + UTILS.time01(time, drop.time + 0.5, drop.len - 0.5) * drop.down;
            w = drop.w;
            h = drop.h;
            this.hudRT.render(drop.sprite, x, y, w, h, 0.0, fade);
          } else {
            drop.active = false;
          }
        }
      }
      this.hudRT.flipy = true;
    };

    Stormtest.prototype.initGUI = function() {
      var tornadoFolder,
        _this = this;
      Stormtest.__super__.initGUI.apply(this, arguments);
      tornadoFolder = this.gui.addFolder("Tornado");
      tornadoFolder.add(this.tornadoMaterial.uniforms["tornado_bounding_radius"], 'value', 10, 200).name('Tornado Bounding Radius');
      tornadoFolder.add(this.tornadoMaterial.uniforms["light_harshness"], 'value', 0, 2).name('Tornado Light Harshness');
      tornadoFolder.add(this.tornadoMaterial.uniforms["light_darkness"], 'value', 0, 2).name('Tornado Light Darkness');
      tornadoFolder.add(this.tornadoMaterial.uniforms["cloud_edge_sharpness"], 'value', 0, 2).name('Tornado Edge Sharpness');
      tornadoFolder.addColor({
        value: "#FFFFFF"
      }, 'value').name('Tornado Tint').onChange(function(value) {
        var color;
        color = _this.stringToColor(value);
        return _this.tornadoMaterial.uniforms["storm_tint"].value.set(color.r, color.g, color.b);
      });
      tornadoFolder.add(this.tornadoMaterial.uniforms["cam_fov"], 'value', 20, 180).name('Tornado Fov');
      tornadoFolder.add(this.tornadoMaterial.uniforms["final_colour_scale"], 'value', 0, 20).name('Tornado Colour Scale');
      tornadoFolder.add(this.tornadoMaterial.uniforms["gamma_correction"], 'value', 0, 5).name('Tornado Gamma correction');
      tornadoFolder.add(this.tornadoMaterial.uniforms["environment_rotation"], 'value', 0, 1).name('Tornado Env Rotation');
      tornadoFolder.add(this.tornadoMaterial.uniforms["storm_alpha_correction"], 'value', 0, 5).name('Tornado Alpha Correction');
      tornadoFolder.add(this.tornadoMaterial.uniforms["tornado_density"], 'value', 0, 5).name('Tornado Density');
      tornadoFolder.add(this.tornadoMaterial.uniforms["tornado_height"], 'value', 10, 200).name('Tornado Height');
      tornadoFolder.add(this.tornadoMaterial.uniforms["spin_speed"], 'value', 0, 5).name('Tornado Spin Speed');
      tornadoFolder.add(this.tornadoMaterial.uniforms["base_step_scaling"], 'value', 0, 5).name('Tornado Base Step');
      tornadoFolder.add(this.tornadoMaterial.uniforms["min_step_size"], 'value', 0, 5).name('Tornado Min Step');
      tornadoFolder.add(this.OPTIONS, 'tornadoRotation', 0, Math.PI * 2.0).name('Tornado Rotation');
      return tornadoFolder.add(this.tornadoMaterial.uniforms["dist_approx"], 'value', 0, 5).name('Dist Approx');
    };

    Stormtest.prototype.onRestart = function(lock) {
      this.renderer.sortObjects = true;
      this.mousePos = {
        x: 0,
        y: 0
      };
      this.curPos = {
        x: 0,
        y: 0
      };
      this.prevPos = {
        x: 0,
        y: 0
      };
      this.animStarted = true;
      this.animPaused = false;
      this.stormAnimTime = 0;
      this.stormState = 0;
      this.dropsTime = 0;
      this.balloon.anim.stop();
      this.balloon.anim.play(false, 0);
      this.CAMERA_ORBIT_H = 0.7;
      this.CAMERA_ORBIT_V = 0.5;
      if (lock) {
        return this.pointLock();
      }
    };

    Stormtest.prototype.activate = function() {
      Analytics.track('storm_enter_page', "Google_OZ_Balloon Ride");
      this.onRestart(false);
    };

    Stormtest.prototype.pause = function() {
      Stormtest.__super__.pause.apply(this, arguments);
      SoundController.send("storm_scene_pause");
      this.animStarted = false;
      this.balloon.anim.timeScale = 0;
    };

    Stormtest.prototype.resume = function() {
      Stormtest.__super__.resume.apply(this, arguments);
      if (!this.animPaused) {
        SoundController.send("storm_scene_resume");
      }
      this.animStarted = true;
    };

    Stormtest.prototype.onWorldProgress = function() {
      var total;
      total = this.L_LOADSCENE * 0.5 + this.L_LOADTEX * 0.5;
      Stormtest.__super__.onWorldProgress.call(this, total);
      if (this.textureLoaded && this.sceneLoaded && !this.loadingDone) {
        this.loadingDone = true;
        this.onWorldLoaded();
        this.enableRender = true;
        this.enableMouse = true;
      }
    };

    Stormtest.prototype.onTexLoaded = function() {
      this.L_TEX++;
      this.L_LOADTEX = this.L_TEX / this.L_TEXNUM;
      this.textureLoaded = this.L_TEX === this.L_TEXNUM;
      return this.onWorldProgress();
    };

    Stormtest.prototype.onSceneProgress = function(loaded, total) {
      this.L_LOADSCENE = loaded / total;
      return this.onWorldProgress();
    };

    Stormtest.prototype.onSceneLoaded = function(loader, iflscene) {
      var cloud, debrisInside, debrisObj, debrisOutside, descendants, elem, i, idx, mesh, objects, sceneFolder, _i, _j, _k, _l, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
      this.iflscene = iflscene;
      objects = ["balloon_simple", "floor", "earth_sky", "oz_sky"];
      debrisOutside = ["Pipe", "Pipe1", "Pipe2", "Pipe3", "Pipe4", "wood", "wood1", "wood2", "wood3", "wood4", "wood5", "wood6", "wood7", "wood8", "wood9", "Wingback", "Wheelbarrow", "WagonWheel", "TrestleTable", "Stool", "Seat", "RoundTable", "FenceE", "FenceD", "Easel", "Door", "CrateB", "CrateA", "Bucket", "BrokenWheel", "BranchA", "Bench", "Barrel", "ABoard"];
      debrisInside = ["Pipe", "Pipe1", "Pipe2", "Pipe3", "Pipe4"];
      debrisObj = [];
      descendants = this.iflscene.getDescendants();
      for (_i = 0, _len = descendants.length; _i < _len; _i++) {
        elem = descendants[_i];
        if (elem.name === "foreground_dark_emitter") {
          elem.position.y -= 55;
          this.fdclouds = this.addClouds(elem, 90, 35, 90, 160, false, 'fd49');
          this.fdclouds.mesh = elem;
        } else if (elem.name === "foreground_tornado_clouds_emitter") {

        } else if (elem.name === "background_dark_emitter") {

        } else if (elem.name === "background_light_clouds_emitter") {

        } else if (elem.name === "background_tornado_clouds_emitter") {

        } else if (_ref = elem.name, __indexOf.call(objects, _ref) >= 0) {
          if (elem.name === "balloon_simple") {
            this.balloon = elem;
          }
          if (elem.name === "floor") {
            this.earth_floor = elem;
          }
          if (elem.name === "earth_sky") {
            this.earth_sky = elem;
          }
          if (elem.name === "oz_sky") {
            this.oz_sky = elem;
          }
          elem.position.set(elem.position.x * this.SCENE_SCALE, elem.position.y * this.SCENE_SCALE, elem.position.z * this.SCENE_SCALE);
          elem.scale.set(elem.scale.x * this.SCENE_SCALE, elem.scale.y * this.SCENE_SCALE, elem.scale.z * this.SCENE_SCALE);
          this.scene.add(elem);
        } else if (_ref1 = elem.name, __indexOf.call(debrisOutside, _ref1) >= 0) {
          debrisObj[elem.name] = this.addDebrisOutside(elem, this.SCENE_SCALE * 1.3);
          this.addDebrisOutside(elem, this.SCENE_SCALE * 1.3);
        }
      }
      this.farclouds = this.addCloudsFar(180, -14, 80, 80, 1, 60, 25, 'far43');
      this.instanceAnimation(this.balloon);
      this.balloon.material.transparent = true;
      if (this.oz().appView.debugMode) {
        sceneFolder = this.gui.addFolder("Scene Options");
        sceneFolder.add(this.OPTIONS, 'overrideValues').name('Override Values');
        sceneFolder.add(this.OPTIONS, 'envmapMul', 0.0, 10.0).name('Envmap Mul');
        sceneFolder.add(this.OPTIONS, 'envmapMix', 0.0, 1.0).name('Envmap Mix');
        sceneFolder.add(this.OPTIONS, 'envmapPow', 0.0, 5.0).name('Envmap Pow');
        sceneFolder.add(this.OPTIONS, 'specmapMul', 0.0, 5.0).name('Specmap Mul');
        sceneFolder.add(this.OPTIONS, 'specmapPow', 0.0, 2.0).name('Specmap Pow');
        sceneFolder.add(this.OPTIONS, 'cubeX', -200, 200).name('Cube X');
        sceneFolder.add(this.OPTIONS, 'cubeY', -200, 200).name('Cube Y');
        sceneFolder.add(this.OPTIONS, 'cubeZ', -200, 200).name('Cube Z');
        sceneFolder.add(this.OPTIONS, 'dropsRatio', 0, 1.0).name('Drops Ratio');
        sceneFolder.add(this.OPTIONS, 'dropsScale', 0, 2.0).name('Drops Scale');
      }
      for (i = _j = 0; _j <= 35; i = _j += 1) {
        idx = this.randomRangeInt(0, debrisOutside.length - 1);
        mesh = debrisObj[debrisOutside[idx]].obj;
        this.addDebrisInside(mesh, this.SCENE_SCALE * 1.3);
      }
      this.debrisOrgan = [];
      this.debrisOrgan.push(this.addDebrisOrgan(debrisObj["Pipe"].obj, this.SCENE_SCALE * 1.5, 11, 20, 0.7, 1, "storm_particle_1"));
      this.debrisOrgan.push(this.addDebrisOrgan(debrisObj["Pipe1"].obj, this.SCENE_SCALE * 1.5, 11, 20, 0.7, 1, "storm_particle_2"));
      this.debrisOrgan.push(this.addDebrisOrgan(debrisObj["Pipe2"].obj, this.SCENE_SCALE * 1.5, 8, 30, 0.4, 2, "storm_particle_3"));
      this.debrisOrgan.push(this.addDebrisOrgan(debrisObj["Pipe3"].obj, this.SCENE_SCALE * 1.5, 10, 40, 0.6, 3, "storm_particle_4"));
      this.debrisOrgan.push(this.addDebrisOrgan(debrisObj["Pipe4"].obj, this.SCENE_SCALE * 1.5, 12, 50, 0.5, 4, "storm_particle_5"));
      _ref2 = this.fdclouds;
      for (_k = 0, _len1 = _ref2.length; _k < _len1; _k++) {
        cloud = _ref2[_k];
        this.scene.add(cloud);
      }
      _ref3 = this.farclouds;
      for (_l = 0, _len2 = _ref3.length; _l < _len2; _l++) {
        cloud = _ref3[_l];
        this.scene.add(cloud);
      }
      this.sceneLoaded = true;
      this.onWorldProgress();
      return SoundController.send('load_scene_4');
    };

    Stormtest.prototype.instanceAnimation = function(mesh) {
      var animation, _ref;
      if (((_ref = mesh.geometry) != null ? _ref.animation : void 0) != null) {
        THREE.AnimationHandler.add(mesh.geometry.animation);
        animation = new THREE.Animation(mesh, mesh.geometry.animation.name);
        animation.JITCompile = false;
        animation.interpolationType = THREE.AnimationHandler.LINEAR;
        return this.balloon.anim = animation;
      }
    };

    Stormtest.prototype.instanceMaterial = function(mesh, meshname) {
      var mat;
      if (meshname === "balloon_simple") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Balloon");
      } else if (meshname === "floor") {
        mat = this.instanceBasicMaterial(mesh, meshname, "earth_floor" + this.Q_STR + this.Q_EXT);
      } else if (meshname === "earth_sky") {
        mat = this.instanceBasicMaterial(mesh, meshname, "earth_sky" + this.Q_STR + this.Q_EXT);
      } else if (meshname === "oz_sky") {
        mat = this.instanceBasicMaterial(mesh, meshname, "oz_sky" + this.Q_STR + this.Q_EXT);
      } else if (meshname === "wood9") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Wood9");
      } else if (meshname === "wood8") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Wood8");
      } else if (meshname === "wood7") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Wood7");
      } else if (meshname === "wood6") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Wood6");
      } else if (meshname === "wood5") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Wood5");
      } else if (meshname === "wood4") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Wood4");
      } else if (meshname === "wood3") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Wood3");
      } else if (meshname === "wood2") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Wood2");
      } else if (meshname === "wood1") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Wood1");
      } else if (meshname === "wood") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Wood0");
      } else if (meshname === "Wingback") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Wingback");
      } else if (meshname === "Wheelbarrow") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Wheelbarrow");
      } else if (meshname === "WagonWheel") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "WagonWheel");
      } else if (meshname === "TrestleTable") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "TrestleTable");
      } else if (meshname === "Stool") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Stool");
      } else if (meshname === "Seat") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Seat");
      } else if (meshname === "RoundTable") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "RoundTable");
      } else if (meshname === "Pipe4") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Pipe4");
      } else if (meshname === "Pipe3") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Pipe3");
      } else if (meshname === "Pipe2") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Pipe2");
      } else if (meshname === "Pipe1") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Pipe1");
      } else if (meshname === "Pipe") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Pipe0");
      } else if (meshname === "FenceE") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "FenceE");
      } else if (meshname === "FenceD") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "FenceD");
      } else if (meshname === "Easel") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Easel");
      } else if (meshname === "Door") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Door");
      } else if (meshname === "CrateB") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "CrateB");
      } else if (meshname === "CrateA") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "CrateA");
      } else if (meshname === "Bucket") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Bucket");
      } else if (meshname === "BrokenWheel") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "BrokenWheel");
      } else if (meshname === "BranchA") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "BranchA");
      } else if (meshname === "Bench") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Bench");
      } else if (meshname === "Barrel") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "Barrel");
      } else if (meshname === "ABoard") {
        mat = this.instanceFresnelMaterial(mesh, meshname, "ABoard");
      } else if (meshname === "foreground_dark_emitter") {
        mat = new THREE.MeshNormalMaterial();
        mat.side = THREE.DoubleSide;
        mat.transparent = true;
        mat.opacity = 1.0;
        mat.depthTest = false;
      } else if (meshname === "foreground_tornado_clouds_emitter") {
        mat = new THREE.MeshNormalMaterial();
        mat.side = THREE.DoubleSide;
        mat.transparent = true;
        mat.opacity = 1.0;
        mat.depthTest = false;
      } else if (meshname === "background_dark_emitter") {
        mat = new THREE.MeshNormalMaterial();
        mat.side = THREE.DoubleSide;
        mat.transparent = true;
        mat.opacity = 1.0;
        mat.depthTest = false;
      } else if (meshname === "background_light_clouds_emitter") {
        mat = new THREE.MeshNormalMaterial();
        mat.side = THREE.DoubleSide;
        mat.transparent = true;
        mat.opacity = 1.0;
        mat.depthTest = false;
      } else if (meshname === "background_tornado_clouds_emitter") {
        mat = new THREE.MeshNormalMaterial();
        mat.side = THREE.DoubleSide;
        mat.transparent = true;
        mat.opacity = 1.0;
        mat.depthTest = false;
      } else {
        console.log("Material not found for: " + meshname);
        mat = new THREE.MeshNormalMaterial();
      }
      return mat;
    };

    Stormtest.prototype.instanceFresnelMaterial = function(mesh, meshname, materialname) {
      var material, params, path, shader, uniforms;
      path = "/models/textures/storm/" + materialname + "/" + materialname;
      shader = new IFLStormFresnelShader;
      params = {
        fragmentShader: shader.fragmentShader,
        vertexShader: shader.vertexShader,
        uniforms: shader.uniforms,
        side: THREE.DoubleSide,
        lights: false,
        alphaTest: 0.4
      };
      material = new THREE.ShaderMaterial(params);
      uniforms = shader.uniforms;
      uniforms["fresnelPower"].value = 1.0;
      uniforms["map"].value = material.map = this.Q_LOADER(path + "_Diff" + this.Q_STR + this.Q_EXT, null, this.onTexLoaded);
      uniforms["envMap"].value = material.envMap = this.tornadoEnvMap;
      uniforms["specMap"].value = material.specMap = this.tornadoSpecMap;
      uniforms["map"].value.flipY = false;
      uniforms["envMap"].value.flipY = false;
      return material;
    };

    Stormtest.prototype.instanceBasicMaterial = function(mesh, meshname, materialname) {
      var map, material, path;
      path = "/models/textures/storm/" + materialname;
      map = this.Q_LOADER(path, null, this.onTexLoaded);
      map.flipY = false;
      material = new THREE.MeshBasicMaterial({
        side: THREE.DoubleSide,
        map: map
      });
      return material;
    };

    Stormtest.prototype.renderScene = function() {
      var ax, ay, cameraAngle, cloud, dd, debris, desp, fade, flare, frame, next, speed, src, step, tframe, tgt, time, _i, _j, _k, _l, _len, _len1, _len10, _len11, _len12, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _len9, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref10, _ref11, _ref12, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _s, _t, _u;
      this.curPos.x = UTILS.lerp(0.09, this.curPos.x, this.mousePos.x);
      this.curPos.y = UTILS.lerp(0.19, this.curPos.y, this.mousePos.y);
      time = frame = next = step = speed = 0;
      if (!this.animPaused) {
        desp = this.curPos.x;
        if (desp < 0) {
          speed = UTILS.lerp(-desp, 1.0, this.SPEED_MIN);
        } else {
          speed = UTILS.lerp(desp, 1.0, this.SPEED_MAX);
        }
        speed = UTILS.clamp(speed, this.SPEED_MIN, this.SPEED_MAX);
        speed = this.animPaused || !this.animStarted ? 0 : speed * 0.75;
        this.stormAnimTime = this.balloon.anim.currentTime;
        this.balloon.anim.timeScale = speed;
        time = this.stormAnimTime;
        tframe = time * this.CAMERA_DATA_FPS;
        frame = UTILS.clamp(Math.floor(tframe), 0, this.cameraPosData.length - 2);
        next = frame + 1;
        step = tframe - frame;
        src = this.cameraLerp(this.camSrc, step, this.cameraPosData[frame], this.cameraPosData[next]);
        tgt = this.cameraLerp(this.camTgt, step, this.cameraTgtData[frame], this.cameraTgtData[next]);
        ax = this.curPos.x * this.CAMERA_ORBIT_H;
        ay = this.curPos.y * this.CAMERA_ORBIT_V;
        this.camdir.set(src.x - tgt.x, src.y - tgt.y, src.z - tgt.z);
        this.camv.set(this.camdir.x, this.camdir.y, this.camdir.z);
        this.camv.normalize();
        this.camu.set(this.camera.up.x, this.camera.up.y, this.camera.up.z);
        this.camr.set(this.camera.up.x, this.camera.up.y, this.camera.up.z);
        this.camr.crossSelf(this.camv);
        this.matRotX.makeRotationAxis(this.camr, ay);
        this.matRotX.multiplyVector3(this.camdir);
        this.matRotX.makeRotationAxis(this.camu, ax);
        this.matRotX.multiplyVector3(this.camdir);
        this.camera.position.set(this.camdir.x + tgt.x, this.camdir.y + tgt.y, this.camdir.z + tgt.z);
        this.audioListener.position.set(this.camera.position.x, this.camera.position.y, this.camera.position.z);
        this.camdir.normalize();
        this.camu.set(0, -1, 0);
        this.camu.crossSelf(this.camdir);
        dd = this.curPos.x * 10 * 5 / 12;
        tgt.set(tgt.x + this.camu.x * dd, tgt.y + this.camu.y * dd, tgt.z + this.camu.z * dd);
        this.camdir.set(tgt.x, tgt.y, tgt.z);
        this.camera.lookAt(this.camdir);
        cameraAngle = Math.atan2(this.camdir.z - this.camera.position.z, this.camdir.x - this.camera.position.x) - Math.PI / 2.0;
      } else {
        time = this.stormAnimTime;
        this.balloon.anim.timeScale = 0;
        this.stormControls.movementSpeed = this.stormControls.mouseDragOn ? 0 : 8;
        this.stormControls.lookSpeed = this.stormControls.mouseDragOn ? 0.08 : 0;
        this.stormControls.update(this.delta);
        this.audioListener.position.set(this.camera.position.x, this.camera.position.y, this.camera.position.z);
      }
      switch (this.stormState) {
        case 0:
          if (this.stormAnimTime > 0) {
            SoundController.send("storm_start");
            this.stormState = 1;
          }
          break;
        case 1:
          if (this.stormAnimTime > this.TIME_ENTER_TORNADO) {
            SoundController.send("storm_inside");
            this.stormState = 2;
          }
          break;
        case 2:
          if (this.stormAnimTime > this.TIME_END - 8) {
            SoundController.send("storm_exit");
            this.stormState = 3;
          }
      }
      this.renderer.setClearColorHex(0, 1);
      this.renderer.clear();
      this.renderer.setClearColorHex(0, 0);
      this.renderer.clearTarget(this.sceneRT, true, true, false);
      this.renderer.setClearColorHex(0, 0);
      this.renderer.clearTarget(this.tornadoRT, true, false, false);
      if (this.godrays.enabled) {
        this.renderer.clearTarget(this.godrays.rtTextureColors, true, true, false);
      }
      this.updateObjects(time, cameraAngle);
      this.hudRT.flipy = true;
      this.hudRT.renderTarget = this.sceneRT;
      if (time < this.TIME_END) {
        this.matTranslate.makeTranslation(this.TORNADO_POS.x, this.TORNADO_POS.y, this.TORNADO_POS.z);
        this.matRotX.makeRotationX(-Math.PI / 2.0);
        this.matTranslate.multiplySelf(this.matRotX);
        this.matRotY.makeRotationZ(this.OPTIONS.tornadoRotation);
        this.matTranslate.multiplySelf(this.matRotY);
        this.matInverse.getInverse(this.matTranslate);
        this.matTornado.multiply(this.matInverse, this.camera.matrix);
        this.tornadoMaterial.uniforms["time"].value = this.animPaused ? 0 : this.clock.elapsedTime;
        this.tornadoMaterial.uniforms["camera_matrix"].value = this.matTornado;
        this.tornadoMaterial.uniforms["resolution"].value.set(this.tornadoW, this.tornadoH);
        this.hudRT.renderTarget = this.tornadoRT;
        this.hudRT.renderMaterial(this.tornadoMaterial, 0, 0, this.tornadoW + 1, this.tornadoH + 1, 0.0, 1.0);
        this.hudRT.renderTarget = this.sceneRT;
      }
      this.earth_floor.visible = time < this.TIME_ENTER_TORNADO;
      this.earth_sky.visible = time < this.TIME_ENTER_TORNADO;
      this.oz_sky.visible = time >= this.TIME_ENTER_TORNADO;
      this.balloon.visible = false;
      _ref = this.fdclouds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cloud = _ref[_i];
        cloud.visible = false;
      }
      _ref1 = this.farclouds;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        cloud = _ref1[_j];
        cloud.visible = time < this.TIME_ENTER_TORNADO;
      }
      _ref2 = this.debrisOutside;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        debris = _ref2[_k];
        debris.obj.visible = !debris.front && time < this.TIME_ENTER_TORNADO;
      }
      _ref3 = this.debrisInside;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        debris = _ref3[_l];
        debris.obj.visible = false;
      }
      if (this.godrays.enabled) {
        this.renderer.render(this.scene, this.camera, this.godrays.rtTextureColors);
      } else {
        this.renderer.render(this.scene, this.camera, this.sceneRT);
      }
      if (time < this.TIME_END) {
        fade = UTILS.time10(time, this.TIME_END - 5, 5);
        this.sal2xMaterial.uniforms["tDiffuse"].value = this.tornadoRT;
        this.sal2xMaterial.uniforms["resolution"].value.set(this.SCENE_WIDTH, this.SCENE_HEIGHT);
        this.sal2xMaterial.uniforms["opacity"].value = fade;
        if (this.tornadoFilter) {
          this.hudRT.renderMaterial(this.sal2xMaterial, 0, 0, this.SCENE_WIDTH, this.SCENE_HEIGHT, 0, fade, THREE.NormalBlending, {
            x: 0,
            y: 0,
            w: this.tornadoW / this.SCENE_WIDTH,
            h: this.tornadoH / this.SCENE_HEIGHT
          });
        } else {
          this.hudRT.render(this.tornadoRT, 0, 0, this.SCENE_WIDTH, this.SCENE_HEIGHT, 0, fade, THREE.NormalBlending, {
            x: 0,
            y: 0,
            w: this.tornadoW / this.SCENE_WIDTH,
            h: this.tornadoH / this.SCENE_HEIGHT
          });
        }
      }
      this.earth_floor.visible = false;
      this.earth_sky.visible = false;
      this.oz_sky.visible = false;
      this.balloon.visible = false;
      this.balloon.visible = true;
      if (time < 18 || time > 30) {
        this.scene.add(this.lensFlare);
      }
      _ref4 = this.debrisOutside;
      for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
        debris = _ref4[_m];
        debris.obj.visible = debris.front && time < this.TIME_ENTER_TORNADO;
      }
      if (time > this.TIME_ENTER_TORNADO) {
        _ref5 = this.debrisInside;
        for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
          debris = _ref5[_n];
          debris.obj.visible = true;
        }
      }
      _ref6 = this.fdclouds;
      for (_o = 0, _len6 = _ref6.length; _o < _len6; _o++) {
        cloud = _ref6[_o];
        cloud.visible = time < this.TIME_ENTER_TORNADO;
      }
      _ref7 = this.farclouds;
      for (_p = 0, _len7 = _ref7.length; _p < _len7; _p++) {
        cloud = _ref7[_p];
        cloud.visible = false;
      }
      if (this.godrays.enabled) {
        this.renderer.render(this.scene, this.camera, this.godrays.rtTextureColors);
      } else {
        this.renderer.render(this.scene, this.camera, this.sceneRT);
      }
      this.scene.remove(this.lensFlare);
      if (this.godrays.enabled) {
        _ref8 = this.lensFlare.lensFlares;
        for (_q = 0, _len8 = _ref8.length; _q < _len8; _q++) {
          flare = _ref8[_q];
          flare.visible = false;
        }
        _ref9 = this.ftclouds;
        for (_r = 0, _len9 = _ref9.length; _r < _len9; _r++) {
          cloud = _ref9[_r];
          cloud.visible = false;
        }
        _ref10 = this.farclouds;
        for (_s = 0, _len10 = _ref10.length; _s < _len10; _s++) {
          cloud = _ref10[_s];
          cloud.visible = false;
        }
        _ref11 = this.debrisOutside;
        for (_t = 0, _len11 = _ref11.length; _t < _len11; _t++) {
          debris = _ref11[_t];
          debris.obj.visible = false;
        }
        _ref12 = this.debrisInside;
        for (_u = 0, _len12 = _ref12.length; _u < _len12; _u++) {
          debris = _ref12[_u];
          debris.obj.visible = false;
        }
        this.renderGodraysDepth();
        this.renderGodRays();
      }
      if (time > (this.TIME_ENTER_TORNADO - 1) && time < (this.TIME_ENTER_TORNADO + 2)) {
        fade = 1;
        if (time < this.TIME_ENTER_TORNADO) {
          fade = UTILS.time01(time, this.TIME_ENTER_TORNADO - 1, 1);
        } else if (time > this.TIME_ENTER_TORNADO + 1) {
          fade = UTILS.time10(time, this.TIME_ENTER_TORNADO + 1, 1);
        }
        this.hudRT.render(this.tornadoRT, 0, 0, this.SCENE_WIDTH, this.SCENE_HEIGHT, 0, fade, THREE.NormalBlending, {
          x: 0,
          y: 0,
          w: this.tornadoW / this.SCENE_WIDTH,
          h: this.tornadoH / this.SCENE_HEIGHT
        });
      }
      this.drawDrops(this.clock.elapsedTime);
      this.hud.flipy = true;
      if (this.sceneRT) {
        this.colorCorrection.material.uniforms["tDiffuse"].value = this.sceneRT;
        this.colorCorrection.material.map = this.sceneRT;
        this.hud.renderTarget = null;
        this.hud.renderMaterial(this.colorCorrection.material, 0, 0, this.APP_WIDTH, this.APP_HEIGHT, 0, 1.0);
      }
      if (time > (this.TIME_END - 2)) {
        this.hud.renderTarget = null;
        this.hud.render(this.texWhite, 0, 0, this.APP_WIDTH, this.APP_HEIGHT, 0, UTILS.time01(time, this.TIME_END - 2, 2));
      }
      if (time > this.TIME_END) {
        Analytics.track('storm_end');
        SoundController.send("storm_end");
        $('body').unbind('click');
        document.removeEventListener('mouseup', this.onMouseUp, false);
        document.removeEventListener('mousedown', this.onMouseDown, false);
        document.removeEventListener('click', this.onMouseClick, false);
        this.releasePointLock();
        this.enableRender = false;
        this.oz().router.navigateTo("final");
      }
      this.renderer.sortObjects = false;
      if (this.capturer) {
        return this.capturer.capture(this.oz().appView.renderCanvas3D);
      }
    };

    Stormtest.prototype.updateObjects = function(time, cameraAngle) {
      var accel, debris, mix, mul, ratio, speed, te, ti, tt, _i, _j, _len, _len1, _ref, _ref1;
      tt = this.TIME_ENTER_TORNADO;
      te = this.TIME_END;
      if (this.OPTIONS.overrideValues) {
        this.balloon.material.uniforms["envmapMul"].value = this.OPTIONS.envmapMul;
        this.balloon.material.uniforms["envmapMix"].value = this.OPTIONS.envmapMix;
        this.balloon.material.uniforms["envmapPow"].value = this.OPTIONS.envmapPow;
        this.balloon.material.uniforms["specmapMul"].value = this.OPTIONS.specmapMul;
        this.balloon.material.uniforms["specmapPow"].value = this.OPTIONS.specmaPow;
        this.balloon.material.uniforms["cubeX"].value = this.OPTIONS.cubeX;
        this.balloon.material.uniforms["cubeY"].value = this.OPTIONS.cubeY;
        this.balloon.material.uniforms["cubeZ"].value = this.OPTIONS.cubeZ;
      } else {
        mul = this.animateParam(10.0, 0.5, time, tt - 8, tt - 1);
        mul = this.animateParam(mul, 10.0, time, tt + 2, te - 5);
        this.balloon.material.uniforms["envmapMul"].value = mul;
        mix = this.animateParam(0.76, 0.8, time, tt - 8, tt - 1);
        mix = this.animateParam(mix, 0.60, time, tt + 2, te - 5);
        this.balloon.material.uniforms["envmapMix"].value = mix;
        this.balloon.material.uniforms["envmapPow"].value = 0.57;
        this.balloon.material.uniforms["specmapMul"].value = 0.57;
        this.balloon.material.uniforms["specmapPow"].value = 0.1;
        this.balloon.material.uniforms["cubeX"].value = this.animateParam(-126, -25, time, tt - 2, tt + 2);
        this.balloon.material.uniforms["cubeY"].value = this.animateParam(107, 200, time, tt - 2, tt + 2);
        this.balloon.material.uniforms["cubeZ"].value = this.animateParam(51, 200, time, tt - 2, tt + 2);
        this.OPTIONS.envmapMul = this.balloon.material.uniforms["envmapMul"].value;
        this.OPTIONS.envmapMix = this.balloon.material.uniforms["envmapMix"].value;
        this.OPTIONS.envmapPow = this.balloon.material.uniforms["envmapPow"].value;
        this.OPTIONS.specmapMul = this.balloon.material.uniforms["specmapMul"].value;
        this.OPTIONS.specmaPow = this.balloon.material.uniforms["specmapPow"].value;
        this.OPTIONS.cubeX = this.balloon.material.uniforms["cubeX"].value;
        this.OPTIONS.cubeY = this.balloon.material.uniforms["cubeY"].value;
        this.OPTIONS.cubeZ = this.balloon.material.uniforms["cubeZ"].value;
      }
      if (time < this.TIME_ENTER_TORNADO) {
        ti = tt - 5;
        accel = this.animateParam(0, -2, time, ti, ti + 4);
        speed = (time - ti) * accel;
        this.earth_sky.rotation.y = speed;
        this.earth_floor.rotation.y = speed;
      } else {
        this.earth_sky.rotation.y = 0;
        this.earth_floor.rotation.y = 0;
      }
      this.earth_sky.position.y = -200;
      this.earth_floor.scale.set(200.0, 200.0, 120.0);
      _ref = this.debrisOutside;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        debris = _ref[_i];
        this.updateDebris(debris, cameraAngle);
      }
      _ref1 = this.debrisInside;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        debris = _ref1[_j];
        this.updateDebris(debris, cameraAngle);
      }
      if (time < this.TIME_ENTER_TORNADO) {
        this.lensFlare.position.set(-150, 120, -300);
      } else {
        this.lensFlare.position.set(7, 90, -30);
      }
      if (this.OPTIONS.overrideValues) {
        this.dropsRatio = this.OPTIONS.dropsRatio;
        this.dropsScale = this.OPTIONS.dropsScale;
      } else {
        ratio = this.animateParam(1.0, 0.045, time, tt - 10, tt - 7);
        ratio = this.animateParam(ratio, 0.020, time, tt + 1, tt + 3);
        this.dropsRatio = ratio;
        this.dropsScale = 0.7;
      }
      time = this.clock.elapsedTime;
      if (time > 0) {
        if (time > this.dropsTime) {
          this.addDrop(time);
          return this.dropsTime = time + this.randomRange(this.dropsRatio * 0.75, this.dropsRatio * 1.25);
        }
      }
    };

    Stormtest.prototype.renderGodraysDepth = function() {
      this.renderer.clearTarget(this.godrays.rtTextureDepth, false, false, false);
      return this.renderer.render(this.scene, this.camera, this.godrays.rtTextureDepth);
    };

    Stormtest.prototype.renderGodRays = function() {
      var TAPS_PER_PASS, filterLen, pass, stepLen, sun3DPosition;
      sun3DPosition = new THREE.Vector3;
      this.projector.projectVector(sun3DPosition, this.camera);
      sun3DPosition.x = (sun3DPosition.x + 1) / 2;
      sun3DPosition.y = (sun3DPosition.y + 1) / 2;
      this.godrays.godrayGenUniforms["vSunPositionScreenSpace"].value.x = 0.5;
      this.godrays.godrayGenUniforms["vSunPositionScreenSpace"].value.y = 0.5;
      filterLen = 1.0;
      TAPS_PER_PASS = 6.0;
      pass = 1.0;
      stepLen = filterLen * Math.pow(TAPS_PER_PASS, -pass);
      this.godrays.godrayGenUniforms["fStepSize"].value = stepLen;
      this.godrays.godrayGenUniforms["tInput"].value = this.godrays.rtTextureDepth;
      this.godrays.scene.overrideMaterial = this.godrays.materialGodraysGenerate;
      this.renderer.render(this.godrays.scene, this.godrays.camera, this.godrays.rtTextureGodRays2);
      pass = 2.0;
      stepLen = filterLen * Math.pow(TAPS_PER_PASS, -pass);
      this.godrays.godrayGenUniforms["fStepSize"].value = stepLen;
      this.godrays.godrayGenUniforms["tInput"].value = this.godrays.rtTextureGodRays2;
      this.renderer.render(this.godrays.scene, this.godrays.camera, this.godrays.rtTextureGodRays1);
      pass = 3.0;
      stepLen = filterLen * Math.pow(TAPS_PER_PASS, -pass);
      this.godrays.godrayGenUniforms["fStepSize"].value = stepLen;
      this.godrays.godrayGenUniforms["tInput"].value = this.godrays.rtTextureGodRays1;
      this.renderer.render(this.godrays.scene, this.godrays.camera, this.godrays.rtTextureGodRays2);
      this.godrays.godrayCombineUniforms["tColors"].value = this.godrays.rtTextureColors;
      this.godrays.godrayCombineUniforms["tColors2"].value = this.tornadoRT;
      this.godrays.godrayCombineUniforms["tGodRays"].value = this.godrays.rtTextureGodRays2;
      this.godrays.scene.overrideMaterial = this.godrays.materialGodraysCombine;
      this.renderer.render(this.godrays.scene, this.godrays.camera);
      return this.godrays.scene.overrideMaterial = null;
    };

    Stormtest.prototype.onResize = function() {
      var paramsD, paramsN, _ref;
      Stormtest.__super__.onResize.apply(this, arguments);
      this.initQuality();
      if ((_ref = this.stormControls) != null) {
        _ref.handleResize();
      }
      paramsD = {
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBAFormat,
        depthBuffer: true
      };
      paramsN = {
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBAFormat,
        depthBuffer: false
      };
      this.sceneRT = new THREE.WebGLRenderTarget(this.SCENE_WIDTH, this.SCENE_HEIGHT, paramsD);
      return this.tornadoRT = new THREE.WebGLRenderTarget(this.SCENE_WIDTH, this.SCENE_HEIGHT, paramsN);
    };

    Stormtest.prototype.onEnterFrame = function() {
      if (!this.enableRender) {
        return;
      }
      Stormtest.__super__.onEnterFrame.call(this, true);
      this.fpsAcc++;
      if ((this.clock.elapsedTime - this.timeFps) > 1) {
        this.fpsCount++;
        this.fpsCur = this.fpsAcc / (this.clock.elapsedTime - this.timeFps);
        this.fpsAcc = 0;
        this.timeFps = this.clock.elapsedTime;
        if (this.fpsCount > 0) {
          if (this.fpsCur < 20) {
            this.tornadoSamples = Math.min(this.tornadoSamples + 1, this.MAX_SAMPLES);
          }
          if (this.fpsCur > 25) {
            this.tornadoSamples = Math.max(this.tornadoSamples - 1, this.MIN_SAMPLES);
          }
          this.tornadoW = this.SCENE_WIDTH / this.tornadoSamples;
          this.tornadoH = this.SCENE_HEIGHT / this.tornadoSamples;
        }
      }
      return this.renderScene();
    };

    Stormtest.prototype.dispose = function() {};

    Stormtest.prototype.cameraLerp = function(res, step, cur, next) {
      res.x = UTILS.lerp(step, cur[0], next[0]) * this.SCENE_SCALE;
      res.y = UTILS.lerp(step, cur[1], next[1]) * this.SCENE_SCALE;
      res.z = UTILS.lerp(step, cur[2], next[2]) * this.SCENE_SCALE;
      return res;
    };

    Stormtest.prototype.initCameraData = function() {
      this.audioListener = new THREE.AudioListenerObject(this.camera);
      this.scene.add(this.audioListener);
      this.camdir = new THREE.Vector3();
      this.camv = new THREE.Vector3();
      this.camu = new THREE.Vector3();
      this.camr = new THREE.Vector3();
      this.camSrc = new THREE.Vector3();
      this.camTgt = new THREE.Vector3();
      this.cameraPosData = [[-1206.71076716, -93.7893524735, -126.831423857], [-1206.24263494, -93.7123166071, -126.732381616], [-1204.84091075, -93.4817583003, -126.435966033], [-1203.44316794, -93.2520187065, -126.140610652], [-1202.04937145, -93.0230911468, -125.846307159], [-1200.66134996, -92.7949169713, -125.553455693], [-1199.27054167, -92.5657336087, -125.260266993], [-1197.88798735, -92.3373535471, -124.969071442], [-1196.51365091, -92.1097702128, -124.679861963], [-1195.14749627, -91.882977079, -124.392632054], [-1193.78110512, -91.6555964463, -124.105614476], [-1192.41992091, -91.4285203869, -123.819958428], [-1191.06686157, -91.2022260792, -123.536280326], [-1189.72189043, -90.976707101, -123.254575847], [-1188.3796441, -90.7510879923, -122.973725408], [-1187.03945591, -90.5252614416, -122.693596564], [-1185.70729669, -90.3002020015, -122.415446146], [-1184.38312911, -90.0759033546, -122.139271988], [-1183.06441229, -89.8519518456, -121.864549681], [-1181.74483207, -89.6273213728, -121.589969701], [-1180.43318178, -89.4034437079, -121.317377115], [-1179.12942341, -89.1803126382, -121.046771873], [-1177.83351881, -88.9579219963, -120.77815447], [-1176.53421843, -88.7344474088, -120.509194029], [-1175.2426707, -88.5116995215, -120.242222692], [-1173.95891164, -88.2896843735, -119.97725806], [-1172.6829023, -88.0683959017, -119.714302681], [-1171.40570899, -87.8463894746, -119.451515597], [-1170.133841, -87.624720492, -119.190261473], [-1168.86965461, -87.4037707393, -118.931041474], [-1167.61310997, -87.1835342579, -118.673860142], [-1166.35731752, -86.962900332, -118.417307187], [-1165.10468869, -86.7422605373, -118.161897873], [-1163.85963016, -86.5223268145, -117.908557907], [-1162.62210106, -86.3030933089, -117.657293744], [-1161.3869718, -86.0837357287, -117.407064422], [-1160.15312217, -85.864076595, -117.15765805], [-1158.92672691, -85.6451107305, -116.910363728], [-1157.70774399, -85.4268323854, -116.665189735], [-1156.49250708, -85.2086545584, -116.42140106], [-1155.27695562, -84.989928783, -116.178184955], [-1154.06873745, -84.7718838351, -115.937130705], [-1152.86780926, -84.5545140692, -115.698248307], [-1151.6716588, -84.3374190307, -115.461043332], [-1150.47390145, -84.119580572, -115.224232426], [-1149.28335064, -83.9024108647, -114.989639837], [-1148.09996166, -83.6859043683, -114.757277154], [-1146.92205463, -83.4697948516, -114.526823228], [-1145.74156217, -83.2527989668, -114.296658189], [-1144.56814326, -83.0364601287, -114.068774057], [-1143.40175162, -82.8207729015, -113.843183868], [-1142.24120568, -82.605551414, -113.619670596], [-1141.0774214, -82.3893546991, -113.396415626], [-1139.92057083, -82.1738037028, -113.175509672], [-1138.77060592, -81.9588930942, -112.956967048], [-1137.62649696, -81.7444619997, -112.740603897], [-1136.47883417, -81.5290224304, -112.524544174], [-1135.33795767, -81.3142176338, -112.310906387], [-1134.20381749, -81.1000423843, -112.099705927], [-1133.07517704, -80.8863039909, -111.890719449], [-1131.9430163, -80.6715809651, -111.68215816], [-1130.81748613, -80.4574821541, -111.476095715], [-1129.69853444, -80.2440024379, -111.27254836], [-1128.58434691, -80.030859093, -111.071178972], [-1127.46703308, -79.8168134748, -110.870433887], [-1126.35618502, -79.6033819071, -110.672267597], [-1125.25174827, -79.3905593761, -110.476696942], [-1124.15094797, -79.1779135676, -110.283195221], [-1123.04778703, -78.9645077318, -110.090594741], [-1121.95091711, -78.7517061824, -109.900654967], [-1120.86028116, -78.5395040111, -109.713393035], [-1119.7717491, -78.3272584752, -109.528015443], [-1118.68200476, -78.114456354, -109.343894071], [-1117.59836581, -77.9022491605, -109.162516032], [-1116.5207724, -77.6906320928, -108.983898417], [-1115.4433329, -77.478689928, -108.806902403], [-1114.3662229, -77.2664570578, -108.631595548], [-1113.29502083, -77.0548101681, -108.459113947], [-1112.22966373, -76.8437445633, -108.289474257], [-1111.16208082, -76.6320093524, -108.121112638], [-1110.09677305, -76.4203129215, -107.954950675], [-1109.03716282, -76.2091939412, -107.791693553], [-1107.98318382, -75.9986478223, -107.631357055], [-1106.92415734, -75.7870237599, -107.471871591], [-1105.86976556, -75.5758326567, -107.315173064], [-1104.82084691, -75.3652108973, -107.16145478], [-1103.77522, -75.1548272468, -107.010317679], [-1102.72549287, -74.9435460263, -106.860345185], [-1101.68107222, -74.7328308882, -106.713409055], [-1100.64188502, -74.5226774154, -106.569522267], [-1099.60227784, -74.3122206474, -106.427609754], [-1098.56176542, -74.1013951783, -106.287607357], [-1097.52630747, -73.8911284401, -106.150704148], [-1096.4958267, -73.6814161221, -106.016910657], [-1095.46073805, -73.4707925624, -105.884392567], [-1094.42838067, -73.2603966866, -105.754602991], [-1093.40080809, -73.0505526288, -105.627964672], [-1092.37570246, -72.8409133533, -105.50405283], [-1091.34578553, -72.6303733157, -105.38148664], [-1090.32045032, -72.4203827641, -105.262105549], [-1089.29961105, -72.2109375605, -105.145913987], [-1088.2760964, -72.0009511456, -105.031552981], [-1087.25229366, -71.790800228, -104.91950542], [-1086.23276825, -71.5811926675, -104.810668645], [-1085.216775, -71.3720247681, -104.704917102], [-1084.19376368, -71.1617005227, -104.600249025], [-1083.17479858, -70.9519179226, -104.498801683], [-1082.15978409, -70.7426730019, -104.40057058], [-1081.14216438, -70.532981072, -104.304318981], [-1080.12296666, -70.3230116938, -104.210258441], [-1079.10747033, -70.1135786317, -104.119406073], [-1078.09467084, -69.9045413442, -104.031579446], [-1077.07440545, -69.6943744226, -103.94485993], [-1076.05757758, -69.4847427402, -103.861324614], [-1075.04407998, -69.2756425019, -103.780956476], [-1074.02610768, -69.0659087501, -103.702283996], [-1073.00705236, -68.8560689742, -103.625952028], [-1071.991042, -68.6467599198, -103.552738295], [-1070.97491617, -68.4375196459, -103.48204433], [-1069.9526877, -68.2274633376, -103.412742427], [-1068.93320136, -68.0179373199, -103.346487992], [-1067.916336, -67.8089379658, -103.283246847], [-1066.8911117, -67.5988343227, -103.220953864], [-1065.86713078, -67.3890842592, -103.161392539], [-1064.84544209, -67.179860786, -103.104739759], [-1063.81876103, -66.9709357719, -103.049645737], [-1062.78916678, -66.7634747814, -102.996504091], [-1061.76148738, -66.5582033668, -102.946185136], [-1060.73171679, -66.3545280991, -102.897915208], [-1059.69532097, -66.1517796304, -102.850824245], [-1058.66046441, -65.9511803895, -102.806386804], [-1057.62595746, -65.7525584839, -102.764340955], [-1056.58153672, -65.5543961879, -102.722753479], [-1055.53825304, -65.3583430463, -102.683612727], [-1054.49594926, -65.1643820844, -102.646834997], [-1053.4435259, -64.9708774255, -102.61032981], [-1052.39047979, -64.7792454114, -102.575778289], [-1051.33797071, -64.5896658308, -102.543324461], [-1050.27672807, -64.4007793127, -102.511206709], [-1049.21248829, -64.2134445795, -102.480397206], [-1048.14830758, -64.0281228067, -102.451369038], [-1047.07627669, -63.8436609536, -102.422599495], [-1045.99930299, -63.6605007999, -102.394525452], [-1044.92187032, -63.4793144047, -102.367858193], [-1043.83695748, -63.2990847197, -102.341223894], [-1042.74558456, -63.1199776064, -102.31469689], [-1041.6531883, -62.9428053174, -102.289135651], [-1040.55315686, -62.766616377, -102.263225248], [-1039.44557431, -62.5914419406, -102.236848961], [-1038.33634992, -62.4181636578, -102.210921353], [-1037.21879743, -62.2458252069, -102.184096495], [-1036.09302454, -62.0744642699, -102.156236418], [-1034.96492734, -61.9049610738, -102.128220662], [-1033.82725647, -61.7362841214, -102.098582548], [-1032.68111032, -61.5686186991, -102.06733055], [-1031.53188084, -61.4027728557, -102.035218076], [-1030.37126234, -61.2375697702, -102.000568132], [-1029.20231695, -61.0734830729, -101.963700709], [-1028.02943655, -60.9111780351, -101.925151996], [-1026.84276136, -60.7492626388, -101.882945307], [-1025.648295, -60.5886390703, -101.837874064], [-1024.44892838, -60.4297594745, -101.790166135], [-1023.23274545, -60.2709471377, -101.737455919], [-1022.00967202, -60.1136722885, -101.681168394], [-1020.77942726, -59.9579368408, -101.62093032], [-1019.53102668, -59.8022116783, -101.554502822], [-1018.27580543, -59.6481723139, -101.483491257], [-1017.00917583, -59.4952134126, -101.406726649], [-1015.72593943, -59.342648737, -101.322921973], [-1014.43445497, -59.1917327802, -101.233096869], [-1013.12659904, -59.0413702171, -101.135421181], [-1011.80394268, -58.8918549025, -101.029705064], [-1010.47134344, -58.7439514095, -100.916289447], [-1009.11661756, -58.5960068653, -100.792592297], [-1007.74908214, -58.4494309071, -100.659659208], [-1006.36671965, -58.3040277208, -100.516579073], [-1004.96127458, -58.1587271579, -100.361363458], [-1003.54225323, -58.0149816356, -100.194985888], [-1002.10098801, -57.8716806259, -100.015326801], [-1000.6388187, -57.7291390811, -99.8219156953], [-999.16017529, -57.5881161138, -99.6147556433], [-997.660227315, -57.4467442992, -99.3983179938], [-996.161182938, -57.3068547766, -99.1821079338], [-994.657429438, -57.1676401172, -98.9652234154], [-993.14718712, -57.0288340308, -98.7474028563], [-991.638101476, -56.891490484, -98.5299354202], [-990.118066403, -56.7538982546, -98.3108595926], [-988.598006807, -56.6175691907, -98.091997792], [-987.073675235, -56.4818928086, -97.8726799497], [-985.542747547, -56.3465295474, -97.6525556438], [-984.013194401, -56.2125731151, -97.4329454476], [-982.472152226, -56.0782185295, -97.2117901653], [-980.931923438, -55.9451604112, -96.9911060455], [-979.386035419, -55.8124841615, -96.7698718152], [-977.835222746, -55.6802769393, -96.548231524], [-976.284200895, -55.5491755472, -96.3269623081], [-974.72289325, -55.4177723695, -96.1044797107], [-973.16323888, -55.2877011253, -95.8827083217], [-971.59472893, -55.1574974651, -95.6600021156], [-970.024751147, -55.0281646711, -95.4375541383], [-968.450519691, -54.8993002943, -95.214945428], [-966.87030529, -54.7706488361, -94.9919278408], [-965.290055794, -54.6430112352, -94.7694532246], [-963.699690874, -54.514992342, -94.5459709901], [-962.111233546, -54.3882230095, -94.3233732267], [-960.512695164, -54.2610504202, -94.0998224293], [-958.914254203, -54.1348499462, -93.8769137957], [-957.309106965, -54.0086794294, -93.653619644], [-955.700770146, -53.8830037615, -93.4305017588], [-954.088718097, -53.7577368473, -93.2074995551], [-952.470575563, -53.6325423277, -92.984273528], [-950.851324761, -53.5080812545, -92.7615992321], [-949.223469464, -53.3833245806, -92.5383659406], [-947.596728799, -53.25957231, -92.3160565382], [-945.95925689, -53.1352104892, -92.0929168719], [-944.324090101, -53.0119833731, -91.8709144219], [-942.67775005, -52.8880610166, -91.6480657935], [-941.033144963, -52.765166049, -91.4263046162], [-939.378769378, -52.6417380696, -91.2039542825], [-937.724829636, -52.5191325007, -90.9825355678], [-936.062144526, -52.3961044367, -90.7607264892], [-934.398977912, -52.2737456186, -90.5397520802], [-932.727715299, -52.1510237128, -90.3185295668], [-931.055433938, -52.0288690278, -90.0981021032], [-929.375332529, -51.9063602104, -89.8775140671], [-927.694053056, -51.7843669913, -89.6577371134], [-926.004858897, -51.6619788554, -89.4378343075], [-924.314702594, -51.5401042987, -89.2188124664], [-922.616169697, -51.4177450663, -88.99964871], [-920.917262596, -51.2959461367, -88.7814877241], [-919.209153557, -51.1735246157, -88.5631201172], [-917.501626514, -51.0517579424, -88.3459269604], [-915.783713103, -50.9291834732, -88.1284160876], [-914.067217918, -50.8073415723, -87.912233049], [-912.339765574, -50.6845876271, -87.6957091726], [-910.612973472, -50.5624335801, -87.4804491448], [-908.877243394, -50.4396028848, -87.2651771796], [-907.139952038, -50.3170472848, -87.0509108335], [-905.396094691, -50.1940946493, -86.8370034246], [-903.648113063, -50.0710483675, -86.6238056159], [-901.896283773, -49.9479276713, -86.4113769793], [-900.137432686, -49.8243017449, -86.199326926], [-898.377791568, -49.7009657747, -85.9884929188], [-896.607904156, -49.576671279, -85.7776743794], [-894.837885515, -49.4527169117, -85.5682035416], [-893.059538221, -49.3280194579, -85.3590540358], [-891.278092553, -49.2032402894, -85.1509210624], [-889.49236349, -49.0782070451, -84.943678688], [-887.699358652, -48.9525139617, -84.7369803241], [-885.905522763, -48.8269758857, -84.531656456], [-884.101744862, -48.700396061, -84.3266064858], [-882.296017626, -48.5737876543, -84.1228461069], [-880.485331327, -48.4467419832, -83.9200324446], [-878.667619611, -48.3189728735, -83.7179470007], [-876.848433757, -48.1911744527, -83.5172868518], [-875.020444199, -48.062382651, -83.3172064849], [-873.189008889, -47.933265271, -83.1183761292], [-871.354627707, -47.8038640986, -82.920881448], [-869.510893766, -47.6733347017, -82.7240096934], [-867.665111864, -47.5425913613, -82.5286425029], [-865.814264533, -47.411223499, -82.3344629068], [-863.955996993, -47.2789057991, -82.1412409745], [-862.095325642, -47.1462557705, -81.9495789872], [-860.228570973, -47.0127772444, -81.759099414], [-858.355283532, -46.8783870467, -81.5697943092], [-856.479272322, -46.7435451829, -81.382120958], [-854.597222151, -46.6078005407, -81.1957571256], [-852.708531218, -46.4710480749, -81.0106847938], [-850.816840524, -46.3337231712, -80.8273377183], [-848.92017484, -46.1955432833, -80.6455510887], [-847.015825332, -46.0561313868, -80.4650957677], [-845.108257648, -45.9160242647, -80.2864909484], [-843.197332303, -45.775169751, -80.1097757264], [-841.27767078, -45.6328459115, -79.9344718002], [-839.35423268, -45.4896472022, -79.7611539722], [-837.427344166, -45.3455748362, -79.5899318235], [-835.495235381, -45.2003596975, -79.4207237044], [-833.556282487, -45.0537472919, -79.2534873355], [-831.61082835, -44.906132405, -79.08604644], [-829.6556822, -44.7574620666, -78.9158563898], [-827.688883949, -44.6074393145, -78.7428253015], [-825.709883915, -44.455946432, -78.5669981037], [-823.721238721, -44.3032624855, -78.3887002494], [-821.722887894, -44.1493315271, -78.2080131557], [-819.714395368, -43.9940487363, -78.0249851877], [-817.69280492, -43.8369847243, -77.8394495369], [-815.661560442, -43.6785302779, -77.6517956404], [-813.620607766, -43.5186270741, -77.4621032572], [-811.569895204, -43.3572161891, -77.2704518626], [-809.508939772, -43.1941820399, -77.0768854492], [-807.435683568, -43.0292039698, -76.8813239831], [-805.352732442, -42.8625625291, -76.6840630465], [-803.260042917, -42.6941956169, -76.4851795298], [-801.157574535, -42.5240403399, -76.2847497647], [-799.045289964, -42.3520329748, -76.0828494565], [-796.922925792, -42.1780789723, -75.8795367904], [-794.788883228, -42.0019072539, -75.6747738961], [-792.645109265, -41.8237087935, -75.4687808795], [-790.491575247, -41.6434156301, -75.2616291714], [-788.328255713, -41.4609587616, -75.0533891597], [-786.155128404, -41.2762681071, -74.8441300921], [-783.972174256, -41.089272468, -74.633919975], [-781.779377369, -40.8998994912, -74.4228254676], [-779.576724967, -40.7080756318, -74.2109117718], [-777.363773109, -40.5136677908, -73.9982157898], [-775.140457374, -40.3165914717, -73.7847977082], [-772.907394771, -40.1168525672, -73.5707561849], [-770.664578286, -39.9143717703, -73.3561485644], [-768.412003418, -39.7090684093, -73.1410301565], [-766.149668048, -39.5008604225, -72.9254541109], [-763.877572295, -39.2896643367, -72.709471291], [-761.595718356, -39.0753952489, -72.4931301463], [-759.304110334, -38.8579668116, -72.276476585], [-757.002754058, -38.6372912224, -72.0595538471], [-754.691656889, -38.4132792179, -71.8424023774], [-752.370827518, -38.1858400727, -71.6250597015], [-750.040275755, -37.9548816032, -71.4075603032], [-747.700012317, -37.7203101773, -71.1899355046], [-745.350048603, -37.4820307296, -70.9722133511], [-742.990396469, -37.2399467832, -70.7544184991], [-740.621067998, -36.9939604776, -70.5365721101], [-738.242075279, -36.7439726037, -70.3186917499], [-735.853430169, -36.4898826452, -70.1007912947], [-733.455144073, -36.2315888282, -69.8828808438], [-731.047227721, -35.9689881774, -69.6649666411], [-728.629690951, -35.7019765802, -69.4470510043], [-726.202542497, -35.4304488587, -69.2291322638], [-723.765789793, -35.1542988492, -69.0112047115], [-721.319372365, -34.8734091782, -68.7932564105], [-718.863000847, -34.5876405549, -68.5752644523], [-716.396715229, -34.2990498013, -68.3572278728], [-713.920275902, -34.0090933578, -68.139180127], [-711.433675624, -33.7177492693, -67.9211700532], [-708.936906846, -33.4249951495, -67.7032458528], [-706.42996171, -33.1308081635, -67.48545508], [-703.912832032, -32.8351650094, -67.2678446309], [-701.385509298, -32.5380418993, -67.0504607321], [-698.847984646, -32.2394145409, -66.8333489286], [-696.299594677, -31.9391576228, -66.6165392122], [-693.740933629, -31.6373389294, -66.4000907419], [-691.172022791, -31.3339373537, -66.1840477332], [-688.592852384, -31.0289264844, -65.9684529394], [-686.003412201, -30.7222793052, -65.7533483636], [-683.403691588, -30.4139681737, -65.538775244], [-680.793155568, -30.1038851569, -65.3247651236], [-678.171994111, -29.7920322723, -65.1113623835], [-675.540502279, -29.4784266436, -64.8986114287], [-672.898668025, -29.1630379977, -64.6865503285], [-670.246478726, -28.8458353255, -64.4752163065], [-667.583427637, -28.5267123764, -64.2646396202], [-664.909537484, -28.2056424082, -64.0548575286], [-662.225239138, -27.8826593655, -63.8459105542], [-659.530517999, -27.5577291478, -63.637832391], [-656.825213791, -27.2307950342, -63.4306545327], [-654.108573197, -26.9017106533, -63.2244033964], [-651.381452885, -26.5705706163, -63.0191182349], [-648.643835691, -26.2373373434, -62.8148288985], [-645.895432305, -25.9019317191, -62.6115628163], [-643.135675619, -25.5642323822, -62.4093461286], [-640.365359464, -25.2243206888, -62.2082105188], [-637.584463384, -24.8821551786, -62.0081816623], [-634.792149022, -24.537571429, -61.8092826921], [-631.988886815, -24.1905995965, -61.611539585], [-629.174974128, -23.8412429471, -61.4149754948], [-626.349839206, -23.489374147, -61.2196119621], [-623.513373819, -23.134934073, -61.0254704147], [-620.666180259, -22.7779685181, -60.8325696806], [-617.806310048, -22.417788011, -60.6434554073], [-614.932228193, -22.0537568502, -60.4606939206], [-612.04464498, -21.6859238793, -60.284331039], [-609.142863032, -21.3141274043, -60.1144164353], [-606.227144162, -20.938348079, -59.9509944283], [-603.298019226, -20.5586061166, -59.7941050708], [-600.354119554, -20.1776448966, -59.6443342063], [-597.395610822, -19.8051102235, -59.5034517736], [-594.422178538, -19.4414465212, -59.3716172504], [-591.433528236, -19.0863402771, -59.2488571017], [-588.430548538, -18.7396500859, -59.1351866338], [-585.412170052, -18.4009361006, -59.0306399577], [-582.379503485, -18.0700805777, -58.9352286001], [-579.332010187, -17.7467135126, -58.8489806373], [-576.269953968, -17.4305807985, -58.7719145127], [-573.193528856, -17.1214134913, -58.7040479347], [-570.102378621, -16.8188551451, -58.6454044565], [-566.997212755, -16.5227062614, -58.5959917209], [-563.87726231, -16.232539325, -58.5558359403], [-560.743554478, -15.9481954276, -58.5249355644], [-557.59509515, -15.6692045203, -58.5033165499], [-554.433051088, -15.3954221765, -58.4909694309], [-551.256370604, -15.1263616294, -58.4879167022], [-548.066201704, -14.8618695662, -58.4941425042], [-544.861582543, -14.6014656073, -58.5096625377], [-541.643503965, -14.3449669245, -58.5344561662], [-538.411221094, -14.0919199198, -58.5685289928], [-535.165449188, -13.8420943676, -58.6118571754], [-531.905767063, -13.5950811263, -58.6644330887], [-528.632515981, -13.3505874543, -58.7262310836], [-525.345684674, -13.1082636019, -58.7972274766], [-522.045162003, -12.8677419842, -58.877395926], [-518.731412267, -12.6287444078, -58.9666942736], [-515.403813459, -12.3908189473, -59.0650962196], [-512.063096002, -12.153727509, -59.1725441898], [-508.708851778, -11.9170496296, -59.2889972985], [-505.341285952, -11.6804621373, -59.4143972136], [-501.960596709, -11.4436408756, -59.5486800105], [-498.566315138, -11.2061531384, -59.6917890142], [-495.158980259, -10.9677304729, -59.8436417418], [-491.738373481, -10.7279816819, -60.0041644188], [-488.304409579, -10.486537945, -60.1732742981], [-484.859429216, -10.2430877668, -60.351532612], [-481.405320706, -9.997231718, -60.5394791374], [-477.942274284, -9.74862864045, -60.7369709579], [-474.470542572, -9.49694862187, -60.9438577859], [-470.990022505, -9.24180203463, -61.1599896725], [-467.500905048, -8.98284971594, -61.385204824], [-464.003405209, -8.71975797471, -61.61933479], [-460.497508143, -8.4521546863, -61.862208889], [-456.983307715, -8.17968764272, -62.1136481086], [-453.461034532, -7.90203034611, -62.3734648924], [-449.930769227, -7.61883202907, -62.6414680189], [-446.392478904, -7.32972350282, -62.9174617285], [-442.846428597, -7.03439094606, -63.2012394651], [-439.182104949, -6.71236834689, -63.494123876], [-435.29769042, -6.34415227563, -63.7969999962], [-431.205465172, -5.9306658983, -64.1089705517], [-426.916671398, -5.47261511051, -64.4290919598], [-422.441621808, -4.97050990457, -64.7563712532], [-417.789793958, -4.42468301429, -65.0897636328], [-412.969962322, -3.83531594819, -65.4281702622], [-407.990220144, -3.20244438037, -65.7704377301], [-402.858146925, -2.5259919746, -66.1153570162], [-397.580823996, -1.80558772112, -66.4616922426], [-392.16469609, -1.04133715026, -66.8083048917], [-386.615685039, -0.234033549569, -67.1540866062], [-380.939294726, 0.61541496422, -67.4979245874], [-375.140630238, 1.50598533268, -67.8387056858], [-369.22441628, 2.43653957459, -68.1753206825], [-363.195015941, 3.40582653064, -68.5066686923], [-357.056450002, 4.41248518247, -68.8316616342], [-350.813024142, 5.45491777706, -69.1492373233], [-344.467822529, 6.53162505504, -69.4583460676], [-338.023924667, 7.64095735086, -69.7579666011], [-331.485445003, 8.78089771553, -70.0471360276], [-324.85407309, 9.94983332611, -70.3248855669], [-318.133489557, 11.145603469, -70.5903351139], [-311.32535677, 12.366394398, -70.8426054912], [-304.432997722, 13.6099472149, -71.0809168871], [-297.457403586, 14.8744504497, -71.3044738049], [-290.402355946, 16.1574331251, -71.5126338086], [-283.268110414, 17.4571617526, -71.7046881253], [-276.057765715, 18.7712652264, -71.8800963529], [-268.772548, 20.0977756058, -72.0383059518], [-261.413679365, 21.4347321023, -72.1788201128], [-253.984317637, 22.7797865448, -72.3013009941], [-246.484102485, 24.1313662263, -72.4052925175], [-238.915877612, 25.4872680535, -72.4905642353], [-231.280517277, 26.8457520432, -72.5568374833], [-223.578725956, 28.2051654613, -72.6038720038], [-215.813638749, 29.5634360203, -72.6316358427], [-207.984011849, 30.9194291163, -72.6398628588], [-200.09375565, 32.2710739123, -72.6286797072], [-192.14150298, 33.6173954034, -72.5978923227], [-184.130500084, 34.9566180296, -72.5476788101], [-176.059932748, 36.2878032451, -72.4779550558], [-167.93285369, 37.6093839876, -72.3889720599], [-159.747843031, 38.920670565, -72.2806575341], [-151.509104596, 40.2200662435, -72.1534348943], [-143.214264776, 41.5071809126, -72.0072030055], [-134.866770647, 42.7807099023, -71.8423875998], [-126.466496048, 44.0400183264, -71.6591297873], [-118.013262097, 45.2845309033, -71.4575809999], [-109.510430325, 46.5131911032, -71.2382497175], [-100.957299375, 47.7256336643, -71.0012838795], [-92.3540708003, 48.9213995877, -70.7469305047], [-83.7016777674, 50.0999742495, -70.4755263571], [-74.994174221, 51.2586200832, -70.270230398], [-66.213489454, 52.3903317906, -70.3879166211], [-57.3723608592, 53.4942869816, -70.8426892282], [-48.4849075652, 54.570346533, -71.6289943484], [-39.5644738659, 55.6185569214, -72.7405984545], [-30.6238927748, 56.6390926809, -74.1707607383], [-21.6739579465, 57.6323980329, -75.9126096866], [-12.7252610654, 58.5989546014, -77.9591810539], [-3.78766235052, 59.5393274543, -80.3035862562], [5.12906842745, 60.4540904864, -82.9389793704], [14.0168151901, 61.3439672403, -85.8590444067], [22.8675603787, 62.2096682639, -89.0577683235], [31.6735193514, 63.0519035857, -92.5295138325], [40.4269260861, 63.8713642256, -96.2689855822], [49.120726335, 64.6687794003, -100.271555458], [57.7478646692, 65.4448548703, -104.533078913], [66.3011103, 66.200263047, -109.049847081], [74.7731743052, 66.9356563236, -113.81867327], [83.1567136457, 67.6516705337, -118.836954496], [91.4439161579, 68.3489000667, -124.102492105], [99.6268630387, 69.0279287968, -129.613751908], [107.69694862, 69.6892966151, -135.369570646], [115.643957548, 70.3301360596, -141.370691164], [123.457860304, 70.9476207659, -147.618986643], [131.127108401, 71.5421772557, -154.114030253], [138.639996512, 72.1142548416, -160.856370909], [145.983532975, 72.6642666104, -167.846755838], [153.281543234, 73.1924767276, -175.155448287], [160.418698427, 73.6993231896, -182.740369397], [167.37342754, 74.185126781, -190.603388182], [174.121484321, 74.65016445, -198.745274266], [180.637968634, 75.0947836772, -207.168211894], [186.892615328, 75.5191833122, -215.869505106], [192.853574445, 75.9236148319, -224.845776937], [198.486057067, 76.3083233193, -234.090489941], [203.75146351, 76.6735081087, -243.590649089], [208.607400726, 77.0193083142, -253.322774114], [213.0082724, 77.3457765739, -263.246207668], [216.950933825, 77.6552542332, -273.440722125], [220.415415629, 77.9498546967, -284.01456164], [223.32651064, 78.2292769659, -294.940094902], [225.609094953, 78.4934579972, -306.180639163], [227.190972037, 78.7425986654, -317.68970537], [227.983176887, 79.0288619702, -329.407862868], [227.922503805, 79.4495870956, -341.263248319], [227.032712668, 79.9988378987, -353.184912973], [225.346732934, 80.6668264636, -365.114655354], [222.901124438, 81.4432589103, -377.002430196], [219.733459298, 82.3177863001, -388.804680769], [215.878194922, 83.2807263589, -400.487622534], [211.367469176, 84.3228537641, -412.019997434], [206.23048715, 85.4354881888, -423.372730748], [200.491175878, 86.6108668401, -434.520979246], [194.170747622, 87.8416581349, -445.438822985], [187.287399605, 89.1209909945, -456.099619144], [179.856194924, 90.4424420426, -466.475762688], [171.889822804, 91.79987549, -476.537484853], [163.399620711, 93.1872485014, -486.251730166], [154.395480908, 94.5985920022, -495.582143741], [144.887390902, 96.0277401936, -504.487713308], [134.886019187, 97.4682149088, -512.922426482], [124.402099943, 98.9132741978, -520.835516281], [113.451820931, 100.355133668, -528.168625348], [102.052845497, 101.785513512, -534.858368246], [90.2320217741, 103.194630079, -540.833656195], [78.0213487255, 104.571794182, -546.018672053], [65.4675099598, 105.904379718, -550.332289108], [52.6283483486, 107.178535781, -553.692724512], [39.5776789782, 108.379027976, -556.021418085], [26.4063249508, 109.489736103, -557.24983893], [13.218123097, 110.49479344, -557.327273915], [0.127067563253, 111.379664362, -556.228701572], [-12.7525560395, 112.132732218, -553.959914793], [-25.3165941401, 112.74651651, -550.557696917], [-37.4739425592, 113.217995672, -546.088836568], [-49.1607011171, 113.548983351, -540.637452292], [-60.3355650842, 113.74502416, -534.298012074], [-71.1022783193, 113.871364132, -527.272913019], [-81.6101709413, 114.024557171, -519.778807805], [-91.8181976611, 114.21179424, -511.80535857], [-101.675399071, 114.440105432, -503.345004337], [-111.124265729, 114.71760608, -494.394987993], [-120.100842542, 115.053653499, -484.957853084], [-128.535700362, 115.459111094, -475.040119252], [-136.353079931, 115.946627056, -464.653142923], [-143.468497556, 116.530712513, -453.818255952], [-149.787657945, 117.229513893, -442.566543805], [-155.207972699, 118.062997378, -430.945192983], [-159.623356467, 119.051472406, -419.017544384], [-162.924934955, 120.215080167, -406.879359025], [-165.011920934, 121.57288691, -394.651053168], [-165.803518498, 123.139657619, -382.48300236], [-165.255294156, 124.922371353, -370.549317345], [-163.375421207, 126.916624756, -359.034867061], [-160.232706655, 129.105301626, -348.111680956], [-155.950826011, 131.460198045, -337.915221325], [-150.690096427, 133.946136618, -328.529602729], [-144.621923745, 136.526704548, -319.984532519], [-137.913717958, 139.166595651, -312.268672801], [-130.706920611, 141.837308774, -305.337650033], [-123.120890873, 144.515002314, -299.133683693], [-115.258823957, 147.178620642, -293.595610879], [-107.193515196, 149.814812851, -288.659839355], [-98.9911742249, 152.410642772, -284.269655769], [-90.703505763, 154.956578397, -280.37316479], [-82.3826985248, 157.442039928, -276.924576199], [-74.0638963155, 159.861270845, -273.882394696], [-65.7813287616, 162.20726002, -271.205873456], [-57.5884148235, 164.463689627, -268.866825158], [-49.5144506194, 166.62799344, -266.889326609], [-41.613862623, 168.691230518, -265.298431285], [-33.9519537823, 170.642010062, -264.113676364], [-26.5805801583, 172.474273548, -263.352190008], [-19.5869570679, 174.171138633, -263.012033923], [-13.0511048639, 175.717724609, -263.072576984], [-7.04873770348, 177.098625635, -263.483617692], [-1.65563266448, 178.293292201, -264.144320485], [3.08807882835, 179.284679079, -264.907334169], [7.3644582779, 180.136838459, -265.805989239], [11.3482189065, 180.923507704, -266.975570247], [15.0238115503, 181.64447333, -268.378830078], [18.3885098614, 182.30156097, -269.97290679], [21.4521556542, 182.898768663, -271.714327408], [24.2342435392, 183.44188275, -273.563653951], [26.7582976077, 183.949292081, -275.482111164], [29.0503763628, 184.438800071, -277.437214765], [31.1371090154, 184.916347609, -279.410972141], [33.0420607566, 185.38675388, -281.3882134], [34.7852028666, 185.854463883, -283.359932584], [36.3831525574, 186.322823471, -285.318123102], [37.8495430898, 186.794455918, -287.256581995], [39.19545376, 187.271363281, -289.170339505], [40.4298581269, 187.755021545, -291.055215698], [41.5600441696, 188.246464098, -292.907494451], [42.5923159783, 188.746166685, -294.722726201], [43.5316186788, 189.254504324, -296.497755662], [44.3820198528, 189.771629198, -298.229651346], [45.1474938854, 190.297205615, -299.914179138], [45.8308435067, 190.831079424, -301.548953791], [46.4347990982, 191.372781563, -303.130825769], [46.9619928532, 191.921608633, -304.656281718], [47.4141868906, 192.477054346, -306.123272498], [47.7932390352, 193.038355687, -307.529127963], [48.1339764308, 193.604671976, -308.88719652], [48.4705967805, 194.17510578, -310.213825632], [48.8036091858, 194.748760091, -311.511027479], [49.1333041118, 195.324720315, -312.780731882], [49.4598773313, 195.902011545, -314.02461762], [49.783401166, 196.479631763, -315.244230228], [50.103849345, 197.056554631, -316.440985117], [50.4211018971, 197.631741021, -317.616200248], [50.7349704105, 198.204137493, -318.771086391], [51.0452358323, 198.772665111, -319.906713057], [51.3516474063, 199.33622851, -321.024039531], [51.653934376, 199.893716578, -322.123919414], [51.9518147074, 200.444003693, -323.20710738], [52.2447623137, 200.986102802, -324.274661315], [52.5326317352, 201.518781338, -325.326921149], [52.8151413623, 202.040882733, -326.36438761], [53.0918160784, 202.551376295, -327.387816552], [53.3623068777, 203.049154683, -328.397707443], [53.6265359937, 203.532928957, -329.394089518], [53.8838848507, 204.001786587, -330.377822861], [54.1342227608, 204.454489209, -331.34896511], [54.3773785439, 204.889829577, -332.307622675], [54.6126646656, 205.306987721, -333.25468977], [54.8403948479, 205.704419902, -334.189488053], [55.0595901956, 206.081553602, -335.113330365], [55.2707179035, 206.436735704, -336.02528527], [55.4728327654, 206.769401895, -336.926580981], [55.6663461306, 207.077939225, -337.816356261], [55.8502588313, 207.361856072, -338.695884445], [56.0250773316, 207.619453263, -339.564135209], [56.189664274, 207.850373198, -340.42254397], [56.3444659879, 208.052947091, -341.270131342], [56.4917785734, 208.239716319, -342.105565807], [56.6348733605, 208.423296044, -342.926482446], [56.7739881528, 208.603517647, -343.73284438], [56.9086057556, 208.780888909, -344.525733501], [57.0394671364, 208.954802845, -345.30435763], [57.166275519, 209.125583871, -346.069463322], [57.2890304111, 209.293300963, -346.821352743], [57.4081949455, 209.45759159, -347.559642117], [57.5234549033, 209.618824164, -348.285091468], [57.6349224982, 209.776975081, -348.997828766], [57.7429834683, 209.9317542, -349.697579277], [57.8474966387, 210.083383409, -350.384839407], [57.9483016968, 210.232116421, -351.060129358], [58.0458980336, 210.377551358, -351.723002603], [58.140346486, 210.519719792, -352.373652565], [58.2312962375, 210.659082248, -353.012869502], [58.3191000092, 210.795384056, -353.640415357], [58.4039670428, 210.928512269, -354.256259878], [58.4859623032, 211.058503889, -354.860580551], [58.5648031484, 211.185771457, -355.454056556], [58.6407861, 211.310114609, -356.03652336], [58.7141145554, 211.431427161, -356.607949819], [58.7848552757, 211.549749598, -357.168500492], [58.8530327644, 211.665170344, -357.718398353], [58.9183966031, 211.778088311, -358.258260962], [58.9813897459, 211.888130387, -358.787700188], [59.0420787194, 211.995339007, -359.306869962], [59.100529848, 212.099756896, -359.815921635], [59.1568091454, 212.201426989, -360.315004102], [59.2107677564, 212.300641877, -360.804573229], [59.2625820334, 212.39731945, -361.284612566], [59.312432262, 212.491368605, -361.755097268], [59.3603818137, 212.582832518, -362.216168154], [59.4064933148, 212.671754276, -362.667964052], [59.4508285717, 212.758176827, -363.110621889], [59.4934485041, 212.842142937, -363.544276765], [59.5341807977, 212.92397731, -363.969396336], [59.5733119157, 213.003448949, -364.385784692], [59.6109142782, 213.08058196, -364.793551005], [59.6470443445, 213.155418074, -365.192824269], [59.6817574336, 213.227998664, -365.583731957], [59.7151076849, 213.298364713, -365.966400076], [59.7471480231, 213.366556788, -366.340953224], [59.7779301259, 213.432615019, -366.707514631], [59.8075017133, 213.496582464, -367.066210074], [59.8357518109, 213.55870125, -367.417390246], [59.862898229, 213.618796151, -367.760930177], [59.8889871783, 213.676905469, -368.096948447], [59.9140635277, 213.733066981, -368.425562473], [59.9381707934, 213.787317927, -368.746888547], [59.9613511297, 213.839695003, -369.061041867], [59.983645323, 213.890234348, -369.368136573], [60.0050927881, 213.938971536, -369.668285783], [60.0257315667, 213.985941573, -369.961601619], [60.0455983286, 214.031178886, -370.24819524], [60.0647283741, 214.074717321, -370.528176874], [60.0831556391, 214.116590142, -370.801655841], [60.1009127017, 214.156830021, -371.068740583], [60.1180307906, 214.195469046, -371.329538689], [60.1344901076, 214.232604392, -371.584228269], [60.1503423615, 214.268236709, -371.832882041], [60.1656456594, 214.302355536, -372.075560874], [60.1804258097, 214.334990714, -372.312369394], [60.1947073383, 214.3661715, -372.543411487], [60.2085135049, 214.395926562, -372.768790325], [60.2218663189, 214.424283989, -372.988608387], [60.2347865578, 214.451271291, -373.202967482], [60.2472937851, 214.476915402, -373.411968769], [60.25940637, 214.501242686, -373.615712777], [60.2711415064, 214.524278942, -373.814299428], [60.2825152338, 214.546049407, -374.007828055], [60.2935424581, 214.566578764, -374.196397424], [60.3042369722, 214.585891143, -374.38010575], [60.3146114782, 214.604010133, -374.55905072], [60.3246776092, 214.620958783, -374.733329508], [60.3344459509, 214.636759613, -374.903038795], [60.3439260647, 214.651434615, -375.06827479], [60.3531265092, 214.665005265, -375.229133242], [60.3620548636, 214.677492527, -375.385709464], [60.3707177494, 214.688916861, -375.538098345], [60.3791208535, 214.699298231, -375.686394369], [60.3872689507, 214.70865611, -375.830691636], [60.3951659255, 214.717009491, -375.97108387], [60.4028147949, 214.72437689, -376.107664443], [60.41021773, 214.730776359, -376.240526387], [60.4173760782, 214.73622549, -376.369762412], [60.4242903847, 214.740741423, -376.49546492], [60.4309604134, 214.744340855, -376.61772602], [60.4373851684, 214.747040049, -376.736637546], [60.4435629142, 214.748854838, -376.852291068], [60.449491196, 214.749800638, -376.96477791], [60.4551668599, 214.749892452, -377.074189161], [60.4605860715, 214.749144879, -377.180615692], [60.4657443356, 214.747572122, -377.284148167], [60.4706365138, 214.745187999, -377.38487706], [60.4752568431, 214.742005945, -377.482892665], [60.4795989525, 214.738039026, -377.57828511], [60.4836558802, 214.733299942, -377.671144371], [60.4874200895, 214.727801039, -377.761560282], [60.4908834843, 214.721554315, -377.849622549], [60.4940374239, 214.714571426, -377.935420763], [60.496872737, 214.706863699, -378.019044406], [60.4993797353, 214.698442134, -378.100582869], [60.5015482262, 214.689317416, -378.180125459], [60.5033675246, 214.679499923, -378.257761411], [60.5047901174, 214.668870465, -378.333580502], [60.5053305644, 214.65575427, -378.407678728], [60.5048271116, 214.639630875, -378.480144542], [60.5032621442, 214.620495542, -378.551063761], [60.5006171013, 214.59834324, -378.620522228], [60.4968724711, 214.573168665, -378.688605813], [60.4920077838, 214.544966247, -378.755400402], [60.4860016041, 214.513730168, -378.820991894], [60.4788315226, 214.479454373, -378.885466194], [60.4704741464, 214.442132585, -378.948909207], [60.4609050878, 214.40175832, -379.011406827], [60.450098953, 214.358324902, -379.073044933], [60.4380293286, 214.311825477, -379.133909376], [60.424668768, 214.262253032, -379.194085969], [60.4099887757, 214.209600408, -379.253660479], [60.3939540313, 214.153867919, -379.312726881], [60.3765020562, 214.095090114, -379.371416523], [60.3576381644, 214.033210526, -379.429761735], [60.3373295167, 213.968221551, -379.487847922], [60.3155421301, 213.90011553, -379.545760369], [60.292240856, 213.828884771, -379.603584225], [60.2673893561, 213.754521566, -379.661404483], [60.2409500775, 213.677018216, -379.719305964], [60.2128842269, 213.59636705, -379.777373288], [60.1831517427, 213.512560449, -379.835690858], [60.1517112667, 213.425590867, -379.89434283], [60.1185201143, 213.335450859, -379.953413087], [60.0835342435, 213.242133104, -380.012985215], [60.0467082223, 213.145630429, -380.073142465], [60.007995196, 213.045935841, -380.133967728], [59.967346852, 212.943042551, -380.195543497], [59.9247133848, 212.836944002, -380.257951831], [59.8800434587, 212.727633905, -380.321274317], [59.8332841705, 212.615106265, -380.385592028], [59.7843810107, 212.499355413, -380.45098548], [59.7332778234, 212.380376046, -380.517534587], [59.6799167665, 212.258163255, -380.585318607], [59.6242382694, 212.132712566, -380.654416098], [59.5661809914, 212.004019973, -380.724904857], [59.5056817789, 211.872081986, -380.796861864], [59.4426756215, 211.736895662, -380.870363221], [59.3770956087, 211.598458653, -380.945484089], [59.3088728852, 211.45676925, -381.022298618], [59.2379366065, 211.311826427, -381.100879873], [59.1642138941, 211.16362989, -381.181299764], [59.087629791, 211.012180126, -381.263628962], [59.0081072172, 210.857478456, -381.347936817], [58.9255669255, 210.699527086, -381.434291267], [58.8399274578, 210.538329164, -381.522758752], [58.7513021784, 210.373888277, -381.610856197], [58.6598309344, 210.206209044, -381.696051948], [58.5654596223, 210.035309729, -381.778352372], [58.4681115088, 209.861236228, -381.857794535], [58.3677789927, 209.683946437, -381.93431431], [58.264412621, 209.503450391, -382.007905894], [58.1579612949, 209.319759521, -382.078564029], [58.0483722609, 209.132886735, -382.146284027], [57.9355911031, 208.942846489, -382.211061798], [57.8195617391, 208.749654872, -382.272893872], [57.7002264183, 208.553329693, -382.331777431], [57.5775257233, 208.353890563, -382.387710335], [57.4513985747, 208.151358989, -382.440691152], [57.3217822392, 207.945758468, -382.490719191], [57.1886123422, 207.737114583, -382.537794531], [57.0518228836, 207.525455105, -382.581918052], [56.9113462589, 207.310810097, -382.623091474], [56.7671132849, 207.093212021, -382.661317386], [56.6190532304, 206.872695854, -382.696599286], [56.4670938527, 206.649299198, -382.728941614], [56.3111614401, 206.423062403, -382.758349791], [56.1511808605, 206.194028688, -382.78483026], [55.9870756175, 205.962244271, -382.80839052], [55.8193562843, 205.727495495, -382.829104957], [55.6485400443, 205.489552312, -382.847052859], [55.4745582555, 205.24844025, -382.862250543], [55.2973408903, 205.004187027, -382.874715219], [55.116816601, 204.756822654, -382.884465023], [54.9329127931, 204.506379557, -382.891519051], [54.7455557081, 204.252892694, -382.895897397], [54.5546705153, 203.996399676, -382.897621185], [54.3601814144, 203.736940896, -382.896712612], [54.1620117487, 203.474559657, -382.893194982], [53.9600841301, 203.209302311, -382.887092745], [53.7543205769, 202.941218391, -382.878431539], [53.5446426645, 202.670360756, -382.867238226], [53.3309716914, 202.396785733, -382.853540938], [53.1132288591, 202.120553268, -382.837369113], [52.8913350164, 201.841726369, -382.818753958], [52.6652057971, 201.560363536, -382.797733087], [52.4347612681, 201.276533778, -382.774341765], [52.1999240806, 200.990313177, -382.748615053], [51.9606179527, 200.701782217, -382.720589537], [51.7167679637, 200.411025941, -382.690303362], [51.4683008714, 200.11813411, -382.657796282], [51.2151454536, 199.823201366, -382.623109696], [50.957232875, 199.526327384, -382.586286698], [50.6944970809, 199.227617028, -382.547372112], [50.4268712575, 198.927185288, -382.506418238], [50.1542779228, 198.625169923, -382.463499804], [49.876685016, 198.321664437, -382.418633957], [49.5940421208, 198.016795899, -382.371872841], [49.3063040083, 197.710697263, -382.323270528], [49.0134312146, 197.403507475, -382.272883053], [48.7153906518, 197.095371578, -382.220768446], [48.4121562526, 196.786440794, -382.166986762], [48.1037096512, 196.476872591, -382.111600106], [47.7900408983, 196.166830735, -382.054672662], [47.4711492112, 195.856485311, -381.996270712], [47.1470437583, 195.546012729, -381.936462651], [46.8177444775, 195.235595695, -381.875318999], [46.4832829261, 194.925423154, -381.812912412], [46.1437031621, 194.615690197, -381.74931768], [45.7990626526, 194.306597938, -381.684611723], [45.4494332081, 193.998353337, -381.618873582], [45.0949019376, 193.691168994, -381.552184397], [44.7355722204, 193.385262885, -381.484627382], [44.3715646896, 193.080858049, -381.416287788], [44.0030182207, 192.778182228, -381.347252857], [43.6300909176, 192.47746744, -381.277611767], [43.2529610884, 192.178949501, -381.20745556], [42.8718282018, 191.882867481, -381.136877065], [42.4869138123, 191.589463096, -381.065970806], [42.0984624435, 191.298980039, -380.994832889], [41.7067424177, 191.011663241, -380.923560885], [41.3120466155, 190.727758069, -380.852253688], [40.9146931538, 190.447509463, -380.781011365], [40.5150259633, 190.17116101, -380.70993498], [40.1134152518, 189.898953958, -380.639126412], [39.7102578355, 189.631126184, -380.568688144], [39.3010321278, 189.373831094, -380.505844925], [38.8811376041, 189.133359668, -380.457972991], [38.450898106, 188.910167248, -380.425393033], [38.010671465, 188.7047284, -380.408412323], [37.560763874, 188.517641109, -380.407446922], [37.1015433992, 188.349491881, -380.422856877], [36.6335714882, 188.200695337, -380.454755454], [36.1573425175, 188.0718099, -380.503382234], [35.6733848805, 187.963416767, -380.568955494], [35.1822607591, 187.876121225, -380.651670225], [34.6843345911, 187.810847828, -380.752028323], [34.1802197407, 187.768285748, -380.870193685], [33.6707844605, 187.748868834, -381.005981284], [33.1567077861, 187.753344123, -381.159492318], [32.6381700435, 187.783209689, -381.331555154], [32.1164620038, 187.838584133, -381.521412027], [31.5921686428, 187.920612143, -381.729324198], [31.0658866105, 188.03054435, -381.955539137], [30.5388541832, 188.168839458, -382.199383907], [30.0113958915, 188.337388049, -382.461496711], [29.485002898, 188.536519664, -382.740837757], [28.9601295318, 188.768255214, -383.037854353], [28.4359284801, 189.032259443, -383.351389283], [27.9103605019, 189.329001947, -383.681019921], [27.383671069, 189.659665813, -384.026082824], [26.8563358581, 190.025387166, -384.385664842], [26.3287480003, 190.427822875, -384.759060121], [25.8015923212, 190.868523117, -385.145233268], [25.2757625904, 191.349069412, -385.542943037], [24.7522533873, 191.871306858, -385.950906922], [24.2322758915, 192.437141752, -386.36763899], [23.7172686771, 193.048521618, -386.791439864], [23.2089053198, 193.70741303, -387.220390644], [22.7091004003, 194.41577074, -387.652347783], [22.2199962795, 195.175546057, -388.084965755], [21.7439806893, 195.988592778, -388.515669455], [21.2836503365, 196.85670863, -388.941707431], [20.841804808, 197.781575914, -389.360154991], [20.4214203121, 198.764744564, -389.767945308], [20.0256206537, 199.807611142, -390.161901625], [19.6576438662, 200.911401392, -390.538773243], [19.3210076248, 202.075545861, -390.894818334], [19.0189939724, 203.300179443, -391.22673218], [18.7546768758, 204.587129347, -391.531751586], [18.5313043188, 205.936125291, -391.806681168], [18.3504566926, 207.337070165, -392.047541469], [18.1841076425, 208.802891165, -392.265625287], [18.0215608719, 210.33042077, -392.466455856], [17.8630322066, 211.907197895, -392.650807278], [17.7083848353, 213.54249686, -392.821677407], [17.5575956236, 215.23951196, -392.98064814], [17.4106902683, 216.998682701, -393.128677195], [17.2676964492, 218.820744064, -393.266540242], [17.1286987701, 220.7019324, -393.394549352], [16.9937130509, 222.644404134, -393.513368313], [16.8627373509, 224.653541328, -393.623687553], [16.7358284094, 226.730669958, -393.725810325], [16.6130526655, 228.877227456, -393.819975012], [16.4944871874, 231.094748955, -393.906364395], [16.3802205344, 233.384856706, -393.985113145], [16.2703681184, 235.746119442, -394.056221632], [16.1650636614, 238.179147191, -394.11949198], [16.0644355503, 240.689982856, -394.174825838], [15.9686257568, 243.280493526, -394.222216557], [15.8777917447, 245.952606274, -394.261631535], [15.7921073451, 248.708302999, -394.293014379], [15.7117636565, 251.549615037, -394.316286741], [15.6369471013, 254.470404067, -394.331306337], [15.5678877779, 257.480445754, -394.338044175], [15.5048330755, 260.582175228, -394.33636632], [15.4480508433, 263.777748113, -394.326119934], [15.3978308827, 267.069335052, -394.30713678], [15.3544047089, 270.449944497, -394.279305445], [15.3181556467, 273.929873948, -394.24241179], [15.2894487599, 277.512028078, -394.196242718], [15.2686689921, 281.198520526, -394.14057783], [15.2560888167, 284.981700378, -394.075348253], [15.2522316385, 288.871637645, -394.000223028], [15.2577766226, 292.87091159, -393.914947872], [15.2756368239, 296.966585551, -393.819569617], [15.3069509946, 301.156930312, -393.713926636], [15.3522379623, 305.44991127, -393.597619333], [15.4117900502, 309.840633314, -393.470558062], [15.4860562427, 314.330629215, -393.332501513], [15.5756745538, 318.927020261, -393.183025273], [15.6808543508, 323.619355828, -393.022245519], [15.802384477, 328.417519909, -392.849641], [15.9406965758, 333.317268526, -392.665144063], [16.0963219329, 338.317229403, -392.468606574], [16.2699839205, 343.420647304, -392.259706391], [16.4620240148, 348.619344236, -392.038571463], [16.6733490893, 353.919736766, -391.804755272], [16.9041908422, 359.310469254, -391.558555307], [17.1555135409, 364.797665765, -391.299535628], [17.4275229262, 370.369611795, -391.028059415], [17.7211063442, 376.029543997, -390.743827476], [18.0365222102, 381.767422684, -390.447177631], [18.3744499334, 387.581876613, -390.13805268], [18.735265177, 393.465830347, -389.816694628], [19.1193245156, 399.412440805, -389.483362468], [19.5271633311, 405.418202811, -389.138157851], [19.9587296905, 411.470742903, -388.781691792], [20.4146201627, 417.568510792, -388.414003292], [20.8946670538, 423.699116647, -388.035768239], [21.3991305206, 429.857324253, -387.647282144], [21.9279692329, 436.034437638, -387.249067749], [22.4809623761, 442.220503032, -386.841757867], [23.0581727583, 448.410040646, -386.425735125], [23.6590377997, 454.591010139, -386.001824852], [24.2835061725, 460.75840651, -385.570430157], [24.9310073571, 466.90227837, -385.132300786], [25.6011366573, 473.015551093, -384.688023499], [26.2933527032, 479.090641667, -384.238242282], [27.0070206226, 485.119996753, -383.783623165], [27.7415543655, 491.097419304, -383.324758035], [28.4962085595, 497.016068569, -382.862304384], [29.2703009468, 502.870479508, -382.396838265], [30.0630640321, 508.655167584, -381.928952809], [30.8737131201, 514.365200384, -381.459214731], [31.7014849838, 519.996435886, -380.988142995], [32.5455579439, 525.544836383, -380.516259408], [33.4051053853, 531.006859466, -380.044057083], [34.2794347068, 536.38036896, -379.571923654], [35.1675636137, 541.661594957, -379.100386137], [36.0689207399, 546.849961371, -378.629714723], [36.9826238141, 551.943068539, -378.160333027], [37.9077895265, 556.938869231, -377.692641055], [38.8439919874, 561.838372691, -377.226776947], [39.7903420261, 566.639882201, -376.763111322], [40.7460159294, 571.342355874, -376.301961271], [41.7104003052, 575.946124528, -375.84352177], [42.6832380119, 580.453496302, -375.387802544], [43.6634840471, 584.862542936, -374.935197047], [44.6505399202, 589.173907196, -374.485864095], [45.6438344695, 593.388412051, -374.039942098], [46.6429065566, 597.507437923, -373.597511852], [47.6475499568, 601.533534014, -373.158533721], [48.6568736062, 605.465972786, -372.723281823], [49.6703991241, 609.306046537, -372.29183214], [50.6876696233, 613.055124787, -371.864248105], [51.7082482961, 616.714638752, -371.440581958], [52.7317169552, 620.286067412, -371.020876018], [53.7576745475, 623.770925084, -370.605163873], [54.7908266242, 627.190904469, -370.19132928], [55.8361029347, 630.566660953, -369.7772638], [56.8934502266, 633.898172238, -369.363006365], [57.9628145284, 637.185415341, -368.948595304], [59.044140992, 640.428366419, -368.53406841], [60.1373737247, 643.627000601, -368.119463008], [61.2424556088, 646.781291818, -367.70481602], [62.359328108, 649.891212648, -367.29016404], [63.4879310597, 652.956734158, -366.875543398], [64.6282024504, 655.977825754, -366.460990236], [65.7800781745, 658.954455038, -366.046540577], [66.943491774, 661.886587666, -365.632230406], [68.1183741567, 664.774187216, -365.218095745], [69.3046532928, 667.617215061, -364.804172734], [70.5022538866, 670.415630252, -364.390497715], [71.7110970225, 673.169389402, -363.977107319], [72.9310997813, 675.878446594, -363.56403856], [74.1621748278, 678.542753288, -363.151328926], [75.4042299641, 681.162258248, -362.739016478], [76.6571676492, 683.736907492, -362.327139958], [77.9158316393, 686.269732835, -361.916548361], [79.165962445, 688.764971018, -361.509781022], [80.4071640501, 691.223863404, -361.106829632], [81.6393816749, 693.646594422, -360.707679159], [82.862559708, 696.03335353, -360.312314438], [84.0766416458, 698.384335252, -359.920720185], [85.2815700294, 700.699739204, -359.532881022], [86.4772863814, 702.979770125, -359.148781489], [87.6637311407, 705.224637899, -358.768406071], [88.8408435973, 707.434557579, -358.391739215], [90.0085618245, 709.609749404, -358.018765354], [91.1668226117, 711.750438814, -357.649468928], [92.315561395, 713.856856464, -357.283834408], [93.4547121878, 715.929238231, -356.92184632], [94.5842075104, 717.967825227, -356.563489268], [95.704710473, 719.97449825, -356.208513988], [96.8156183026, 721.948291988, -355.857077172], [97.9166969062, 723.889097232, -355.509215784], [99.007873702, 725.797177266, -355.164914612], [100.089074281, 727.67280055, -354.824158651], [101.160222335, 729.516240712, -354.48693313], [102.221239584, 731.327776536, -354.153223538], [103.272045705, 733.107691956, -353.823015654], [104.312558264, 734.85627604, -353.496295573], [105.342692644, 736.573822976, -353.173049736], [106.362361977, 738.260632062, -352.853264959], [107.379005236, 739.918102765, -352.537437472], [108.401315356, 741.550106862, -352.225688103], [109.428252019, 743.1549093, -351.918310682], [110.459553575, 744.732416943, -351.61535512], [111.495144008, 746.282942625, -351.316811552], [112.534938312, 747.806808896, -351.022670217], [113.578842347, 749.304347852, -350.732921485], [114.626752694, 750.775900969, -350.447555868], [115.678556517, 752.221818935, -350.166564036], [116.735430742, 753.644896424, -349.88954869], [117.796616768, 755.044268974, -349.616691196], [118.861372, 756.419173608, -349.348162992], [119.929546362, 757.769995678, -349.083955171], [121.000979707, 759.097128758, -348.824059063], [122.075501716, 760.400974468, -348.568466239], [123.153749013, 761.683385986, -348.316929], [124.236300862, 762.946084121, -348.069216596], [125.321450557, 764.186803705, -347.825764055], [126.408987685, 765.405975566, -347.586563653], [127.49869122, 766.604037557, -347.351607928], [128.590661778, 767.781992269, -347.120793744], [129.686797425, 768.943830469, -346.893498925], [130.784461815, 770.085963626, -346.670406883], [131.883392248, 771.208854034, -346.451510904], [132.983315273, 772.312970015, -346.236804481], [134.085942124, 773.401965773, -346.025713515], [135.190228113, 774.475038834, -345.818449326], [136.294717018, 775.530817844, -345.615334336], [137.399093325, 776.569790851, -345.416362553], [138.505390589, 777.596055866, -345.220863925], [139.612159436, 778.608314405, -345.029150216], [140.71790399, 779.605291674, -344.84153991], [141.82267643, 780.588097058, -344.657912883], [142.929177459, 781.561711478, -344.477409405], [144.033652167, 782.521591809, -344.300969279], [145.135713506, 783.468250648, -344.128586383], [146.238541675, 784.40727749, -343.959265099], [147.33884788, 785.33498546, -343.793801139], [148.435620751, 786.251040058, -343.63235279], [149.532259091, 787.161217525, -343.473862588], [150.625241206, 788.0616781, -343.319176151], [151.713773504, 788.952446064, -343.168382539], [152.80158058, 789.839595618, -343.020334131], [153.883832689, 790.717709627, -342.876219449], [154.962247378, 791.590164573, -342.735434803], [156.037015627, 792.45825993, -342.59779246], [157.10489131, 793.318880631, -342.464033507], [158.170428381, 794.178932985, -342.332782936], [159.228354888, 795.032771415, -342.205322852], [160.283072465, 795.878528461, -342.080909354], [161.334784504, 796.7087547, -341.959980632], [162.383240292, 797.523792995, -341.842530346], [163.429617645, 798.325702155, -341.72816989], [164.471484991, 799.11217015, -341.617478285], [165.51174087, 799.887273208, -341.509608402], [166.546694997, 800.647239468, -341.405474367], [167.580053738, 801.397011637, -341.304016883], [168.607772302, 802.132464437, -341.206242353], [169.633471388, 802.858343378, -341.111118022], [170.653635065, 803.571190516, -341.019507618], [171.670927287, 804.274574802, -340.930635505], [172.683220362, 804.9666436, -340.844996187], [173.69137609, 805.648891439, -340.762293027], [174.695487065, 806.321928919, -340.682433761], [175.693796627, 806.984357116, -340.605813314], [176.689418828, 807.64003035, -340.531544757], [177.678313217, 808.285098016, -340.460623602], [178.664027165, 808.923810118, -340.39205134], [179.644102926, 809.554022333, -340.326406918], [180.618354588, 810.176008864, -340.263672482], [181.589317035, 810.792826031, -340.203119364], [182.553538662, 811.401343371, -340.145584988], [183.513039041, 812.004051528, -340.090476535], [184.467829988, 812.601352862, -340.037726835], [185.415890005, 813.191613912, -339.987798407], [186.359471088, 813.777468719, -339.94004073], [187.297790387, 814.358497557, -339.894594403], [188.229383624, 814.933626928, -339.851776576], [189.155940866, 815.504861772, -339.811085183], [190.077491989, 816.072554694, -339.772450306], [190.992317551, 816.635376217, -339.736255481], [191.90081441, 817.194035298, -339.702335481], [192.805306345, 817.751035166, -339.670027393], [193.703069474, 818.304084579, -339.639974932], [194.594130035, 818.853505012, -339.612109883], [195.479690798, 819.400694496, -339.586060746], [196.360104664, 819.946231572, -339.561676398], [197.233806458, 820.488921781, -339.539300707], [198.10081762, 821.029036294, -339.518868135], [198.961983488, 821.567580547, -339.500101388], [199.818047053, 822.105440845, -339.482750361], [200.667405451, 822.641378362, -339.467169038], [201.51007586, 823.175617795, -339.453294418], [202.346073993, 823.708371875, -339.441064255], [203.176962923, 824.241208683, -339.430019323], [204.001693277, 824.773365392, -339.42037209], [204.819730771, 825.304537751, -339.412202719], [205.631087554, 825.83489621, -339.405451371], [206.435774519, 826.364600366, -339.400058925], [207.234645057, 826.894527418, -339.395750791], [208.027762818, 827.424854239, -339.392455405], [208.814186271, 827.954887654, -339.390358961], [209.593923453, 828.484748396, -339.389404668], [210.366981349, 829.014547233, -339.389536428], [211.13336594, 829.544385137, -339.390698829], [211.893541442, 830.074740611, -339.392719748], [212.648047333, 830.60614113, -339.395408428], [213.395852529, 831.137784688, -339.398975978], [214.136961012, 831.669736633, -339.403369258], [214.871375956, 832.202053178, -339.4085358], [215.599099774, 832.734781518, -339.414423798], [216.320134152, 833.267959954, -339.420982112], [217.034480094, 833.801617995, -339.428160257], [217.743259152, 834.336697026, -339.43562247], [218.44539496, 834.872320111, -339.443594163], [219.140814266, 835.408431726, -339.452045266], [219.829517124, 835.9450287, -339.460927517], [220.511503073, 836.48209946, -339.470193294], [221.186771156, 837.019624094, -339.47979562], [221.855319956, 837.557574414, -339.489688151], [222.517147623, 838.095914015, -339.499825178], [223.172279922, 838.634620822, -339.510154484], [223.821631863, 839.174376772, -339.520398102], [224.464238348, 839.714346853, -339.530757113], [225.100097251, 840.254463398, -339.541187971], [225.199480248, 840.33353993, -339.51591203], [225.297501499, 840.41133953, -339.490987641]];
      return this.cameraTgtData = [[-1183.88317871, -90.3306732178, -231.568664551], [-1183.41503906, -90.2536392212, -231.469619751], [-1182.01330566, -90.0230712891, -231.173202515], [-1180.61560059, -89.7933044434, -230.877853394], [-1179.22180176, -89.5643310547, -230.583557129], [-1177.83154297, -89.3361053467, -230.290237427], [-1176.43432617, -89.1068496704, -229.995620728], [-1175.04089355, -88.8783874512, -229.702056885], [-1173.65136719, -88.6507034302, -229.40953064], [-1172.265625, -88.4237976074, -229.118026733], [-1170.87536621, -88.1962890625, -228.825775146], [-1169.48596191, -87.9690704346, -228.533935547], [-1168.1003418, -87.7426223755, -228.243118286], [-1166.71838379, -87.5169372559, -227.953292847], [-1165.33496094, -87.2911300659, -227.663375854], [-1163.94909668, -87.0651092529, -227.373184204], [-1162.56713867, -86.8398361206, -227.084014893], [-1161.1887207, -86.6153106689, -226.795822144], [-1159.81140137, -86.3911132813, -226.508102417], [-1158.42895508, -86.166229248, -226.219512939], [-1157.0501709, -85.9420852661, -225.931930542], [-1155.67492676, -85.7186737061, -225.645309448], [-1154.30322266, -85.4959869385, -225.359649658], [-1152.92382813, -85.2722015381, -225.072631836], [-1151.54785156, -85.0491333008, -224.786560059], [-1150.17541504, -84.8267745972, -224.501449585], [-1148.80651855, -84.605140686, -224.217285156], [-1147.43212891, -84.3827667236, -223.932235718], [-1146.05871582, -84.1607208252, -223.647628784], [-1144.68884277, -83.9393768311, -223.363967896], [-1143.32226563, -83.7187347412, -223.081237793], [-1141.95227051, -83.4976806641, -222.798034668], [-1140.58117676, -83.2766113281, -222.514846802], [-1139.21350098, -83.0562286377, -222.232589722], [-1137.84899902, -82.8365402222, -221.951248169], [-1136.48278809, -82.6167068481, -221.669784546], [-1135.11364746, -82.3965606689, -221.387954712], [-1133.74780273, -82.1770935059, -221.107025146], [-1132.38525391, -81.9583053589, -220.827026367], [-1131.0222168, -81.7396011353, -220.547180176], [-1129.65466309, -81.5203323364, -220.266647339], [-1128.29040527, -81.3017349243, -219.987030029], [-1126.92919922, -81.0838012695, -219.708312988], [-1125.56872559, -80.8661270142, -219.429962158], [-1124.20263672, -80.6476974487, -219.15071106], [-1122.83947754, -80.4299240112, -218.872329712], [-1121.47961426, -80.2127990723, -218.594833374], [-1120.12109375, -79.996055603, -218.317886353], [-1118.75585938, -79.7784118652, -218.039840698], [-1117.39379883, -79.561416626, -217.762664795], [-1116.03466797, -79.3450622559, -217.486358643], [-1114.67749023, -79.12915802, -217.210693359], [-1113.31298828, -78.9122619629, -216.933822632], [-1111.95153809, -78.6960067749, -216.657806396], [-1110.59301758, -78.4803695679, -216.382644653], [-1109.2364502, -78.2652053833, -216.108139038], [-1107.87243652, -78.0490188599, -215.832382202], [-1106.51135254, -77.8334579468, -215.557479858], [-1105.15307617, -77.6185073853, -215.283432007], [-1103.79650879, -77.4039840698, -215.009979248], [-1102.43273926, -77.1884689331, -214.735305786], [-1101.07165527, -76.9735565186, -214.461486816], [-1099.71337891, -76.7592544556, -214.188491821], [-1098.35620117, -76.5452804565, -213.915985107], [-1096.9921875, -76.3303833008, -213.642364502], [-1095.63085938, -76.1160964966, -213.36958313], [-1094.27233887, -75.9023971558, -213.097625732], [-1092.91394043, -75.688873291, -212.825942993], [-1091.54943848, -75.474571228, -212.553344727], [-1090.18762207, -75.2608566284, -212.281555176], [-1088.82861328, -75.0477371216, -212.010604858], [-1087.46813965, -74.8345565796, -211.739639282], [-1086.10290527, -74.6208114624, -211.468017578], [-1084.74035645, -74.4076461792, -211.197219849], [-1083.38049316, -74.19506073, -210.927215576], [-1082.01733398, -73.982131958, -210.65687561], [-1080.65112305, -73.7689056396, -210.38621521], [-1079.28759766, -73.5562591553, -210.116363525], [-1077.92663574, -73.3441772461, -209.847305298], [-1076.56018066, -73.1314086914, -209.577453613], [-1075.19274902, -72.9186706543, -209.307723999], [-1073.82788086, -72.7065048218, -209.038787842], [-1072.46557617, -72.4948883057, -208.770645142], [-1071.09509277, -72.2821884155, -208.501205444], [-1069.72619629, -72.0699081421, -208.232391357], [-1068.35974121, -71.8581924438, -207.964355469], [-1066.99365234, -71.646697998, -207.69670105], [-1065.62060547, -71.4342880249, -207.427978516], [-1064.25, -71.222442627, -207.16003418], [-1062.88171387, -71.011138916, -206.892883301], [-1061.51037598, -70.7995300293, -206.625427246], [-1060.13537598, -70.5875320435, -206.357574463], [-1058.76281738, -70.376083374, -206.090515137], [-1057.39257813, -70.165184021, -205.824234009], [-1056.01513672, -69.9533538818, -205.556884766], [-1054.63793945, -69.7417449951, -205.289901733], [-1053.26318359, -69.5306777954, -205.023696899], [-1051.88842773, -69.3198013306, -204.757827759], [-1050.50646973, -69.1080093384, -204.490921021], [-1049.12695313, -68.8967590332, -204.22479248], [-1047.74975586, -68.6860427856, -203.959442139], [-1046.36767578, -68.4747772217, -203.693496704], [-1044.9831543, -68.2633361816, -203.427429199], [-1043.60107422, -68.0524215698, -203.162155151], [-1042.22045898, -67.8419342041, -202.897521973], [-1040.83105469, -67.6302871704, -202.631530762], [-1039.44384766, -67.4191665649, -202.366317749], [-1038.05883789, -67.2085723877, -202.101882935], [-1036.66967773, -66.9975280762, -201.836990356], [-1035.27722168, -66.7861862183, -201.571853638], [-1033.88708496, -66.5753707886, -201.307495117], [-1032.49816895, -66.364944458, -201.043746948], [-1031.10046387, -66.1533737183, -200.778686523], [-1029.70495605, -65.9423294067, -200.514404297], [-1028.31164551, -65.731803894, -200.250900269], [-1026.91271973, -65.5206375122, -199.986709595], [-1025.51184082, -65.3093566895, -199.722518921], [-1024.11303711, -65.0985946655, -199.459091187], [-1022.71325684, -64.8878860474, -199.195892334], [-1021.3067627, -64.6763534546, -198.931777954], [-1019.90234375, -64.4653396606, -198.668457031], [-1018.50006104, -64.2548446655, -198.405929565], [-1017.08898926, -64.0432357788, -198.14213562], [-1015.67889404, -63.8319664001, -197.878921509], [-1014.27087402, -63.6212120056, -197.616500854], [-1012.85778809, -63.4099082947, -197.353530884], [-1011.4418335, -63.1983795166, -197.090438843], [-1010.02801514, -62.9873657227, -196.828140259], [-1008.61236572, -62.7762908936, -196.56590271], [-1007.19049072, -62.5644950867, -196.302947998], [-1005.77075195, -62.3532180786, -196.040786743], [-1004.35198975, -62.1422996521, -195.77923584], [-1002.92407227, -61.9302368164, -195.516433716], [-1001.49829102, -61.7186927795, -195.254425049], [-1000.07452393, -61.5076637268, -194.993240356], [-998.641845703, -61.2955245972, -194.73085022], [-997.209899902, -61.0837097168, -194.469024658], [-995.780029297, -60.8724098206, -194.208023071], [-994.343078613, -60.660282135, -193.946182251], [-992.904907227, -60.4481964111, -193.684570313], [-991.468811035, -60.2366294861, -193.423782349], [-990.026977539, -60.0244369507, -193.162414551], [-988.582519531, -59.8120803833, -192.901031494], [-987.140136719, -59.6002464294, -192.640487671], [-985.692932129, -59.3879241943, -192.37953186], [-984.242126465, -59.1753005981, -192.118423462], [-982.793395996, -58.9631996155, -191.858139038], [-981.340270996, -58.7506790161, -191.597564697], [-979.882995605, -58.5377883911, -191.336746216], [-978.427856445, -58.3254203796, -191.076766968], [-976.968200684, -58.1126365662, -190.816513062], [-975.504516602, -57.8994865417, -190.556015015], [-974.04284668, -57.6868591309, -190.296386719], [-972.576171875, -57.4737434387, -190.036392212], [-971.105957031, -57.2603378296, -189.776260376], [-969.637756348, -57.0474586487, -189.51701355], [-968.163513184, -56.833946228, -189.257247925], [-966.686706543, -56.6202888489, -188.997528076], [-965.211914063, -56.4071655273, -188.738708496], [-963.729675293, -56.193195343, -188.479125977], [-962.24621582, -55.9792938232, -188.219863892], [-960.764831543, -55.7659339905, -187.961517334], [-959.273925781, -55.5514411926, -187.702072144], [-957.783813477, -55.337310791, -187.443328857], [-956.294677734, -55.1235542297, -187.185302734], [-954.795776367, -54.9086532593, -186.926177979], [-953.299072266, -54.6942977905, -186.667999268], [-951.800231934, -54.4799003601, -186.410049438], [-950.29473877, -54.2647857666, -186.151519775], [-948.791259766, -54.0502204895, -185.893951416], [-947.282409668, -53.8351249695, -185.636047363], [-945.770141602, -53.619808197, -185.378173828], [-944.260070801, -53.4050483704, -185.121292114], [-942.740539551, -53.189201355, -184.863418579], [-941.221618652, -52.9736976624, -184.606277466], [-939.702026367, -52.7583503723, -184.349655151], [-938.174255371, -52.5421028137, -184.092285156], [-936.648620605, -52.326423645, -183.8359375], [-935.117492676, -52.1102180481, -183.579299927], [-933.583007813, -51.8938102722, -183.322769165], [-932.05078125, -51.6779747009, -183.067276001], [-930.507568359, -51.4608573914, -182.810638428], [-928.966491699, -51.244304657, -182.555023193], [-927.421875, -51.0275192261, -182.299514771], [-925.871948242, -50.810256958, -182.043823242], [-924.324279785, -50.5935745239, -181.789215088], [-922.766723633, -50.3757820129, -181.533691406], [-921.210205078, -50.158405304, -181.279052734], [-919.650390625, -49.9408416748, -181.024612427], [-918.085021973, -49.7227706909, -180.769989014], [-916.521972656, -49.5052986145, -180.516494751], [-914.948425293, -49.2866363525, -180.262039185], [-913.376525879, -49.06848526, -180.008636475], [-911.799926758, -48.8499526978, -179.755218506], [-910.219238281, -48.6311340332, -179.501937866], [-908.639221191, -48.4126815796, -179.249542236], [-907.049743652, -48.1932029724, -178.996429443], [-905.46270752, -47.9743461609, -178.744522095], [-903.867614746, -47.7546577454, -178.492141724], [-902.271850586, -47.53515625, -178.240493774], [-900.672546387, -47.3154525757, -177.989105225], [-899.068054199, -47.0953178406, -177.737747192], [-897.464172363, -46.8755607605, -177.487350464], [-895.850952148, -46.654800415, -177.236343384], [-894.240356445, -46.4346809387, -176.986633301], [-892.620300293, -46.2135658264, -176.736328125], [-891.001037598, -45.9928436279, -176.487045288], [-889.375671387, -45.7715835571, -176.237731934], [-887.747802734, -45.5502662659, -175.988952637], [-886.116882324, -45.3288154602, -175.740631104], [-884.48046875, -45.1069145203, -175.492401123], [-882.843505859, -44.8852348328, -175.245056152], [-881.198547363, -44.6627616882, -174.997467041], [-879.555358887, -44.4408111572, -174.751098633], [-877.901916504, -44.2177772522, -174.504196167], [-876.251403809, -43.9954223633, -174.258712769], [-874.590270996, -43.7719306946, -174.012664795], [-872.931396484, -43.5490341187, -173.767974854], [-871.263244629, -43.3251914978, -173.522964478], [-869.596069336, -43.101764679, -173.279144287], [-867.920715332, -42.877532959, -173.035186768], [-866.245361328, -42.653591156, -172.792297363], [-864.56237793, -42.4289283752, -172.5493927], [-862.87890625, -42.2044868469, -172.307525635], [-861.188049316, -41.9793548584, -172.065704346], [-859.496520996, -41.7544212341, -171.824935913], [-857.797546387, -41.5287857056, -171.584228516], [-856.098083496, -41.3033714294, -171.344619751], [-854.390625, -41.0771942139, -171.105072021], [-852.683288574, -40.85131073, -170.866714478], [-850.967163086, -40.6245536804, -170.628356934], [-849.25201416, -40.3982162476, -170.391342163], [-847.526977539, -40.1708450317, -170.154190063], [-845.803710938, -39.9439964294, -169.918548584], [-844.069885254, -39.7160377502, -169.682723999], [-842.337097168, -39.488494873, -169.44833374], [-840.595825195, -39.2601089478, -169.214080811], [-838.85333252, -39.0318412781, -168.981002808], [-837.104614258, -38.8030357361, -168.748428345], [-835.352172852, -38.5740089417, -168.516708374], [-833.596252441, -38.3447914124, -168.285888672], [-831.833618164, -38.1149673462, -168.055603027], [-830.070617676, -37.885345459, -167.826644897], [-828.297607422, -37.6546897888, -167.597839355], [-826.524841309, -37.4243164063, -167.370513916], [-824.74407959, -37.1931533813, -167.143615723], [-822.960510254, -36.9618759155, -166.91784668], [-821.172973633, -36.7303237915, -166.693084717], [-819.378479004, -36.4981040955, -166.468963623], [-817.583374023, -36.2660484314, -166.246322632], [-815.778686523, -36.0329742432, -166.024047852], [-813.972290039, -35.7999038696, -165.803146362], [-812.161193848, -35.566444397, -165.583282471], [-810.343261719, -35.3323249817, -165.364227295], [-808.524169922, -35.0982513428, -165.14666748], [-806.696533203, -34.8632698059, -164.929748535], [-804.865600586, -34.6280708313, -164.714141846], [-803.031982422, -34.3927001953, -164.499938965], [-801.189208984, -34.1563339233, -164.286392212], [-799.344543457, -33.9198951721, -164.074401855], [-797.494995117, -33.6829872131, -163.863632202], [-795.638183594, -33.4453010559, -163.653839111], [-793.77911377, -33.2074661255, -163.445617676], [-791.914123535, -32.96900177, -163.238571167], [-790.042663574, -32.7298316956, -163.032714844], [-788.168640137, -32.490436554, -162.828460693], [-786.288574219, -32.250377655, -162.625473022], [-784.401977539, -32.0095596313, -162.423736572], [-782.512390137, -31.7684345245, -162.223648071], [-780.617797852, -31.5267333984, -162.025039673], [-778.715515137, -31.2840900421, -161.827636719], [-776.809936523, -31.0410556793, -161.631942749], [-774.900817871, -30.7975940704, -161.437973022], [-772.982849121, -30.5529918671, -161.245193481], [-771.060913086, -30.3078632355, -161.054138184], [-769.135131836, -30.0622158051, -160.864868164], [-767.203796387, -29.8157997131, -160.677215576], [-765.265075684, -29.5683708191, -160.491043091], [-763.322387695, -29.3203372955, -160.306732178], [-761.375549316, -29.0716571808, -160.124267578], [-759.422485352, -28.8220481873, -159.943496704], [-757.462585449, -28.5714054108, -159.764404297], [-755.498291016, -28.3200206757, -159.587234497], [-753.529541016, -28.0678501129, -159.412017822], [-751.555786133, -27.8148040771, -159.238723755], [-749.573974609, -27.5604667664, -159.067138672], [-747.587463379, -27.3052387238, -158.897567749], [-745.596191406, -27.049079895, -158.730056763], [-743.600036621, -26.7919387817, -158.564590454], [-741.598449707, -26.5337181091, -158.401168823], [-739.589233398, -26.2741088867, -158.239654541], [-737.575073242, -26.0134029388, -158.080291748], [-735.555725098, -25.7515525818, -157.923080444], [-733.53125, -25.4885082245, -157.768035889], [-731.501403809, -25.2242202759, -157.615203857], [-729.466003418, -24.9586048126, -157.464569092], [-727.423339844, -24.69140625, -157.316055298], [-725.375366211, -24.422826767, -157.169799805], [-723.321899414, -24.1528129578, -157.025848389], [-721.263000488, -23.8813076019, -156.88420105], [-719.198547363, -23.6082553864, -156.744873047], [-717.128479004, -23.3335971832, -156.607894897], [-715.052734375, -23.0572738647, -156.47328186], [-712.971313477, -22.7792243958, -156.341033936], [-710.883666992, -22.4993305206, -156.211151123], [-708.789794922, -22.2175197601, -156.083648682], [-706.690185547, -21.9338092804, -155.958557129], [-704.584838867, -21.6481361389, -155.835906982], [-702.473754883, -21.3604297638, -155.715682983], [-700.356872559, -21.0706233978, -155.597915649], [-698.234191895, -20.7786445618, -155.48260498], [-696.105651855, -20.4844226837, -155.369735718], [-693.971252441, -20.1878852844, -155.25932312], [-691.830932617, -19.8889560699, -155.151367188], [-689.684814453, -19.5875587463, -155.045852661], [-687.532714844, -19.2836170197, -154.942779541], [-685.374755859, -18.9770507813, -154.842147827], [-683.21081543, -18.6677799225, -154.743927002], [-681.041015625, -18.35572052, -154.648117065], [-678.865234375, -18.0407905579, -154.554702759], [-676.683532715, -17.7229061127, -154.463653564], [-674.495910645, -17.4019813538, -154.374938965], [-672.302368164, -17.0779247284, -154.288543701], [-670.102905273, -16.7506523132, -154.204437256], [-667.897460938, -16.4200706482, -154.122589111], [-665.686096191, -16.0860900879, -154.042953491], [-663.46875, -15.7486200333, -153.965484619], [-661.245483398, -15.4075641632, -153.890151978], [-659.016235352, -15.0628204346, -153.816894531], [-656.780700684, -14.714261055, -153.745651245], [-654.538818359, -14.3639574051, -153.676376343], [-652.290466309, -14.0133771896, -153.609085083], [-650.035583496, -13.6625127792, -153.543777466], [-647.774108887, -13.3113546371, -153.480453491], [-645.506103516, -12.9598922729, -153.419128418], [-643.231567383, -12.6081161499, -153.359832764], [-640.950378418, -12.2560148239, -153.302536011], [-638.662658691, -11.9035768509, -153.247283936], [-636.367675781, -11.5506916046, -153.194061279], [-634.066040039, -11.1974382401, -153.142883301], [-631.757751465, -10.8438091278, -153.09375], [-629.442810059, -10.4897909164, -153.046691895], [-627.12121582, -10.1353693008, -153.001693726], [-624.79296875, -9.78053092957, -152.958786011], [-622.457580566, -9.42517948151, -152.917938232], [-620.115112305, -9.06933116913, -152.879165649], [-617.765991211, -8.71301555634, -152.842483521], [-615.41015625, -8.35621547699, -152.807907104], [-613.047607422, -7.99891281128, -152.775405884], [-610.677856445, -7.6410150528, -152.745010376], [-608.30090332, -7.28250837326, -152.716705322], [-605.917236328, -6.92343902588, -152.690505981], [-603.526855469, -6.56378746033, -152.666397095], [-601.129516602, -6.20350885391, -152.644378662], [-598.72454834, -5.8424706459, -152.624465942], [-596.312805176, -5.48078012466, -152.606628418], [-593.894348145, -5.11841344833, -152.590896606], [-591.46875, -4.75530433655, -152.57723999], [-589.035644531, -4.39134502411, -152.565658569], [-586.59564209, -4.02662944794, -152.556152344], [-584.148925781, -3.66112995148, -152.548706055], [-581.694580078, -3.29469490051, -152.543319702], [-579.233032227, -2.92736816406, -152.539978027], [-576.764709473, -2.55916571617, -152.53868103], [-574.2890625, -2.1899740696, -152.539398193], [-571.805908203, -1.81974720955, -152.542114258], [-569.315917969, -1.44854414463, -152.546844482], [-566.818603516, -1.07625067234, -152.553543091], [-564.313720703, -0.702806949615, -152.562225342], [-561.802001953, -0.328276157379, -152.5728302], [-559.282714844, 0.0474897809327, -152.585372925], [-556.75604248, 0.42449721694, -152.599822998], [-554.22253418, 0.802713632584, -152.616149902], [-551.680969238, 1.18235015869, -152.634338379], [-549.132507324, 1.5633007288, -152.654373169], [-546.576660156, 1.94565927982, -152.676193237], [-544.013122559, 2.32952880859, -152.699813843], [-541.442687988, 2.71483612061, -152.72517395], [-538.864196777, 3.10180282593, -152.752258301], [-536.278747559, 3.49032497406, -152.781021118], [-533.68560791, 3.88054728508, -152.811431885], [-531.085021973, 4.27249574661, -152.843460083], [-528.477111816, 4.66620731354, -152.877059937], [-525.861450195, 5.06180381775, -152.912200928], [-523.238647461, 5.45924758911, -152.948822021], [-520.607849121, 5.85872650146, -152.986907959], [-517.969970703, 6.26015663147, -153.026382446], [-515.324035645, 6.66376256943, -153.067230225], [-512.671020508, 7.06944274902, -153.109359741], [-510.009918213, 7.47743368149, -153.152755737], [-507.341705322, 7.88763856888, -153.197341919], [-504.665405273, 8.30028438568, -153.243087769], [-501.981903076, 8.71529865265, -153.289901733], [-499.290374756, 9.13288116455, -153.337753296], [-496.591491699, 9.55300331116, -153.386566162], [-493.884735107, 9.97581672668, -153.436279297], [-491.170410156, 10.4013538361, -153.486816406], [-488.448425293, 10.829706192, -153.538116455], [-485.718597412, 11.2609777451, -153.590103149], [-482.981323242, 11.6951875687, -153.642715454], [-480.235931396, 12.132525444, -153.695877075], [-477.483093262, 12.5729675293, -153.74949646], [-474.722381592, 13.0166721344, -153.803497314], [-471.953887939, 13.4637012482, -153.857803345], [-469.177825928, 13.9141168594, -153.912338257], [-466.393676758, 14.3680906296, -153.966995239], [-463.601928711, 14.8256311417, -154.021697998], [-460.802398682, 15.2868690491, -154.076339722], [-457.994903564, 15.7519159317, -154.130844116], [-455.179779053, 16.220823288, -154.185119629], [-452.356719971, 16.693731308, -154.239044189], [-449.525817871, 17.1707286835, -154.292526245], [-446.687194824, 17.6518878937, -154.345474243], [-443.840637207, 18.1373519897, -154.397781372], [-440.986206055, 18.6272068024, -154.449325562], [-438.12399292, 19.1215381622, -154.500015259], [-435.25390625, 19.6204719543, -154.549713135], [-432.37588501, 20.1241207123, -154.598342896], [-429.490081787, 20.6325683594, -154.645751953], [-426.596435547, 21.1459255219, -154.691848755], [-423.694793701, 21.6643295288, -154.736495972], [-420.785339355, 22.1878585815, -154.779586792], [-417.757446289, 22.7367515564, -154.822509766], [-414.509155273, 23.3302841187, -154.866256714], [-411.052703857, 23.9673137665, -154.91003418], [-407.399169922, 24.6469116211, -154.952972412], [-403.558776855, 25.3683547974, -154.994186401], [-399.540893555, 26.1310977936, -155.03276062], [-395.354248047, 26.9347515106, -155.067672729], [-391.006774902, 27.7790775299, -155.097915649], [-386.506011963, 28.6639518738, -155.122390747], [-381.858886719, 29.589548111, -155.139953613], [-377.071807861, 30.5555744171, -155.149642944], [-372.150604248, 31.5610466003, -155.150436401], [-367.10067749, 32.6048774719, -155.141357422], [-361.927032471, 33.6858634949, -155.121444702], [-356.634368896, 34.8027000427, -155.08972168], [-351.226959229, 35.9539642334, -155.045227051], [-345.708740234, 37.1381340027, -154.987014771], [-340.08392334, 38.3534545898, -154.914154053], [-334.35559082, 39.5982704163, -154.825775146], [-328.526733398, 40.8707923889, -154.720977783], [-322.601409912, 42.1688537598, -154.598953247], [-316.581268311, 43.4907073975, -154.458908081], [-310.469940186, 44.8340682983, -154.300094604], [-304.269012451, 46.1969871521, -154.121795654], [-297.981842041, 47.5770874023, -153.923400879], [-291.609313965, 48.9724464417, -153.70425415], [-285.155212402, 50.38048172, -153.463882446], [-278.619781494, 51.7993583679, -153.20173645], [-272.006103516, 53.2266044617, -152.917434692], [-265.315368652, 54.66015625, -152.610580444], [-258.548828125, 56.0979728699, -152.280822754], [-251.709609985, 57.5376205444, -151.928009033], [-244.797363281, 58.9774513245, -151.551803589], [-237.814941406, 60.4151916504, -151.152160645], [-230.763259888, 61.8490371704, -150.728942871], [-223.643005371, 63.2772750854, -150.282058716], [-216.457382202, 64.6977844238, -149.811630249], [-209.205169678, 66.1093673706, -149.3175354], [-201.890319824, 67.5099258423, -148.800033569], [-194.511520386, 68.8984451294, -148.259063721], [-187.072067261, 70.273109436, -147.694961548], [-179.571212769, 71.6329574585, -147.107757568], [-172.012084961, 72.9763946533, -146.497817993], [-164.393356323, 74.3027267456, -145.865203857], [-156.719284058, 75.6103286743, -145.210449219], [-148.987625122, 76.8988113403, -144.533554077], [-141.201919556, 78.1668701172, -143.83505249], [-133.3621521, 79.4138717651, -143.11517334], [-125.468254089, 80.6392440796, -142.374145508], [-117.523727417, 81.8419342041, -141.612564087], [-109.528007507, 83.0216064453, -140.830627441], [-101.481445313, 84.1778182983, -140.028640747], [-93.3851318359, 85.3100662231, -139.207000732], [-85.2332763672, 86.4156570435, -138.448898315], [-77.0079956055, 87.4876022339, -138.011199951], [-68.7222137451, 88.5251235962, -137.908050537], [-60.390247345, 89.5281143188, -138.133865356], [-52.0256462097, 90.496673584, -138.682403564], [-43.6414604187, 91.4309997559, -139.546875], [-35.2487182617, 92.3316040039, -140.720336914], [-26.8582553864, 93.1990127563, -142.195785522], [-18.4801826477, 94.0338439941, -143.966217041], [-10.124540329, 94.8367233276, -146.024658203], [-1.79972410202, 95.6084365845, -148.364654541], [6.48595476151, 96.3497543335, -150.980026245], [14.7244024277, 97.0614471436, -153.864944458], [22.9075317383, 97.7442703247, -157.013900757], [31.0279521942, 98.399017334, -160.421981812], [39.078250885, 99.0264587402, -164.084777832], [47.0508346558, 99.6273345947, -167.99822998], [54.9380226135, 100.20236969, -172.158813477], [62.7320709229, 100.75226593, -176.563476563], [70.4247512817, 101.277694702, -181.209564209], [78.0076904297, 101.779296875, -186.095046997], [85.4718399048, 102.25769043, -191.218170166], [92.8071975708, 102.713439941, -196.577377319], [100.004020691, 103.147125244, -202.172180176], [107.050384521, 103.559242249, -208.001434326], [113.934173584, 103.950286865, -214.064926147], [120.641975403, 104.320732117, -220.362518311], [127.15851593, 104.670982361, -226.893661499], [133.467605591, 105.001472473, -233.65838623], [139.55078125, 105.312568665, -240.655944824], [145.387130737, 105.604606628, -247.884399414], [150.955291748, 105.877967834, -255.343154907], [156.228805542, 106.132919312, -263.026733398], [161.179855347, 106.369743347, -270.928955078], [165.777984619, 106.588752747, -279.040466309], [169.989181519, 106.790176392, -287.34552002], [173.775894165, 106.974212646, -295.817993164], [177.097702026, 107.140960693, -304.414703369], [179.956924438, 107.292800903, -313.212982178], [182.339309692, 107.431900024, -322.318878174], [184.175720215, 107.557991028, -331.702728271], [185.397354126, 107.671066284, -341.326171875], [185.938644409, 107.771362305, -351.141265869], [185.717529297, 107.911094666, -361.087493896], [184.677978516, 108.1876297, -371.092315674], [182.851135254, 108.595077515, -381.084503174], [180.277557373, 109.123703003, -391.006072998], [177.001647949, 109.763237, -400.80770874], [173.068939209, 110.503372192, -410.447113037], [168.522003174, 111.334472656, -419.892425537], [163.401138306, 112.247337341, -429.114868164], [157.743774414, 113.233337402, -438.088562012], [151.582015991, 114.284744263, -446.792541504], [144.94519043, 115.394256592, -455.205474854], [137.859451294, 116.555038452, -463.306091309], [130.347595215, 117.76071167, -471.072875977], [122.429763794, 119.0051651, -478.483001709], [114.124397278, 120.282394409, -485.511016846], [105.448013306, 121.586471558, -492.129058838], [96.4167327881, 122.911254883, -498.305297852], [87.0467224121, 124.250305176, -504.003662109], [77.3535308838, 125.596916199, -509.184051514], [67.3573760986, 126.943336487, -513.799377441], [57.0790901184, 128.281311035, -517.798217773], [46.5477485657, 129.601104736, -521.121948242], [35.7965621948, 130.892059326, -523.707702637], [24.8723335266, 132.141586304, -525.487731934], [13.8318681717, 133.335845947, -526.393920898], [2.74674201012, 134.459671021, -526.36151123], [-8.29572296143, 135.496948242, -525.335998535], [-19.1964817047, 136.431869507, -523.280578613], [-29.8476467133, 137.249908447, -520.184020996], [-40.1423683167, 137.93951416, -516.065551758], [-49.9852485657, 138.493225098, -510.975097656], [-59.2952537537, 138.908050537, -504.991943359], [-68.019821167, 139.185852051, -498.212036133], [-76.1301956177, 139.332199097, -490.740814209], [-83.743850708, 139.412384033, -482.790710449], [-91.0249023438, 139.522979736, -474.587280273], [-97.9480667114, 139.671234131, -466.127929688], [-104.479034424, 139.864196777, -457.411437988], [-110.577644348, 140.110031128, -448.439971924], [-116.197921753, 140.418121338, -439.219512939], [-121.288833618, 140.799362183, -429.758392334], [-125.793312073, 141.266433716, -420.068084717], [-129.645675659, 141.833892822, -410.168395996], [-132.771606445, 142.518173218, -400.090240479], [-135.089172363, 143.337539673, -389.878601074], [-136.511672974, 144.312301636, -379.589416504], [-136.948913574, 145.462631226, -369.309173584], [-136.317901611, 146.80758667, -359.14730835], [-134.554519653, 148.361938477, -349.241516113], [-131.629745483, 150.132675171, -339.751647949], [-127.565734863, 152.11541748, -330.846954346], [-122.443649292, 154.293014526, -322.682556152], [-116.397857666, 156.637298584, -315.37600708], [-109.597541809, 159.113082886, -308.992584229], [-102.221061707, 161.683944702, -303.542510986], [-94.4408721924, 164.314590454, -298.994567871], [-86.4014663696, 166.976486206, -295.284210205], [-78.2233047485, 169.645828247, -292.333465576], [-70.0087127686, 172.301513672, -290.061187744], [-61.8277359009, 174.930206299, -288.384185791], [-53.7420158386, 177.518951416, -287.226806641], [-45.7969551086, 180.05821228, -286.518859863], [-38.0368270874, 182.537384033, -286.197357178], [-30.4873790741, 184.950714111, -286.204589844], [-23.1721172333, 187.291183472, -286.484893799], [-16.1325569153, 189.542434692, -286.996520996], [-9.38508415222, 191.701904297, -287.751342773], [-2.97038316727, 193.760620117, -288.763793945], [3.06064343452, 195.707199097, -290.044281006], [8.67102050781, 197.535552979, -291.60244751], [13.7887239456, 199.228790283, -293.430389404], [18.3490600586, 200.772003174, -295.503112793], [22.2916240692, 202.149795532, -297.76751709], [25.5557785034, 203.341567993, -300.121398926], [28.1162166595, 204.330291748, -302.417449951], [30.1693935394, 205.179992676, -304.690338135], [31.9038639069, 205.964401245, -307.077972412], [33.317276001, 206.683288574, -309.546783447], [34.4193763733, 207.338470459, -312.05871582], [35.2316856384, 207.933929443, -314.575897217], [35.7845230103, 208.47543335, -317.065429688], [36.1127128601, 208.969863892, -319.501953125], [36.2514152527, 209.424072266, -321.866821289], [36.2336006165, 209.844909668, -324.149932861], [36.0884666443, 210.238098145, -326.344024658], [35.8409347534, 210.608917236, -328.448181152], [35.5119247437, 210.961578369, -330.462493896], [35.1187591553, 211.299575806, -332.388793945], [34.6756477356, 211.625732422, -334.230102539], [34.1941490173, 211.942352295, -335.990112305], [33.6836624146, 212.251342773, -337.672821045], [33.1521568298, 212.553970337, -339.28125], [32.6058502197, 212.851470947, -340.819580078], [32.0497245789, 213.144851685, -342.291870117], [31.4883670807, 213.434585571, -343.700653076], [30.9249305725, 213.721389771, -345.050018311], [30.3622760773, 214.005645752, -346.342926025], [29.8029918671, 214.287521362, -347.581695557], [29.2486629486, 214.567382813, -348.769714355], [28.7008705139, 214.845352173, -349.909393311], [28.1608924866, 215.121505737, -351.003082275], [27.6297607422, 215.395874023, -352.052947998], [27.1082553864, 215.66847229, -353.061126709], [26.5969524384, 215.939315796, -354.029663086], [26.0963306427, 216.208358765, -354.960449219], [25.606754303, 216.47555542, -355.855163574], [25.1284790039, 216.740829468, -356.715454102], [24.6616668701, 217.004135132, -357.542907715], [24.2064056396, 217.265365601, -358.339019775], [23.7627372742, 217.52444458, -359.105133057], [23.330663681, 217.781295776, -359.842529297], [22.910150528, 218.035797119, -360.552398682], [22.5011405945, 218.287841797, -361.235870361], [22.1033115387, 218.537460327, -361.894378662], [21.7167053223, 218.784469604, -362.528656006], [21.3412094116, 219.0287323, -363.13961792], [20.9765014648, 219.270263672, -363.728424072], [20.6223659515, 219.509002686, -364.296051025], [20.278837204, 219.7447052, -364.842926025], [19.9453964233, 219.977539063, -365.370330811], [19.6219959259, 220.207275391, -365.878845215], [19.3085327148, 220.433807373, -366.368927002], [19.0043773651, 220.657333374, -366.84197998], [18.7098903656, 220.87739563, -367.297698975], [18.4241333008, 221.094451904, -367.737854004], [18.1476097107, 221.307922363, -368.16192627], [17.8794116974, 221.518280029, -368.571533203], [17.6199913025, 221.724960327, -368.966186523], [17.368396759, 221.928497314, -369.347564697], [17.1251926422, 222.128250122, -369.714935303], [16.8893184662, 222.324874878, -370.070098877], [16.6613197327, 222.517730713, -370.412353516], [16.4404792786, 222.707214355, -370.742919922], [16.2268009186, 222.8931427, -371.061920166], [16.0202541351, 223.0753479, -371.369476318], [15.8200531006, 223.254348755, -371.666870117], [15.6266775131, 223.429550171, -371.953491211], [15.4395685196, 223.601272583, -372.230224609], [15.2584686279, 223.769607544, -372.497558594], [15.0835866928, 223.934173584, -372.755249023], [14.914358139, 224.095367432, -373.004150391], [14.7506465912, 224.253158569, -373.244537354], [14.5925960541, 224.407272339, -373.476257324], [14.4398231506, 224.557937622, -373.699951172], [14.2919311523, 224.705413818, -373.916168213], [14.1491889954, 224.849304199, -374.124603271], [14.0114269257, 224.989639282, -374.325531006], [13.8780708313, 225.12689209, -374.519805908], [13.7492513657, 225.260803223, -374.707275391], [13.624961853, 225.391296387, -374.887969971], [13.5050554276, 225.518386841, -375.062133789], [13.3890399933, 225.642501831, -375.230499268], [13.2770090103, 225.763442993, -375.392974854], [13.168964386, 225.881118774, -375.549530029], [13.0647773743, 225.995574951, -375.700408936], [12.9642810822, 226.106903076, -375.845825195], [12.8670368195, 226.215515137, -375.986450195], [12.7733039856, 226.321029663, -376.121948242], [12.6829710007, 226.42350769, -376.252441406], [12.5959272385, 226.522994995, -376.378112793], [12.5120687485, 226.619537354, -376.499145508], [12.4310789108, 226.713439941, -376.615966797], [12.352971077, 226.804626465, -376.728607178], [12.277765274, 226.893005371, -376.837036133], [12.2053718567, 226.978637695, -376.941345215], [12.1357011795, 227.061569214, -377.041717529], [12.0686664581, 227.141830444, -377.138244629], [12.0041875839, 227.219497681, -377.231079102], [11.941950798, 227.294891357, -377.320678711], [11.882106781, 227.367782593, -377.406799316], [11.824596405, 227.438217163, -377.489532471], [11.7693462372, 227.506210327, -377.569000244], [11.7162885666, 227.571853638, -377.645324707], [11.665353775, 227.635162354, -377.718566895], [11.61647892, 227.696182251, -377.788818359], [11.569601059, 227.754989624, -377.856201172], [11.5246553421, 227.811599731, -377.920806885], [11.481423378, 227.866287231, -377.982940674], [11.4400196075, 227.918869019, -378.042449951], [11.400387764, 227.969390869, -378.099395752], [11.3624763489, 228.01789856, -378.153869629], [11.3262319565, 228.064437866, -378.205932617], [11.2916049957, 228.109054565, -378.25567627], [11.2585487366, 228.151779175, -378.303161621], [11.227016449, 228.192672729, -378.348449707], [11.1969614029, 228.231750488, -378.391601563], [11.1683416367, 228.269088745, -378.43270874], [11.1411132813, 228.3046875, -378.471832275], [11.115237236, 228.338623047, -378.508972168], [11.0906734467, 228.370910645, -378.544250488], [11.0673828125, 228.401596069, -378.577697754], [11.0452785492, 228.430786133, -378.609436035], [11.024348259, 228.458480835, -378.63949585], [11.0045881271, 228.484680176, -378.667877197], [10.9859638214, 228.509414673, -378.694610596], [10.9684419632, 228.532745361, -378.71975708], [10.9519910812, 228.554672241, -378.743377686], [10.936580658, 228.575241089, -378.76550293], [10.9221801758, 228.594497681, -378.786193848], [10.9087600708, 228.612472534, -378.805450439], [10.8962917328, 228.629196167, -378.823364258], [10.8847484589, 228.644683838, -378.839935303], [10.8741035461, 228.658996582, -378.855194092], [10.8643312454, 228.672134399, -378.869232178], [10.8554048538, 228.684158325, -378.882049561], [10.8473014832, 228.695083618, -378.893676758], [10.8399972916, 228.704940796, -378.904174805], [10.8334674835, 228.713745117, -378.913543701], [10.8276910782, 228.721542358, -378.921844482], [10.8226461411, 228.728363037, -378.929077148], [10.8183097839, 228.734222412, -378.935302734], [10.8146629333, 228.73916626, -378.940551758], [10.8116846085, 228.74319458, -378.944824219], [10.8093557358, 228.746337891, -378.948150635], [10.8076562881, 228.748641968, -378.950592041], [10.8065681458, 228.75012207, -378.952148438], [10.8060731888, 228.750778198, -378.952880859], [10.8061532974, 228.750671387, -378.952758789], [10.8067913055, 228.749816895, -378.951843262], [10.8079710007, 228.748214722, -378.950134277], [10.809674263, 228.745910645, -378.947692871], [10.8118877411, 228.742919922, -378.944519043], [10.8145933151, 228.739257813, -378.940643311], [10.81777668, 228.734954834, -378.936065674], [10.8214235306, 228.730010986, -378.930847168], [10.8255186081, 228.724487305, -378.924957275], [10.8300476074, 228.71836853, -378.918457031], [10.8349971771, 228.711685181, -378.911346436], [10.8403539658, 228.704452515, -378.903656006], [10.8461036682, 228.69670105, -378.89541626], [10.8522348404, 228.688430786, -378.88659668], [10.8587331772, 228.679672241, -378.877258301], [10.8655872345, 228.670455933, -378.867431641], [10.8727846146, 228.660766602, -378.857086182], [10.8803138733, 228.650650024, -378.846282959], [10.8881635666, 228.640106201, -378.835021973], [10.8963222504, 228.629150391, -378.823303223], [10.9047784805, 228.61781311, -378.811157227], [10.913520813, 228.60609436, -378.798614502], [10.9225406647, 228.594024658, -378.785675049], [10.9318256378, 228.581604004, -378.772338867], [10.9413671494, 228.568847656, -378.758636475], [10.9511537552, 228.555786133, -378.744598389], [10.9611768723, 228.542419434, -378.730194092], [10.9714269638, 228.528762817, -378.715484619], [10.9818935394, 228.514831543, -378.700439453], [10.9925680161, 228.500640869, -378.685119629], [11.0034418106, 228.486206055, -378.669525146], [11.0145053864, 228.4715271, -378.653625488], [11.0257501602, 228.456619263, -378.637481689], [11.0371685028, 228.441513062, -378.62109375], [11.0487518311, 228.426193237, -378.60446167], [11.0604858398, 228.410690308, -378.587615967], [11.0723304749, 228.395065308, -378.570587158], [11.0843153, 228.379272461, -378.553375244], [11.0964336395, 228.363327026, -378.535980225], [11.1086759567, 228.347244263, -378.5184021], [11.1210355759, 228.331008911, -378.500640869], [11.1335067749, 228.314651489, -378.482757568], [11.1460809708, 228.298187256, -378.464691162], [11.1587505341, 228.281616211, -378.446502686], [11.1715106964, 228.264938354, -378.428161621], [11.1843528748, 228.248184204, -378.409729004], [11.197271347, 228.23135376, -378.391174316], [11.2102594376, 228.214447021, -378.372528076], [11.2233104706, 228.197479248, -378.353759766], [11.2364187241, 228.180465698, -378.33493042], [11.2495775223, 228.163406372, -378.316040039], [11.2627811432, 228.14630127, -378.297088623], [11.2760238647, 228.129180908, -378.278045654], [11.2892999649, 228.112030029, -378.258972168], [11.3026027679, 228.094863892, -378.239868164], [11.3159275055, 228.077697754, -378.220733643], [11.3292684555, 228.060531616, -378.201568604], [11.3426198959, 228.043380737, -378.182373047], [11.3559770584, 228.026229858, -378.163208008], [11.3693342209, 228.009109497, -378.144012451], [11.3826856613, 227.992019653, -378.124816895], [11.396027565, 227.974960327, -378.105651855], [11.4093542099, 227.957946777, -378.086517334], [11.4226608276, 227.940963745, -378.067382813], [11.4359426498, 227.924057007, -378.048309326], [11.4491949081, 227.907196045, -378.029266357], [11.4624137878, 227.890396118, -378.010253906], [11.4755926132, 227.873672485, -377.991333008], [11.4887285233, 227.857025146, -377.972442627], [11.5018177032, 227.840454102, -377.953643799], [11.5148534775, 227.823974609, -377.934906006], [11.5278244019, 227.807601929, -377.916259766], [11.5406942368, 227.791366577, -377.897766113], [11.5535001755, 227.775238037, -377.879364014], [11.5662374496, 227.759216309, -377.861053467], [11.5789012909, 227.743301392, -377.842834473], [11.5914897919, 227.727493286, -377.824737549], [11.6039981842, 227.71182251, -377.806762695], [11.6164226532, 227.696258545, -377.788909912], [11.6287584305, 227.680831909, -377.771179199], [11.6410036087, 227.665527344, -377.753570557], [11.6531534195, 227.650360107, -377.736083984], [11.6652050018, 227.635345459, -377.718780518], [11.677154541, 227.62046814, -377.701599121], [11.688999176, 227.605728149, -377.684539795], [11.7007350922, 227.591156006, -377.667663574], [11.7123584747, 227.576721191, -377.650970459], [11.7238664627, 227.562454224, -377.634399414], [11.7352561951, 227.548355103, -377.618041992], [11.7465238571, 227.534408569, -377.601837158], [11.7576675415, 227.520629883, -377.58581543], [11.7686824799, 227.507034302, -377.569946289], [11.7795677185, 227.493606567, -377.554290771], [11.7903184891, 227.480361938, -377.538848877], [11.8009328842, 227.467300415, -377.52355957], [11.8114089966, 227.454406738, -377.508514404], [11.8217420578, 227.441711426, -377.493621826], [11.8319301605, 227.429214478, -377.478973389], [11.8419704437, 227.416900635, -377.464538574], [11.8518610001, 227.404785156, -377.450317383], [11.8615989685, 227.392852783, -377.436279297], [11.871181488, 227.381134033, -377.422515869], [11.8806056976, 227.369613647, -377.408935547], [11.8898696899, 227.358306885, -377.395599365], [11.8989715576, 227.347198486, -377.382507324], [11.907907486, 227.33631897, -377.369659424], [11.9166765213, 227.325637817, -377.357025146], [11.9252758026, 227.315170288, -377.344665527], [11.9337034225, 227.304916382, -377.332550049], [11.9419565201, 227.294891357, -377.320648193], [11.9500331879, 227.285079956, -377.309020996], [11.9579315186, 227.275497437, -377.297668457], [11.9656486511, 227.266143799, -377.286560059], [11.9731845856, 227.257003784, -377.275726318], [11.9805345535, 227.24810791, -377.265136719], [11.987698555, 227.239440918, -377.254821777], [11.9946737289, 227.231002808, -377.244781494], [12.0014543533, 227.222808838, -377.235015869], [12.0080213547, 227.214874268, -377.22555542], [12.0143938065, 227.207183838, -377.216400146], [12.0205717087, 227.19972229, -377.207489014], [12.0265522003, 227.192520142, -377.198883057], [12.0323343277, 227.185546875, -377.190551758], [12.0379161835, 227.178817749, -377.182525635], [12.043296814, 227.172348022, -377.17477417], [12.0484724045, 227.166107178, -377.167327881], [12.0534439087, 227.160125732, -377.16015625], [12.0582084656, 227.154403687, -377.153320313], [12.0627641678, 227.148925781, -377.146759033], [12.0671110153, 227.143707275, -377.14050293], [12.0712461472, 227.13873291, -377.134521484], [12.0751686096, 227.134033203, -377.128875732], [12.0788764954, 227.129577637, -377.123535156], [12.0823698044, 227.12538147, -377.118530273], [12.0856456757, 227.121459961, -377.113800049], [12.0887041092, 227.117797852, -377.109405518], [12.0915431976, 227.114395142, -377.105316162], [12.0941610336, 227.111251831, -377.101531982], [12.0965576172, 227.108383179, -377.098083496], [12.098731041, 227.105773926, -377.094940186], [12.1006803513, 227.103439331, -377.092163086], [12.1024036407, 227.101379395, -377.089660645], [12.1039009094, 227.099578857, -377.087524414], [12.1051712036, 227.098068237, -377.085693359], [12.1062116623, 227.096817017, -377.08416748], [12.1070232391, 227.095840454, -377.083007813], [12.1076040268, 227.095153809, -377.082183838], [12.1079540253, 227.094726563, -377.081665039], [12.1080703735, 227.094589233, -377.081512451], [12.1030082703, 227.100646973, -377.088806152], [12.0877151489, 227.118972778, -377.110809326], [12.0620384216, 227.149795532, -377.147796631], [12.0258302689, 227.193389893, -377.199920654], [11.9788665771, 227.25012207, -377.26751709], [11.9209623337, 227.320419312, -377.350860596], [11.8520994186, 227.40447998, -377.449951172], [11.7721719742, 227.502731323, -377.564941406], [11.6810855865, 227.615570068, -377.695922852], [11.5787611008, 227.743469238, -377.843048096], [11.4649057388, 227.887237549, -378.00668335], [11.3394584656, 228.047439575, -378.186920166], [11.2026023865, 228.224411011, -378.383514404], [11.0543212891, 228.418838501, -378.596466064], [10.8940935135, 228.632141113, -378.826507568], [10.7225055695, 228.8644104, -379.072845459], [10.539434433, 229.116760254, -379.335632324], [10.3447751999, 229.390426636, -379.615112305], [10.1390695572, 229.685882568, -379.910491943], [9.92195415497, 230.0050354, -380.222412109], [9.69424724579, 230.348251343, -380.549743652], [9.45574474335, 230.717605591, -380.892913818], [9.2072353363, 231.113876343, -381.250915527], [8.94898319244, 231.538864136, -381.623565674], [8.68157577515, 231.994155884, -382.010223389], [8.40580844879, 232.481231689, -382.41003418], [8.12237453461, 233.002059937, -382.82232666], [7.83223962784, 233.558517456, -383.24609375], [7.53656435013, 234.15246582, -383.680114746], [7.23659276962, 234.785995483, -384.123168945], [6.93377304077, 235.461257935, -384.573760986], [6.62976789474, 236.180435181, -385.030273438], [6.32646417618, 236.945678711, -385.490753174], [6.02597856522, 237.759140015, -385.953125], [5.73064661026, 238.622970581, -386.415039063], [5.44303894043, 239.539154053, -386.873962402], [5.16592884064, 240.509658813, -387.327178955], [4.90228319168, 241.536315918, -387.771728516], [4.65523958206, 242.620788574, -388.204650879], [4.42807626724, 243.764587402, -388.622711182], [4.22417879105, 244.969055176, -389.022735596], [4.04720830917, 246.233718872, -389.400939941], [3.90058326721, 247.558807373, -389.754119873], [3.78750991821, 248.946212769, -390.079437256], [3.71136379242, 250.395767212, -390.373809814], [3.67384767532, 251.89743042, -390.633178711], [3.64705443382, 253.464172363, -390.868927002], [3.6204020977, 255.092895508, -391.086547852], [3.594217062, 256.771179199, -391.286834717], [3.56847000122, 258.508361816, -391.472839355], [3.54324126244, 260.307617188, -391.646118164], [3.51865696907, 262.169464111, -391.807647705], [3.49484205246, 264.094665527, -391.958221436], [3.47197508812, 266.079437256, -392.098175049], [3.45016312599, 268.12600708, -392.228179932], [3.4294924736, 270.239715576, -392.348907471], [3.41010570526, 272.421936035, -392.460693359], [3.392152071, 274.674102783, -392.563812256], [3.37578892708, 276.997772217, -392.658447266], [3.3611831665, 279.39453125, -392.744689941], [3.34852552414, 281.862945557, -392.822631836], [3.33799815178, 284.403656006, -392.892272949], [3.32977604866, 287.022705078, -392.953857422], [3.32406973839, 289.721923828, -393.007324219], [3.32110357285, 292.503234863, -393.052642822], [3.32111620903, 295.368591309, -393.089813232], [3.32436132431, 298.320068359, -393.118713379], [3.33108568192, 301.35144043, -393.139221191], [3.341578722, 304.47253418, -393.151306152], [3.35614466667, 307.685760498, -393.154876709], [3.37510633469, 310.993225098, -393.149719238], [3.3988070488, 314.397094727, -393.13571167], [3.42753005028, 317.890380859, -393.112731934], [3.46170926094, 321.48336792, -393.080596924], [3.50175786018, 325.178924561, -393.039031982], [3.54810833931, 328.979156494, -392.987884521], [3.6010787487, 332.876373291, -392.927062988], [3.661236763, 336.88067627, -392.856262207], [3.72910690308, 340.995269775, -392.775177002], [3.80511641502, 345.216339111, -392.683685303], [3.889783144, 349.544708252, -392.581634521], [3.98379945755, 353.988098145, -392.468597412], [4.08762454987, 358.541351318, -392.344482422], [4.20186901093, 363.205749512, -392.209106445], [4.32732582092, 367.988189697, -392.062011719], [4.46435451508, 372.877929688, -391.90335083], [4.61388778687, 377.88470459, -391.732574463], [4.77649688721, 383.003936768, -391.549682617], [4.95284843445, 388.234100342, -391.354492188], [5.14379549026, 393.578155518, -391.146728516], [5.34980487823, 399.027709961, -390.926483154], [5.57190513611, 404.588989258, -390.693328857], [5.81044578552, 410.250396729, -390.447601318], [6.06650447845, 416.017822266, -390.188842773], [6.3403968811, 421.879364014, -389.917419434], [6.63311767578, 427.838012695, -389.633087158], [6.94502735138, 433.883544922, -389.336120605], [7.27690649033, 440.014373779, -389.026519775], [7.62922716141, 446.223236084, -388.704528809], [8.00244045258, 452.503051758, -388.370391846], [8.39717388153, 458.850158691, -388.024230957], [8.81346225739, 465.251953125, -387.666656494], [9.2519903183, 471.706695557, -387.297698975], [9.71267414093, 478.201782227, -386.91809082], [10.1958551407, 484.731842041, -386.528076172], [10.7015714645, 491.28793335, -386.128234863], [11.2296791077, 497.859954834, -385.719146729], [11.7803182602, 504.442230225, -385.301239014], [12.3529977798, 511.022491455, -384.875335693], [12.9477396011, 517.59564209, -384.441833496], [13.564043045, 524.151489258, -384.001525879], [14.2015714645, 530.682800293, -383.554962158], [14.8598508835, 537.181762695, -383.102783203], [15.5383119583, 543.64074707, -382.645690918], [16.2364330292, 550.053344727, -382.184265137], [16.9535312653, 556.412475586, -381.719177246], [17.6889858246, 562.712585449, -381.25100708], [18.4420890808, 568.948059082, -380.780334473], [19.2121162415, 575.113708496, -380.307769775], [19.9983634949, 581.20526123, -379.833770752], [20.8000640869, 587.218505859, -379.358917236], [21.6164493561, 593.149780273, -378.88369751], [22.4468803406, 598.996704102, -378.408508301], [23.2904319763, 604.755432129, -377.933837891], [24.1465835571, 610.425231934, -377.460021973], [25.014509201, 616.003479004, -376.987426758], [25.8933753967, 621.488037109, -376.51651001], [26.7828083038, 626.879760742, -376.047363281], [27.681968689, 632.176757813, -375.580413818], [28.5900859833, 637.377868652, -375.115936279], [29.5065937042, 642.483276367, -374.654144287], [30.4312858582, 647.495117188, -374.195068359], [31.3631649017, 652.411315918, -373.739074707], [32.3016815186, 657.23236084, -373.286376953], [33.2463150024, 661.958984375, -372.837036133], [34.1966438293, 666.592346191, -372.391204834], [35.1525192261, 671.134887695, -371.948822021], [36.1130905151, 675.58581543, -371.510162354], [37.0779266357, 679.946166992, -371.075317383], [38.0466194153, 684.217163086, -370.644317627], [39.0187759399, 688.40020752, -370.217254639], [39.9940261841, 692.496582031, -369.794189453], [40.9720115662, 696.507629395, -369.37512207], [41.9574813843, 700.45489502, -368.957946777], [42.9554176331, 704.359008789, -368.540557861], [43.9658050537, 708.219665527, -368.123016357], [44.9886398315, 712.036804199, -367.705352783], [46.0239105225, 715.810241699, -367.287597656], [47.0716056824, 719.539855957, -366.869781494], [48.1317100525, 723.225402832, -366.45199585], [49.2042121887, 726.866760254, -366.034240723], [50.2890968323, 730.463806152, -365.616546631], [51.3863449097, 734.016296387, -365.198944092], [52.4959373474, 737.524108887, -364.781524658], [53.6178512573, 740.987121582, -364.364318848], [54.7520637512, 744.405090332, -363.947296143], [55.8985481262, 747.777893066, -363.530578613], [57.05727005, 751.10534668, -363.11416626], [58.2281951904, 754.387268066, -362.6980896], [59.4112854004, 757.623535156, -362.282409668], [60.6064987183, 760.813842773, -361.867156982], [61.8137893677, 763.958129883, -361.452392578], [63.0331001282, 767.056213379, -361.038116455], [64.2593231201, 770.110900879, -360.625244141], [65.4782409668, 773.126342773, -360.216247559], [66.6894989014, 776.10369873, -359.811157227], [67.8930969238, 779.04296875, -359.409973145], [69.089012146, 781.944274902, -359.012634277], [70.2772369385, 784.807556152, -358.61920166], [71.4577636719, 787.633056641, -358.22958374], [72.6305770874, 790.420715332, -357.843841553], [73.7956542969, 793.170654297, -357.461914063], [74.9529876709, 795.882995605, -357.08380127], [76.1025543213, 798.557739258, -356.709472656], [77.2443466187, 801.195068359, -356.33895874], [78.3783340454, 803.79510498, -355.972229004], [79.5045013428, 806.357849121, -355.60925293], [80.6228179932, 808.883483887, -355.250030518], [81.7340087891, 811.373779297, -354.894348145], [82.8374938965, 813.827575684, -354.542297363], [83.9331054688, 816.244628906, -354.193969727], [85.0208053589, 818.62512207, -353.849334717], [86.1005630493, 820.969238281, -353.508361816], [87.1723556519, 823.276977539, -353.171081543], [88.2361373901, 825.548583984, -352.837463379], [89.291885376, 827.784240723, -352.507507324], [90.339553833, 829.984008789, -352.181182861], [91.3791046143, 832.148071289, -351.858459473], [92.4104995728, 834.276672363, -351.539367676], [93.4336929321, 836.369873047, -351.223907471], [94.4498596191, 838.430419922, -350.911651611], [95.4579849243, 840.456359863, -350.602905273], [96.457824707, 842.447631836, -350.297729492], [97.4493103027, 844.40423584, -349.996124268], [98.4323959351, 846.326538086, -349.698059082], [99.4070205688, 848.214660645, -349.403533936], [100.373130798, 850.068786621, -349.112548828], [101.33065033, 851.889160156, -348.82510376], [102.280815125, 853.678344727, -348.540802002], [103.222938538, 855.435424805, -348.25982666], [104.156333923, 857.159423828, -347.982330322], [105.080924988, 858.850524902, -347.708343506], [105.996650696, 860.509033203, -347.437835693], [106.903411865, 862.135070801, -347.170837402], [107.801956177, 863.73046875, -346.907073975], [108.692955017, 865.296569824, -346.646331787], [109.574813843, 866.831115723, -346.389068604], [110.44744873, 868.33416748, -346.135253906], [111.310760498, 869.806091309, -345.88494873], [112.164985657, 871.247680664, -345.637969971], [113.012153625, 872.662658691, -345.393798828], [113.849784851, 874.047302246, -345.153045654], [114.677772522, 875.401794434, -344.915771484], [115.496002197, 876.726501465, -344.681976318], [116.306365967, 878.024719238, -344.451080322], [117.10799408, 879.295593262, -344.223297119], [117.899620056, 880.537414551, -343.998962402], [118.681129456, 881.750488281, -343.778106689], [119.45475769, 882.938720703, -343.560089111], [120.219261169, 884.100524902, -343.345184326], [120.973381042, 885.23449707, -343.133758545], [121.717391968, 886.341430664, -342.925689697], [122.454231262, 887.426147461, -342.720184326], [123.180389404, 888.483825684, -342.518127441], [123.895751953, 889.514770508, -342.319549561], [124.603744507, 890.524353027, -342.123504639], [125.301368713, 891.508666992, -341.930786133], [125.987884521, 892.467102051, -341.741577148], [126.666984558, 893.405212402, -341.554840088], [127.335456848, 894.319030762, -341.371429443], [127.992805481, 895.208251953, -341.191467285], [128.643081665, 896.078735352, -341.013824463], [129.281784058, 896.924865723, -340.83972168], [129.910964966, 897.749755859, -340.668548584], [130.531173706, 898.55456543, -340.500183105], [131.13949585, 899.335876465, -340.335357666], [131.740875244, 900.100402832, -340.172729492], [132.33039856, 900.842285156, -340.01361084], [132.911102295, 901.565734863, -339.857147217], [133.481689453, 902.26953125, -339.703704834], [134.042068481, 902.953857422, -339.553253174], [134.593612671, 903.620788574, -339.405456543], [135.134033203, 904.267883301, -339.260864258], [135.666412354, 904.899169922, -339.118682861], [136.187210083, 905.510864258, -338.979797363], [136.700332642, 906.107788086, -338.843170166], [137.201873779, 906.685791016, -338.709838867], [137.695663452, 907.249572754, -338.578765869], [138.178314209, 907.795532227, -338.450836182], [138.652694702, 908.327331543, -338.325286865], [139.116836548, 908.842895508, -338.202606201], [139.571762085, 909.343811035, -338.082519531], [140.017745972, 909.830505371, -337.964935303], [140.453216553, 910.301696777, -337.850280762], [140.881439209, 910.761047363, -337.737670898], [141.298553467, 911.204711914, -337.628112793], [141.708282471, 911.636962891, -337.520629883], [142.108337402, 912.055541992, -337.415802002], [142.498718262, 912.460693359, -337.313598633], [142.882125854, 912.855407715, -337.213348389], [143.255264282, 913.236633301, -337.115875244], [143.620361328, 913.606750488, -337.020599365], [143.97756958, 913.966186523, -336.927490234], [144.325057983, 914.313232422, -336.836975098], [144.665252686, 914.650512695, -336.748474121], [144.997558594, 914.977600098, -336.662078857], [145.320648193, 915.293395996, -336.578155518], [145.636413574, 915.599914551, -336.49621582], [145.945068359, 915.897521973, -336.416168213], [146.245040894, 916.184875488, -336.338439941], [146.536911011, 916.462585449, -336.2628479], [146.823196411, 916.733276367, -336.188781738], [147.101318359, 916.994628906, -336.116882324], [147.371490479, 917.246948242, -336.047088623], [147.63508606, 917.491699219, -335.979034424], [147.892623901, 917.729431152, -335.912567139], [148.142730713, 917.95892334, -335.848083496], [148.385604858, 918.180541992, -335.785491943], [148.622238159, 918.395324707, -335.72454834], [148.853546143, 918.604187012, -335.665008545], [149.078125, 918.805847168, -335.60723877], [149.296142578, 919.000671387, -335.551177979], [149.507797241, 919.188842773, -335.496795654], [149.714797974, 919.372009277, -335.443603516], [149.916305542, 919.549438477, -335.391876221], [150.111907959, 919.72088623, -335.341674805], [150.301818848, 919.88659668, -335.29296875], [150.486206055, 920.04675293, -335.245697021], [150.666091919, 920.202392578, -335.199584961], [150.841705322, 920.353637695, -335.154602051], [151.012268066, 920.499938965, -335.110931396], [151.177947998, 920.641479492, -335.068511963], [151.338928223, 920.778503418, -335.02734375], [151.495361328, 920.911132813, -334.987335205], [151.647888184, 921.039978027, -334.94833374], [151.797195435, 921.165588379, -334.91015625], [151.94241333, 921.287414551, -334.873046875], [152.083724976, 921.405517578, -334.83694458], [152.221252441, 921.520019531, -334.801849365], [152.355194092, 921.631225586, -334.76763916], [152.485671997, 921.739196777, -334.734344482], [152.612854004, 921.844116211, -334.701904297], [152.738021851, 921.947021484, -334.66998291], [152.860244751, 922.047241211, -334.638793945], [152.979598999, 922.144775391, -334.608398438], [153.096221924, 922.239807129, -334.578674316], [153.210266113, 922.332519531, -334.549591064], [153.321884155, 922.422973633, -334.521179199], [153.43119812, 922.511291504, -334.49331665], [153.538375854, 922.597717285, -334.466033936], [153.643554688, 922.682250977, -334.43927002], [153.747817993, 922.765869141, -334.412719727], [153.850311279, 922.847839355, -334.386657715], [153.951187134, 922.928283691, -334.360992432], [154.050582886, 923.007385254, -334.335723877], [154.148590088, 923.085144043, -334.310791016]];
    };

    return Stormtest;

  })(Base3DChapter);

  Canvas = (function(_super) {

    __extends(Canvas, _super);

    function Canvas() {
      this.initialize = __bind(this.initialize, this);      return Canvas.__super__.constructor.apply(this, arguments);
    }

    Canvas.prototype.tagName = 'canvas';

    Canvas.prototype.context = null;

    Canvas.prototype.attr = null;

    Canvas.prototype.paused = true;

    Canvas.prototype.initialize = function(w, h) {
      if (w == null) {
        w = 1024;
      }
      if (h == null) {
        h = 768;
      }
      this.attr = {
        width: w,
        height: h
      };
      Canvas.__super__.initialize.call(this);
      return null;
    };

    Canvas.prototype.init = function() {
      this.$el.attr(this.attr);
      this.context = this.el.getContext('2d');
      return null;
    };

    return Canvas;

  })(Abstract);

  CheckBox = (function(_super) {

    __extends(CheckBox, _super);

    function CheckBox() {
      this.val = __bind(this.val, this);
      this.toggleCheck = __bind(this.toggleCheck, this);
      this.click = __bind(this.click, this);
      this.init = __bind(this.init, this);      return CheckBox.__super__.constructor.apply(this, arguments);
    }

    CheckBox.prototype.check = null;

    CheckBox.prototype.checked = null;

    CheckBox.prototype.className = 'openingCheckBox';

    CheckBox.prototype.init = function() {
      this.$el.addClass('btanimated');
      this.check = new SSAsset('interface', 'checkbox');
      this.check.mouseEnabled(false);
      this.addChild(this.check);
      this.check.$el.addClass('openingCheckBox');
      this.check.$el.css({
        'background-position-y': parseInt(this.check.$el.css('background-position-y')) + 1,
        'height': parseInt(this.check.$el.css('height')) + 1,
        'width': parseInt(this.check.$el.css('width')) + 1
      });
      this.checked = new SSAsset('interface', 'checkbox_checked');
      this.checked.mouseEnabled(false);
      this.addChild(this.checked);
      this.checked.$el.addClass('openingCheckBox');
      this.checked.$el.css({
        'background-position-y': parseInt(this.checked.$el.css('background-position-y')) + 1,
        'height': parseInt(this.checked.$el.css('height')) + 1,
        'width': parseInt(this.check.$el.css('width')) + 1
      });
      this.checked.hide();
      this.$el.click(this.click);
      return null;
    };

    CheckBox.prototype.click = function() {
      this.trigger('toggled');
      return null;
    };

    CheckBox.prototype.toggleCheck = function() {
      if (this.check.visible) {
        this.check.hide();
      } else {
        this.check.show();
      }
      if (this.checked.visible) {
        this.checked.hide();
      } else {
        this.checked.show();
      }
      return null;
    };

    CheckBox.prototype.val = function() {
      return this.checked.visible;
    };

    return CheckBox;

  })(Abstract);

  Instructions = (function(_super) {

    __extends(Instructions, _super);

    function Instructions() {
      this.dispose = __bind(this.dispose, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.initialize = __bind(this.initialize, this);      return Instructions.__super__.constructor.apply(this, arguments);
    }

    Instructions.prototype.className = "instructionsContainer";

    Instructions.prototype.active = false;

    Instructions.prototype.initialize = function(ids) {
      var box, divider, image, sentence;
      Instructions.__super__.initialize.call(this);
      box = $("            <div class='box'>                <div id='r1' class='row'>                    <div id='c11' class='cell'></div>                    <div id='c12' class='cell'></div>                    <div id='c13' class='cell'></div>                </div>                <div id='r2' class='row'>                    <div id='c21' class='cell'></div>                    <div id='c22' class='cell'></div>                    <div id='c23' class='cell'></div>                </div>                <div id='r3' class='row'>                    <div id='c31' class='cell'></div>                    <div id='c32' class='cell'></div>                    <div id='c33' class='cell'></div>                </div>            </div>");
      this.addChild(box);
      image = new SSAsset("interface", ids.assetID);
      image.css({
        "margin": "0 auto"
      });
      box.find("#c22").append(image.$el);
      sentence = $("<p>" + (this.oz().locale.get(ids.localeID)) + "</p>");
      box.find("#c22").append(sentence);
      divider = new SSAsset("interface", "instructions_flourish");
      divider.css({
        "margin": "0 auto"
      });
      box.find("#c22").append(divider.$el);
      return null;
    };

    Instructions.prototype.show = function(animated, callback) {
      this.active = true;
      Instructions.__super__.show.call(this, animated, callback);
      return null;
    };

    Instructions.prototype.hide = function(animated, callback) {
      var _this = this;
      Instructions.__super__.hide.call(this, animated, function() {
        if (typeof callback === "function") {
          callback();
        }
        return _this.active = false;
      });
      return null;
    };

    Instructions.prototype.dispose = function() {
      return null;
    };

    return Instructions;

  })(Abstract);

  InstructionsChapter = (function(_super) {

    __extends(InstructionsChapter, _super);

    function InstructionsChapter() {
      this.dispose = __bind(this.dispose, this);
      this.close = __bind(this.close, this);
      this.onMouseMove = __bind(this.onMouseMove, this);
      this.addMouseListener = __bind(this.addMouseListener, this);
      this.activate = __bind(this.activate, this);
      this.initialize = __bind(this.initialize, this);      return InstructionsChapter.__super__.constructor.apply(this, arguments);
    }

    InstructionsChapter.prototype.className = "instructionsChapterContainer";

    InstructionsChapter.prototype.timeoutToMouseMove = null;

    InstructionsChapter.prototype.activated = false;

    InstructionsChapter.prototype.initialize = function() {
      InstructionsChapter.__super__.initialize.call(this);
      this.instructions = new Instructions({
        "assetID": "instructions_music",
        "localeID": "landingInstructions"
      });
      this.addChild(this.instructions);
      this.instructions.$el.css({
        display: 'table-cell',
        'vertical-align': 'middle'
      });
      this.instructions.$el.find('#c22 p').css({
        'text-transform': 'uppercase'
      });
      this.instructions.$el.find('#c22 p').append("<br>" + (this.oz().locale.get('landing_instructions_small')));
      this.hide();
      return null;
    };

    InstructionsChapter.prototype.activate = function() {
      if (this.oz().router.showInstructions === false) {
        return;
      }
      if (!this.activated) {
        this.activated = true;
        this.show(true);
        this.instructions.show(true);
        this.$el.bind("mousedown", this.close);
        this.timeoutToMouseMove = setTimeout(this.addMouseListener, 4000);
      }
      return null;
    };

    InstructionsChapter.prototype.addMouseListener = function() {
      document.addEventListener("mousemove", this.onMouseMove, false);
      return null;
    };

    InstructionsChapter.prototype.onMouseMove = function() {
      this.close();
      return null;
    };

    InstructionsChapter.prototype.close = function() {
      var _this = this;
      clearTimeout(this.timeoutToMouseMove);
      this.$el.unbind("mousedown");
      document.removeEventListener("mousemove", this.onMouseMove, false);
      this.hide(true, function() {
        _this.oz().appView.area.remove(_this.oz().appView.area.chapterInstructions);
        return _this.oz().appView.area.chapterInstructions = null;
      });
      return null;
    };

    InstructionsChapter.prototype.dispose = function() {
      return null;
    };

    return InstructionsChapter;

  })(Abstract);

  LocalisedTexture = (function() {

    LocalisedTexture.prototype.title = null;

    LocalisedTexture.prototype.canvas = null;

    LocalisedTexture.prototype.ctx = null;

    LocalisedTexture.prototype.flourish = null;

    LocalisedTexture.prototype.diamond = null;

    LocalisedTexture.prototype.wHalf = null;

    LocalisedTexture.prototype.icon = null;

    /*
        Usage: 
            @oz().localeTexture.get 'section'
    */


    function LocalisedTexture() {
      this.trim = __bind(this.trim, this);
      this.wrapText = __bind(this.wrapText, this);
      this.get = __bind(this.get, this);      this.diamond = window.oz.baseAssets.get("diamond").result;
      $('<p style="font-family: \"TradeGothic\"" />');
      null;
    }

    LocalisedTexture.prototype.get = function(section) {
      var headerCopy, subCopy, textSize;
      this.icon = window.oz.baseAssets.get("section_icon_" + section).result;
      this.canvas = document.createElement('canvas');
      this.canvas.width = 1000;
      this.canvas.height = 1000;
      this.ctx = this.canvas.getContext('2d');
      this.wHalf = parseInt(this.canvas.width) / 2;
      this.ctx.drawImage(this.diamond, this.wHalf - 4, 0);
      this.ctx.drawImage(this.icon, this.wHalf - 30, 15);
      headerCopy = window.oz.locale.get(section + "Title");
      this.ctx.font = '46px TradeGothic';
      this.ctx.save();
      this.ctx.fillStyle = '#FFF';
      this.ctx.textAlign = 'center';
      this.ctx.textBaseline = 'top';
      textSize = this.wrapText(this.ctx, headerCopy, this.wHalf, 88, 400, 46);
      subCopy = "";
      if (subCopy.length > 0) {
        this.ctx.font = '14px TradeGothic';
        this.ctx.save();
        this.ctx.fillStyle = '#FFF';
        this.ctx.textAlign = 'center';
        this.ctx.textBaseline = 'top';
        textSize = this.wrapText(this.ctx, subCopy, this.wHalf, textSize, 400, 14);
      }
      this.ctx.drawImage(this.diamond, this.wHalf - 4, textSize + 5);
      return this.trim();
    };

    LocalisedTexture.prototype.wrapText = function(context, text, x, y, maxWidth, lineHeight) {
      var br, line, metrics, n, nextLine, testLine, testWidth, word, words, _i, _ref;
      words = text.split(' ');
      line = '';
      nextLine = false;
      for (n = _i = 0, _ref = words.length; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
        word = words[n];
        br = false;
        if (word.indexOf("<br>") > -1) {
          word = word.replace('<br>', ' ');
          br = true;
          testLine = line;
        }
        testLine = line + word + ' ';
        metrics = context.measureText(testLine);
        testWidth = metrics.width;
        if (testWidth > maxWidth || br) {
          context.fillText(line, x, y);
          line = word + ' ';
          y += lineHeight;
        } else {
          line = testLine;
        }
      }
      context.fillText(line, x, y);
      return y + lineHeight;
    };

    LocalisedTexture.prototype.trim = function() {
      var bound, c, copy, i, l, pixels, trimHeight, trimWidth, trimmed, x, y, _i, _ref;
      c = this.canvas;
      copy = document.createElement('canvas').getContext('2d');
      pixels = this.ctx.getImageData(0, 0, c.width, c.height);
      l = pixels.data.length;
      bound = {
        top: null,
        left: null,
        right: null,
        bottom: null
      };
      for (i = _i = 0, _ref = l - 1; _i <= _ref; i = _i += 4) {
        if (pixels.data[i + 3] !== 0) {
          x = (i / 4) % c.width;
          y = ~~((i / 4) / c.width);
          if (bound.top === null) {
            bound.top = y;
          }
          if (bound.left === null) {
            bound.left = x;
          } else if (x < bound.left) {
            bound.left = x;
          }
          if (bound.right === null) {
            bound.right = x;
          } else if (bound.right < x) {
            bound.right = x;
          }
          if (bound.bottom === null) {
            bound.bottom = y;
          } else if (bound.bottom < y) {
            bound.bottom = y;
          }
        }
      }
      bound.width = Math.max(bound.right - bound.left, 180);
      bound.height = Math.max(bound.bottom - bound.top, 145);
      trimWidth = 1024;
      trimHeight = 1024;
      trimmed = this.ctx.getImageData(bound.left, bound.top, trimWidth, trimHeight);
      copy.canvas.width = trimWidth;
      copy.canvas.height = trimHeight;
      copy.putImageData(trimmed, trimWidth / 2 - (bound.right - bound.left) / 2, trimHeight / 2 - (bound.bottom - bound.top) / 2);
      return {
        canvas: copy.canvas,
        bound: bound
      };
    };

    return LocalisedTexture;

  })();

  Logo = (function(_super) {

    __extends(Logo, _super);

    function Logo() {
      this.dispose = __bind(this.dispose, this);
      this.enable = __bind(this.enable, this);
      this.disable = __bind(this.disable, this);
      this.onClick = __bind(this.onClick, this);
      this.logoRollOut = __bind(this.logoRollOut, this);
      this.logoRollOver = __bind(this.logoRollOver, this);
      this.showGoogleLogos = __bind(this.showGoogleLogos, this);
      this.hideGoogleLogos = __bind(this.hideGoogleLogos, this);
      this.init = __bind(this.init, this);      return Logo.__super__.constructor.apply(this, arguments);
    }

    Logo.prototype.id = 'logo';

    Logo.prototype.obj = null;

    Logo.prototype.chromeLogo = null;

    Logo.prototype.googleLogo = null;

    Logo.prototype.init = function() {
      var _this = this;
      this.canvas = new LogoParticles(80, 80);
      this.logoContainer = $("<div class='logo'/>");
      this.assetLogo = new SSAsset('interface', 'logo_oz');
      this.assetLogoOver = new SSAsset('interface', 'logo_oz_over');
      this.assetLogoOver.hide(false);
      this.logoContainer.append(this.assetLogo.$el);
      this.logoContainer.append(this.assetLogoOver.$el);
      this.addChild(this.logoContainer);
      this.addChild(this.canvas);
      this.canvas.init();
      this.chromeLogo = new SSAsset('interface', 'logo_chrome');
      this.chromeLogo.addClass('chrome');
      this.chromeLogo.addClass('button_alpha_enabled');
      this.chromeLogo.$el.bind('click', function() {
        Analytics.track('click_chrome_logo');
        return window.open('http://www.chromeexperiments.com/');
      });
      this.addChild(this.chromeLogo);
      this.googleLogo = new SSAsset('interface', 'logo_google');
      this.googleLogo.addClass('google');
      this.googleLogo.addClass('button_alpha_enabled');
      this.googleLogo.$el.bind('click', function() {
        Analytics.track('click_friends_google');
        return window.open('http://google.com/');
      });
      this.addChild(this.googleLogo);
      this.logoContainer.bind("click", this.onClick);
      this.logoContainer.css({
        "cursor": "pointer"
      });
      this.logoContainer.bind("mouseover", this.logoRollOver);
      this.logoContainer.bind("mouseout", this.logoRollOut);
      return null;
    };

    Logo.prototype.hideGoogleLogos = function() {
      this.googleLogo.$el.removeClass('button_alpha_enabled');
      this.chromeLogo.$el.removeClass('button_alpha_enabled');
      this.chromeLogo.hide(true, null, 400, "linear", true);
      this.googleLogo.hide(true, null, 400, "linear", true);
      return null;
    };

    Logo.prototype.showGoogleLogos = function() {
      var _this = this;
      this.chromeLogo.show(true, null, 400, "linear");
      this.googleLogo.show(true, function() {
        if (_this.googleLogo.$el.hasClass('button_alpha_enabled')) {
          _this.googleLogo.$el.removeClass('button_alpha_enabled');
          _this.chromeLogo.$el.removeClass('button_alpha_enabled');
        }
        _this.googleLogo.$el.addClass('button_alpha_enabled');
        return _this.chromeLogo.$el.addClass('button_alpha_enabled');
      }, 400, "linear");
      return null;
    };

    Logo.prototype.logoRollOver = function() {
      this.canvas.show();
      this.assetLogoOver.show(true, null, 200);
      this.assetLogo.hide(true, null, 200);
      return null;
    };

    Logo.prototype.logoRollOut = function() {
      this.canvas.hide();
      this.assetLogoOver.hide(true, null, 200);
      this.assetLogo.show(true, null, 200);
      return null;
    };

    Logo.prototype.onClick = function() {
      this.canvas.hide();
      this.assetLogoOver.hide(true, null, 200);
      this.assetLogo.show(true, null, 200);
      Analytics.track('menu_click_official');
      window.open('/official.html');
      return null;
    };

    Logo.prototype.disable = function() {
      return;
      this.logoContainer.unbind("click");
      this.logoContainer.css({
        "cursor": "default"
      });
      this.logoContainer.unbind("mouseover");
      this.logoContainer.unbind("mouseout");
      return null;
    };

    Logo.prototype.enable = function() {
      return;
      this.disable();
      this.logoContainer.bind("click", this.onClick);
      this.logoContainer.css({
        "cursor": "pointer"
      });
      this.logoContainer.bind("mouseover", this.logoRollOver);
      this.logoContainer.bind("mouseout", this.logoRollOut);
      return null;
    };

    Logo.prototype.dispose = function() {
      this.logoContainer.unbind("mouseover");
      this.logoContainer.unbind("mouseout");
      this.logoContainer.unbind("click");
      return null;
    };

    return Logo;

  })(Abstract);

  LogoParticles = (function(_super) {

    __extends(LogoParticles, _super);

    function LogoParticles() {
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.init = __bind(this.init, this);      return LogoParticles.__super__.constructor.apply(this, arguments);
    }

    LogoParticles.prototype.className = 'logoParticles';

    LogoParticles.prototype.particles = null;

    LogoParticles.prototype.speed = .6;

    LogoParticles.prototype.paused = true;

    LogoParticles.prototype.init = function() {
      var i, p, _i;
      LogoParticles.__super__.init.call(this);
      this.mouseEnabled(false);
      this.particles = [];
      this.paused = true;
      this.$el.css({
        opacity: 0
      });
      for (i = _i = 0; _i <= 20; i = ++_i) {
        p = new Particle({
          _canvas: this.context,
          _w: this.$el[0].width,
          _h: this.$el[0].height,
          _maxSize: 3,
          _speed: .6,
          _type: 0,
          _rect: {
            x: 0,
            y: 0,
            w: 80,
            h: 80
          }
        });
        this.particles.push(p);
      }
      return;
      return null;
    };

    LogoParticles.prototype.onEnterFrame = function() {
      var p, _i, _len, _ref;
      if (this.paused) {
        return;
      }
      this.clear();
      _ref = this.particles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.move();
        p.draw();
      }
      return;
      return null;
    };

    LogoParticles.prototype.show = function() {
      this.resume();
      this.$el.stop().animate({
        opacity: 1
      });
      return null;
    };

    LogoParticles.prototype.hide = function() {
      this.$el.stop().animate({
        opacity: 0
      }, this.pause);
      return null;
    };

    LogoParticles.prototype.clear = function() {
      this.context.clearRect(0, 0, this.$el[0].width, this.$el[0].height);
      return null;
    };

    LogoParticles.prototype.rand = function(low, high) {
      if (low == null) {
        low = 0;
      }
      if (high == null) {
        high = 1;
      }
      return ((Math.random() * (high - low)) + low) % high;
    };

    return LogoParticles;

  })(Canvas);

  Map = (function(_super) {

    __extends(Map, _super);

    function Map() {
      this.changeMenuArea = __bind(this.changeMenuArea, this);
      this.show = __bind(this.show, this);
      this.hide = __bind(this.hide, this);
      this.init = __bind(this.init, this);      return Map.__super__.constructor.apply(this, arguments);
    }

    Map.prototype.base = null;

    Map.prototype.buttonsCoord = null;

    Map.prototype.className = 'map';

    Map.prototype.currentIndex = -1;

    Map.prototype.buttons = null;

    Map.prototype.view = null;

    Map.prototype.init = function() {
      this.view = new MapMenu;
      this.addChild(this.view);
      return null;
    };

    Map.prototype.hide = function(anim, callback, time, ease) {
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      if (time == null) {
        time = 400;
      }
      if (ease == null) {
        ease = "linear";
      }
      this.visible = false;
      this.mouseEnabled(false);
      if (!anim) {
        if (typeof callback === "function") {
          callback();
        }
      } else {
        this.view.animateOut(callback);
      }
      return null;
    };

    Map.prototype.show = function(anim, callback, time, ease) {
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      if (time == null) {
        time = 400;
      }
      if (ease == null) {
        ease = "linear";
      }
      this.visible = true;
      this.mouseEnabled(true);
      if (!anim) {
        this.view.animateIn();
        if (typeof callback === "function") {
          callback();
        }
      } else {
        this.view.animateIn();
        if (typeof callback === "function") {
          callback();
        }
      }
      return null;
    };

    Map.prototype.showMenu = function() {
      return null;
    };

    Map.prototype.changeMenuArea = function(area) {
      this.view.changeMenuArea(area);
      return null;
    };

    return Map;

  })(Abstract);

  MapMenu = (function(_super) {

    __extends(MapMenu, _super);

    function MapMenu() {
      this.createSequence = __bind(this.createSequence, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.changeMenuArea = __bind(this.changeMenuArea, this);
      this.menuEvents = __bind(this.menuEvents, this);
      this.menuClick = __bind(this.menuClick, this);
      this.animateOut = __bind(this.animateOut, this);
      this.animateIn = __bind(this.animateIn, this);
      this.render = __bind(this.render, this);
      this.init = __bind(this.init, this);      return MapMenu.__super__.constructor.apply(this, arguments);
    }

    MapMenu.prototype.tagName = 'div';

    MapMenu.prototype.stage = null;

    MapMenu.prototype.canvas = null;

    MapMenu.prototype.fill = null;

    MapMenu.prototype.buttons = null;

    MapMenu.prototype.seq = null;

    MapMenu.prototype.paused = true;

    MapMenu.prototype.container = null;

    MapMenu.prototype.animateSequence = null;

    MapMenu.prototype.timeout = 0;

    MapMenu.prototype.scale = 0;

    MapMenu.prototype.totalW = 0;

    MapMenu.prototype.center = 0;

    MapMenu.prototype.init = function() {
      this.scale = .7;
      this.canvas = document.createElement('canvas');
      this.canvas.width = 800;
      this.canvas.height = 160;
      this.$el.append(this.canvas);
      this.stage = new createjs.Stage(this.canvas);
      this.stage.mouseEventsEnabled = true;
      this.stage.enableMouseOver(10);
      this.container = new createjs.Container;
      this.stage.addChild(this.container);
      this.fill = this.oz().baseAssets.get('buttonpattern').result;
      this.render();
      return null;
    };

    MapMenu.prototype.render = function() {
      var i, item, menuItem, _i, _ref;
      this.createSequence();
      this.animateSequence = [];
      this.buttons = [];
      this.totalW = 35;
      this.center = 75;
      for (i = _i = 0, _ref = this.seq.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        item = this.seq[i];
        switch (item.type) {
          case 'scene':
            menuItem = new MenuFilledCircle(this.totalW, this.center, 30 * this.scale, this.scale, this.oz().baseAssets.get("menu_" + item.id).result, this.oz().baseAssets.get("menu_on").result);
            this.buttons.push(menuItem);
            menuItem.id = item.id;
            this.totalW += i < this.seq.length - 1 ? 43 : 35;
            break;
          case 'sep':
            menuItem = new MenuSeparator(this.totalW, this.center);
            this.totalW += item.space;
        }
        this.animateSequence.push(menuItem);
        this.container.addChild(menuItem.view);
        if (menuItem.on) {
          menuItem.on('click', this.menuClick);
          menuItem.on('rollover', this.menuEvents);
          menuItem.on('rollout', this.menuEvents);
        }
      }
      this.container.x = this.canvas.width / 2 - this.totalW / 2;
      this.paused = false;
      return null;
    };

    MapMenu.prototype.animateIn = function() {
      var i, _i, _ref;
      clearTimeout(this.timeout);
      for (i = _i = 0, _ref = this.animateSequence.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.animateSequence[i].animateIn(25 * i);
      }
      return null;
    };

    MapMenu.prototype.animateOut = function(callback) {
      var i, _i, _ref;
      for (i = _i = _ref = this.animateSequence.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        this.animateSequence[i].animateOut(25 * i);
      }
      this.timeout = setTimeout(callback, this.animateSequence.length * 25 + 500);
      return null;
    };

    MapMenu.prototype.menuClick = function(e) {
      Analytics.track("menu_click_" + e.id);
      $(this.canvas).css({
        cursor: ''
      });
      this.oz().router.navigateTo(e.id, false);
      return null;
    };

    MapMenu.prototype.menuEvents = function(e) {
      var cursor;
      cursor = e === 'rollover' ? 'pointer' : '';
      $(this.canvas).css({
        cursor: cursor
      });
      return null;
    };

    MapMenu.prototype.changeMenuArea = function(area) {
      var b, _i, _len, _ref;
      _ref = this.buttons;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        b.menuState(b.id === area);
      }
      return null;
    };

    MapMenu.prototype.onEnterFrame = function() {
      this.stage.update();
      TWEEN.update();
      return null;
    };

    MapMenu.prototype.createSequence = function() {
      this.seq = [
        {
          type: 'scene',
          id: 'carnival'
        }, {
          type: 'sep',
          space: 16
        }, {
          type: 'sep',
          space: 16
        }, {
          type: 'sep',
          space: 48
        }, {
          type: 'scene',
          id: 'carnival2'
        }, {
          type: 'sep',
          space: 16
        }, {
          type: 'sep',
          space: 16
        }, {
          type: 'sep',
          space: 48
        }, {
          type: 'scene',
          id: 'carnival3'
        }
      ];
      return null;
    };

    return MapMenu;

  })(Abstract);

  MenuFilledCircle = (function() {

    MenuFilledCircle.prototype.view = null;

    MenuFilledCircle.prototype.circle = null;

    MenuFilledCircle.prototype.radius = null;

    MenuFilledCircle.prototype.currentState = null;

    MenuFilledCircle.prototype.tween = null;

    MenuFilledCircle.prototype.targetY = null;

    MenuFilledCircle.prototype.current = null;

    MenuFilledCircle.prototype.id = null;

    MenuFilledCircle.prototype.arrow = null;

    MenuFilledCircle.prototype.icon = null;

    MenuFilledCircle.prototype.iconAsset = null;

    MenuFilledCircle.prototype.glowAsset = null;

    MenuFilledCircle.prototype.glow = null;

    function MenuFilledCircle(x, y, r, scale, icon, glow) {
      this.menuState = __bind(this.menuState, this);
      this.animateOut = __bind(this.animateOut, this);
      this.animateIn = __bind(this.animateIn, this);
      this.animateCircle = __bind(this.animateCircle, this);
      this.draw = __bind(this.draw, this);
      this.disable = __bind(this.disable, this);
      var _this = this;
      _.extend(this, Backbone.Events);
      this.radius = r;
      this.iconAsset = icon;
      this.glowAsset = glow;
      this.targetY = y;
      this.current = {
        y: 400
      };
      this.currentState = {
        radius: this.radius,
        stroke: 4,
        alpha: 0,
        rotation: 0
      };
      this.view = new createjs.Container;
      this.view.x = x;
      this.view.y = this.current.y;
      this.view.onMouseOver = function(e) {
        if (_this.clicked) {
          return;
        }
        _this.animateCircle(r + (_this.radius * .25));
        return _this.trigger('rollover', 'rollover');
      };
      this.view.onMouseOut = function(e) {
        if (_this.clicked) {
          return;
        }
        _this.animateCircle(_this.radius);
        return _this.trigger('rollout', 'rollout');
      };
      this.view.onClick = function(e) {
        _this.animateCircle(_this.radius);
        return _this.trigger('click', _this);
      };
      this.circle = new createjs.Shape();
      this.draw(this.radius, this.currentState.stroke);
      this.icon = new createjs.Bitmap(this.iconAsset);
      this.icon.regX = this.icon.regY = 17;
      this.icon.scaleX = this.icon.scaleY = scale;
      this.glow = new createjs.Bitmap(this.glowAsset);
      this.glow.regX = 149 / 2;
      this.glow.regY = 149 / 2;
      this.glow.scaleX = this.glow.scaleY = scale;
      this.glow.alpha = 0;
      this.view.addChild(this.circle);
      this.view.addChild(this.icon);
      this.view.addChild(this.glow);
      null;
    }

    MenuFilledCircle.prototype.disable = function() {
      return null;
    };

    MenuFilledCircle.prototype.draw = function(r, stroke) {
      this.circle.graphics.clear();
      this.circle.graphics.setStrokeStyle(stroke);
      this.circle.graphics.beginFill('rgba(255, 255, 255, 0.39)');
      this.circle.graphics.beginStroke('#FFFFFF');
      this.circle.graphics.drawCircle(0, 0, this.currentState.radius);
      this.circle.graphics.endFill();
      return null;
    };

    MenuFilledCircle.prototype.animateCircle = function(radius, alpha, rotation) {
      var _this = this;
      if (alpha == null) {
        alpha = 0;
      }
      this.tween = new TWEEN.Tween(this.currentState).to({
        radius: radius
      }, 200).easing(TWEEN.Easing.Quadratic.Out);
      this.tween.onUpdate(function(e) {
        return _this.draw(_this.currentState.radius, _this.currentState.stroke);
      });
      this.tween.start();
      return null;
    };

    MenuFilledCircle.prototype.animateIn = function(delay) {
      var _this = this;
      this.tween = new TWEEN.Tween(this.current).to({
        y: this.targetY
      }, 600).easing(TWEEN.Easing.Back.Out).delay(delay);
      this.tween.onUpdate(function(e) {
        return _this.view.y = _this.current.y;
      });
      this.tween.start();
      return null;
    };

    MenuFilledCircle.prototype.animateOut = function(delay) {
      var _this = this;
      this.tween = new TWEEN.Tween(this.current).to({
        y: 400
      }, 600).easing(TWEEN.Easing.Back.In).delay(delay);
      this.tween.onUpdate(function(e) {
        return _this.view.y = _this.current.y;
      });
      this.tween.start();
      return null;
    };

    MenuFilledCircle.prototype.menuState = function(enabled) {
      var tween;
      if (enabled == null) {
        enabled = true;
      }
      this.clicked = enabled;
      tween = new TWEEN.Tween(this.glow).to({
        alpha: (enabled ? 1 : 0)
      }, 400);
      tween.start();
      return null;
    };

    return MenuFilledCircle;

  })();

  MenuSeparator = (function() {

    MenuSeparator.prototype.view = null;

    MenuSeparator.prototype.shape = null;

    MenuSeparator.prototype.targetY = null;

    MenuSeparator.prototype.current = null;

    MenuSeparator.prototype.tween = null;

    function MenuSeparator(x, y) {
      this.menuState = __bind(this.menuState, this);
      this.animateOut = __bind(this.animateOut, this);
      this.animateIn = __bind(this.animateIn, this);      this.current = {
        y: 200
      };
      this.view = new createjs.Container;
      this.view.x = x;
      this.view.y = this.current.y;
      this.targetY = y;
      this.shape = new createjs.Shape;
      this.shape.graphics.beginFill('#FFF');
      this.shape.graphics.drawCircle(0, 0, 3.5);
      this.shape.graphics.endFill();
      this.view.addChild(this.shape);
      null;
    }

    MenuSeparator.prototype.animateIn = function(delay) {
      var _this = this;
      this.tween = new TWEEN.Tween(this.current).to({
        y: this.targetY
      }, 600).easing(TWEEN.Easing.Back.Out).delay(delay);
      this.tween.onUpdate(function(e) {
        return _this.view.y = _this.current.y;
      });
      this.tween.start();
      return null;
    };

    MenuSeparator.prototype.animateOut = function(delay) {
      var _this = this;
      this.tween = new TWEEN.Tween(this.current).to({
        y: 200
      }, 600).easing(TWEEN.Easing.Back.In).delay(delay);
      this.tween.onUpdate(function(e) {
        return _this.view.y = _this.current.y;
      });
      this.tween.start();
      return null;
    };

    MenuSeparator.prototype.menuState = function(enabled) {
      if (enabled == null) {
        enabled = true;
      }
      return null;
    };

    return MenuSeparator;

  })();

  OpeningTitles = (function(_super) {

    __extends(OpeningTitles, _super);

    function OpeningTitles() {
      this.dispose = __bind(this.dispose, this);
      this.render = __bind(this.render, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return OpeningTitles.__super__.constructor.apply(this, arguments);
    }

    OpeningTitles.prototype.template = 'openingTitles';

    OpeningTitles.prototype.fluorish = null;

    OpeningTitles.prototype.diamond = null;

    OpeningTitles.prototype.className = 'openingTitles';

    OpeningTitles.prototype.divider = null;

    OpeningTitles.prototype.cta = null;

    OpeningTitles.prototype.header = null;

    OpeningTitles.prototype.pauseState = false;

    OpeningTitles.prototype.initialize = function(title, cta, divider, pauseState) {
      if (divider == null) {
        divider = true;
      }
      if (pauseState == null) {
        pauseState = false;
      }
      this.templateVars = {
        title: title,
        cta: cta
      };
      this.pauseState = pauseState;
      this.divider = divider;
      OpeningTitles.__super__.initialize.call(this);
      return null;
    };

    OpeningTitles.prototype.init = function() {
      var left, leftSpan, right, rightSpan;
      this.fluorish = new SSAsset('interface', 'pause_top');
      this.addChild(this.fluorish, 1);
      this.fluorish.center();
      this.diamond = new SSAsset('interface', 'pause_bottom');
      this.addChild(this.diamond);
      this.diamond.center();
      if (this.divider) {
        this.cta = this.$el.find('.openingTitlesCTA');
        left = new SSAsset('interface', 'pause_left');
        right = new SSAsset('interface', 'pause_right');
        leftSpan = $("<span class='left'>");
        leftSpan.append(left.$el);
        rightSpan = $("<span class='right'>");
        rightSpan.append(right.$el);
        this.cta.prepend(leftSpan);
        this.cta.append(rightSpan);
      }
      this.header = this.$el.find('.openingTitlesHeader');
      return null;
    };

    OpeningTitles.prototype.render = function(callback, timed) {
      var _this = this;
      if (timed == null) {
        timed = false;
      }
      setTimeout(function() {
        var fontSize;
        fontSize = parseInt(window.getComputedStyle(_this.header[0], null).fontSize);
        while (parseInt(_this.header.find('span').width()) > 725) {
          fontSize--;
          _this.header.css({
            'font-size': fontSize
          });
        }
        return callback();
      }, (timed ? 200 : 100));
      return null;
    };

    OpeningTitles.prototype.dispose = function() {
      return null;
    };

    return OpeningTitles;

  })(Abstract);

  Particle = (function() {

    Particle.prototype.dx = 0;

    Particle.prototype.dy = 0;

    Particle.prototype.x = 0;

    Particle.prototype.y = 0;

    Particle.prototype.r = 0;

    Particle.prototype.canvas = null;

    Particle.prototype.w = 0;

    Particle.prototype.h = 0;

    Particle.prototype.image = null;

    Particle.prototype.alpha = 0;

    Particle.prototype.rColour = 0;

    Particle.prototype.mult = 1;

    Particle.prototype.minSize = 0.8;

    Particle.prototype.maxSize = 0;

    Particle.prototype.type = null;

    Particle.prototype.rect = null;

    Particle.prototype.fading = false;

    Particle.prototype.gradient = null;

    function Particle(args) {
      this.fadeOut = __bind(this.fadeOut, this);
      this.reset = __bind(this.reset, this);
      this.move = __bind(this.move, this);
      this.rand = __bind(this.rand, this);
      this.drawParticle = __bind(this.drawParticle, this);
      this.draw = __bind(this.draw, this);      this.speed = args._speed;
      this.maxSize = args._maxSize;
      this.canvas = args._canvas;
      this.w = args._w;
      this.h = args._h;
      this.type = args._type;
      this.rect = args._rect;
      this.r = this.rand(this.minSize, this.maxSize);
      this.dx = this.rand(-this.speed, this.speed);
      this.dy = this.rand(-this.speed, this.speed);
      null;
    }

    Particle.prototype.draw = function() {
      switch (this.type) {
        case -1:
          this.canvas.beginPath();
          this.canvas.fillStyle = 'rgba(255,255,255,' + this.rColour + ')';
          this.canvas.arc(this.x, this.y, this.r, 0, Math.PI * 2, true);
          this.canvas.closePath();
          this.canvas.fill();
          break;
        case 0:
        case 1:
          this.drawParticle(this.x, this.y, this.r, 'rgba(247,234,155,' + this.rColour.toFixed(2) + ')', 'rgba(255,204,0,0)');
      }
      if (!this.fading) {
        this.rColour -= .005 * this.mult;
      }
      return null;
    };

    Particle.prototype.drawParticle = function(x, y, radius, color1, color2) {
      this.gradient = this.canvas.createRadialGradient(x, y, 0, x, y, radius);
      this.gradient.addColorStop(0, color1);
      this.gradient.addColorStop(1, color2);
      this.canvas.fillStyle = this.gradient;
      this.canvas.fillRect(x - radius, y - radius, radius * 2, radius * 2);
      return null;
    };

    Particle.prototype.rand = function(low, high) {
      if (low == null) {
        low = 0;
      }
      if (high == null) {
        high = 1;
      }
      return ((Math.random() * (high - low)) + low) % high;
    };

    Particle.prototype.move = function() {
      this.x += this.dx;
      this.y -= this.dy;
      if (this.rColour < 0 || this.rColour > this.alpha) {
        this.mult *= -1;
      }
      if ((this.x > this.rect.w + this.rect.x) || (this.x < this.rect.x) || (this.y > this.rect.h + this.rect.y) || (this.y < this.rect.y)) {
        this.fadeOut();
      }
      return null;
    };

    Particle.prototype.reset = function() {
      this.x = this.rand(this.rect.x, this.rect.w + this.rect.x);
      this.y = this.rand(this.rect.y, this.rect.h + this.rect.y);
      this.dx = this.rand(-this.speed, this.speed);
      this.dy = this.rand(-this.speed, this.speed);
      this.alpha = 1 - MathUtils.map(this.r, this.minSize, this.maxSize, 0, 1);
      this.rColour = this.alpha;
      this.r = this.rand(this.minSize, this.maxSize);
      return null;
    };

    Particle.prototype.fadeOut = function() {
      this.fading = true;
      this.rColour -= 0.005;
      if (this.rColour <= 0) {
        this.fading = false;
        this.reset();
      }
      return null;
    };

    return Particle;

  })();

  ParticleCard = (function() {

    ParticleCard.prototype.dx = 0;

    ParticleCard.prototype.dy = 0;

    ParticleCard.prototype.x = 0;

    ParticleCard.prototype.y = 0;

    ParticleCard.prototype.r = 0;

    ParticleCard.prototype.canvas = null;

    ParticleCard.prototype.w = 0;

    ParticleCard.prototype.h = 0;

    ParticleCard.prototype.image = null;

    ParticleCard.prototype.alpha = 0;

    ParticleCard.prototype.rColour = 1;

    ParticleCard.prototype.mult = 1;

    ParticleCard.prototype.minSize = 0.8;

    ParticleCard.prototype.maxSize = 0;

    ParticleCard.prototype.type = null;

    ParticleCard.prototype.rect = null;

    ParticleCard.prototype.fading = false;

    ParticleCard.prototype.gradient = null;

    function ParticleCard(args) {
      this.fadeOut = __bind(this.fadeOut, this);
      this.reset = __bind(this.reset, this);
      this.move = __bind(this.move, this);
      this.rand = __bind(this.rand, this);
      this.drawParticle = __bind(this.drawParticle, this);
      this.draw = __bind(this.draw, this);      this.speed = args._speed;
      this.maxSize = args._maxSize;
      this.canvas = args._canvas;
      this.w = args._w;
      this.h = args._h;
      this.type = args._type;
      this.rect = args._rect;
      this.r = this.rand(this.minSize, this.maxSize);
      this.dx = this.rand(-this.speed, this.speed);
      this.dy = this.rand(-this.speed, this.speed);
      null;
    }

    ParticleCard.prototype.draw = function() {
      switch (this.type) {
        case 0:
          this.canvas.beginPath();
          this.canvas.fillStyle = 'rgba(255,255,255,' + this.rColour + ')';
          this.canvas.arc(this.x, this.y, this.r, 0, Math.PI * 2, true);
          this.canvas.closePath();
          this.canvas.fill();
          break;
        case 1:
          this.drawParticle(this.x, this.y, this.r, 'rgba(247,234,155,' + this.rColour.toFixed(2) + ')', 'rgba(255,204,0,0)');
      }
      if (!this.fading) {
        this.rColour -= .005 * this.mult;
      }
      return null;
    };

    ParticleCard.prototype.drawParticle = function(x, y, radius, color1, color2) {
      this.gradient = this.canvas.createRadialGradient(x, y, 0, x, y, radius);
      this.gradient.addColorStop(0, color1);
      this.gradient.addColorStop(1, color2);
      this.canvas.fillStyle = this.gradient;
      this.canvas.fillRect(x - radius, y - radius, radius * 2, radius * 2);
      return null;
    };

    ParticleCard.prototype.rand = function(low, high) {
      if (low == null) {
        low = 0;
      }
      if (high == null) {
        high = 1;
      }
      return ((Math.random() * (high - low)) + low) % high;
    };

    ParticleCard.prototype.move = function() {
      this.x += this.dx;
      this.y -= this.dy;
      if (this.rColour < 0 || this.rColour > this.alpha) {
        this.mult *= -1;
      }
      if ((this.x > this.rect.w + this.rect.x) || (this.x < this.rect.x) || (this.y > this.rect.h + this.rect.y) || (this.y < this.rect.y)) {
        this.fadeOut();
      }
      return null;
    };

    ParticleCard.prototype.reset = function() {
      this.x = this.rand((this.rect.w / 2 + this.rect.x) - 150, (this.rect.w / 2 + this.rect.x) + 150);
      this.y = this.rand((this.rect.h / 2 + this.rect.y) - 250, (this.rect.h / 2 + this.rect.y) + 250);
      this.dx = this.rand(-this.speed, this.speed);
      this.dy = this.rand(-this.speed, this.speed);
      this.r = this.rand(this.minSize, this.maxSize);
      this.alpha = 1 - MathUtils.map(this.r, this.minSize, this.maxSize, 0, 1);
      this.rColour = this.alpha;
      return null;
    };

    ParticleCard.prototype.fadeOut = function() {
      this.fading = true;
      this.rColour -= 0.005;
      if (this.rColour <= 0) {
        this.fading = false;
        this.reset();
      }
      return null;
    };

    return ParticleCard;

  })();

  Particles = (function(_super) {

    __extends(Particles, _super);

    function Particles() {
      this.onResize = __bind(this.onResize, this);
      this.dispose = __bind(this.dispose, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return Particles.__super__.constructor.apply(this, arguments);
    }

    Particles.prototype.tagName = 'canvas';

    Particles.prototype.className = 'particles';

    Particles.prototype.particles = null;

    Particles.prototype.paused = true;

    Particles.prototype.speed = .6;

    Particles.prototype.pType = 0;

    Particles.prototype.pMaxSize = 2;

    Particles.prototype.rectangle = null;

    Particles.prototype.nParticles = 150;

    Particles.prototype.initialize = function(pType, pMaxSize, nParticles, rectangle) {
      if (pType != null) {
        this.pType = pType;
      }
      if (pMaxSize != null) {
        this.pMaxSize = pMaxSize;
      }
      if (nParticles != null) {
        this.nParticles = nParticles;
      }
      if (rectangle != null) {
        this.rectangle = rectangle;
      } else {
        this.rectangle = {
          x: 0,
          y: $(window).innerHeight() / 3,
          w: $(window).innerWidth(),
          h: $(window).innerHeight() / 3
        };
      }
      Particles.__super__.initialize.call(this);
      return null;
    };

    Particles.prototype.init = function() {
      var i, p, _i, _ref;
      if (!Modernizr.canvas) {
        return;
      }
      this.$el[0].width = $(window).innerWidth();
      this.$el[0].height = $(window).innerHeight();
      this.ctx = this.$el[0].getContext('2d');
      this.particles = [];
      for (i = _i = 0, _ref = this.nParticles; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.pType === 0) {
          p = new Particle({
            _canvas: this.ctx,
            _w: this.$el[0].width,
            _h: this.$el[0].height,
            _maxSize: this.pMaxSize,
            _speed: this.speed,
            _type: this.pType,
            _rect: this.rectangle
          });
          p.reset();
        } else if (this.pType === 1) {
          p = new ParticleCard({
            _canvas: this.ctx,
            _w: this.$el[0].width,
            _h: this.$el[0].height,
            _maxSize: this.pMaxSize,
            _speed: this.speed,
            _type: this.pType,
            _rect: this.rectangle
          });
          p.reset();
        }
        this.particles.push(p);
      }
      this.paused = false;
      return null;
    };

    Particles.prototype.onEnterFrame = function() {
      var p, _i, _len, _ref;
      if (!Modernizr.canvas) {
        return;
      }
      this.clear();
      _ref = this.particles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.move();
        p.draw();
      }
      return null;
    };

    Particles.prototype.dispose = function() {
      return null;
    };

    Particles.prototype.clear = function() {
      this.ctx.clearRect(0, 0, this.$el[0].width, this.$el[0].height);
      return null;
    };

    Particles.prototype.rand = function(low, high) {
      if (low == null) {
        low = 0;
      }
      if (high == null) {
        high = 1;
      }
      return ((Math.random() * (high - low)) + low) % high;
    };

    Particles.prototype.onResize = function() {
      if (!Modernizr.canvas) {
        return;
      }
      this.$el[0].width = $(window).innerWidth();
      this.$el[0].height = $(window).innerHeight();
      return null;
    };

    return Particles;

  })(Abstract);

  Controller = (function(_super) {

    __extends(Controller, _super);

    function Controller() {
      this.pauseState = __bind(this.pauseState, this);
      this.playState = __bind(this.playState, this);
      this.progress = __bind(this.progress, this);
      this.toggleVideo = __bind(this.toggleVideo, this);
      this.init = __bind(this.init, this);      return Controller.__super__.constructor.apply(this, arguments);
    }

    Controller.prototype.className = 'controller';

    Controller.prototype.progressBar = null;

    Controller.prototype.scruber = null;

    Controller.prototype.bg = null;

    Controller.prototype.border = null;

    Controller.prototype.pausePlayButton = null;

    Controller.prototype.init = function() {
      var _this = this;
      this.pausePlayButton = new PlayPause;
      this.pausePlayButton.on('clicked', this.toggleVideo);
      this.addChild(this.pausePlayButton);
      this.progressBar = new Abstract;
      this.progressBar.dispose - function() {
        return null;
      };
      this.addChild(this.progressBar);
      this.progressBar.$el.addClass('progressBar');
      this.border = new SSAsset('interface', 'video_progress_border');
      this.progressBar.addChild(this.border);
      this.bg = new SSAsset('interface', 'video_progress_background');
      this.progressBar.addChild(this.bg);
      this.scruber = new SSAsset('interface', 'video_progress_scrubber');
      this.progressBar.addChild(this.scruber);
      this.width = parseInt(this.scruber.$el.css('width'));
      return null;
    };

    Controller.prototype.toggleVideo = function() {
      this.trigger('toggleVideo');
      return null;
    };

    Controller.prototype.progress = function(val) {
      this.scruber.$el.css({
        width: this.width * val
      });
      return null;
    };

    Controller.prototype.playState = function() {
      this.pausePlayButton.playState();
      return null;
    };

    Controller.prototype.pauseState = function() {
      this.pausePlayButton.pauseState();
      return null;
    };

    return Controller;

  })(Abstract);

  PlayPause = (function(_super) {

    __extends(PlayPause, _super);

    function PlayPause() {
      this.playState = __bind(this.playState, this);
      this.pauseState = __bind(this.pauseState, this);
      this.dispose = __bind(this.dispose, this);
      this.toggle = __bind(this.toggle, this);
      this.init = __bind(this.init, this);      return PlayPause.__super__.constructor.apply(this, arguments);
    }

    PlayPause.prototype.className = 'playPauseButton';

    PlayPause.prototype.asset = null;

    PlayPause.prototype.playing = true;

    PlayPause.prototype.init = function() {
      this.asset = new SSAsset('interface', 'button_play');
      this.addChild(this.asset);
      this.$el.addClass('btanimated');
      this.$el.bind('click', this.toggle);
      return null;
    };

    PlayPause.prototype.toggle = function() {
      if (this.playing) {
        this.pauseState();
      } else {
        this.playState();
      }
      this.trigger('clicked');
      return null;
    };

    PlayPause.prototype.dispose = function() {
      return null;
    };

    PlayPause.prototype.pauseState = function() {
      this.asset.changeState('button_pause');
      this.playing = false;
      return null;
    };

    PlayPause.prototype.playState = function() {
      this.asset.changeState('button_play');
      this.playing = true;
      return null;
    };

    return PlayPause;

  })(Abstract);

  VideoPlayer = (function(_super) {

    __extends(VideoPlayer, _super);

    function VideoPlayer() {
      this.dispose = __bind(this.dispose, this);
      this.onClose = __bind(this.onClose, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.show = __bind(this.show, this);
      this.videoEnded = __bind(this.videoEnded, this);
      this.resume = __bind(this.resume, this);
      this.pause = __bind(this.pause, this);
      this.toggleVideo = __bind(this.toggleVideo, this);
      this.getLocalisedVideo = __bind(this.getLocalisedVideo, this);
      this.init = __bind(this.init, this);
      this.changeView = __bind(this.changeView, this);      return VideoPlayer.__super__.constructor.apply(this, arguments);
    }

    VideoPlayer.prototype.className = 'videoPlayer';

    VideoPlayer.prototype.videoElement = null;

    VideoPlayer.prototype.controller = null;

    VideoPlayer.prototype.videoPaused = true;

    VideoPlayer.prototype.changeView = function() {
      return null;
    };

    VideoPlayer.prototype.init = function() {
      this.videoElement = $('<video/>');
      this.videoElement.attr({
        'src': this.getLocalisedVideo()
      });
      this.addChild(this.videoElement);
      this.addChild($('<img src="/img/home/pix.gif" style="position:absolute;top:0;left:0;width:100%;height:100%;"/>'));
      this.controller = new Controller;
      this.controller.on('toggleVideo', this.toggleVideo);
      this.addChild(this.controller);
      this.controller.$el.find(".playPauseButton").css({
        "-webkit-transform": "scale(0.6,0.6)"
      });
      this.$el.css({
        opacity: 0
      });
      this.addCloseButton();
      this.closeBtn.$el.bind("click", this.onClose);
      return null;
    };

    VideoPlayer.prototype.getLocalisedVideo = function() {
      var country, locale;
      locale = (navigator.language || navigator.userLanguage).toLowerCase();
      country = geoip_country_code().toLowerCase();
      switch (country) {
        case 'gb':
          locale = 'gb';
          break;
        case 'au':
        case 'nz':
          locale = 'au';
          break;
        case 'es':
          locale = 'us';
      }
      switch (locale) {
        case 'pt':
          return '/videos/bubbles_pt.webm';
        case 'es':
          return '/videos/bubbles_es.webm';
        case 'de':
          return '/videos/bubbles_de.webm';
        case 'dk':
          return '/videos/bubbles_dk.webm';
        case 'fr':
          return '/videos/bubbles_fr.webm';
        case 'it':
          return '/videos/bubbles_it.webm';
        case 'nl':
          return '/videos/bubbles_nl.webm';
        case 'no':
          return '/videos/bubbles_no.webm';
        case 'gb':
          return '/videos/bubbles_en-gb.webm';
        case 'au':
          return '/videos/bubbles_au.webm';
        default:
          return '/videos/bubbles_en.webm';
      }
      return '/videos/bubbles_en.webm';
    };

    VideoPlayer.prototype.toggleVideo = function() {
      if (this.videoPaused) {
        this.videoPaused = false;
        this.videoElement[0].play();
      } else {
        this.videoPaused = true;
        this.videoElement[0].pause();
      }
      return null;
    };

    VideoPlayer.prototype.pause = function() {
      this.videoElement[0].removeEventListener("ended", this.videoEnded, false);
      this.videoPaused = true;
      this.videoElement[0].pause();
      this.controller.playState();
      VideoPlayer.__super__.pause.call(this);
      return null;
    };

    VideoPlayer.prototype.resume = function() {
      this.videoPaused = false;
      this.videoElement[0].play();
      this.controller.pauseState();
      this.videoElement[0].addEventListener("ended", this.videoEnded, false);
      VideoPlayer.__super__.resume.call(this);
      return null;
    };

    VideoPlayer.prototype.videoEnded = function(e) {
      this.videoElement[0].src = "";
      this.onClose();
      return null;
    };

    VideoPlayer.prototype.show = function(anim, callback, time, ease) {
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      if (time == null) {
        time = 400;
      }
      if (ease == null) {
        ease = "linear";
      }
      this.$el.css({
        display: "block"
      });
      VideoPlayer.__super__.show.call(this, anim, callback, time, ease);
      this.resume();
      return null;
    };

    VideoPlayer.prototype.onEnterFrame = function() {
      this.controller.progress(this.videoElement[0].currentTime / this.videoElement[0].duration);
      return null;
    };

    VideoPlayer.prototype.onClose = function() {
      var _this = this;
      SoundController.send("trailer_end");
      this.oz().appView.area.content.$el.css({
        display: "inline"
      });
      this.oz().appView.area.content.show(true);
      this.oz().appView.logo.showGoogleLogos();
      this.oz().appView.footer.mainMenu.show(true);
      this.oz().appView.footer.showShare();
      this.pause();
      this.hide(true, function() {
        return _this.oz().appView.wrapper.remove(_this);
      });
      return null;
    };

    VideoPlayer.prototype.dispose = function() {
      this.closeBtn.$el.unbind("click", this.onClose);
      this.controller.off('toggleVideo', this.toggleVideo);
      return null;
    };

    return VideoPlayer;

  })(AbstractScene);

  RainDrops = (function(_super) {

    __extends(RainDrops, _super);

    function RainDrops() {
      return RainDrops.__super__.constructor.apply(this, arguments);
    }

    RainDrops.prototype.id = "raindrops";

    RainDrops.prototype.tagName = 'div';

    RainDrops.prototype.container = null;

    RainDrops.prototype.topLeft = null;

    RainDrops.prototype.topRight = null;

    RainDrops.prototype.bottomLeft = null;

    RainDrops.prototype.bottomRight = null;

    RainDrops.prototype.init = function() {
      this.container = $(this.el);
      this.container.css({
        width: "100%",
        height: "100%",
        position: "absolute",
        top: 0,
        left: 0
      });
      this.topLeft = $("<div id='drops_overlay1'></div>");
      this.topLeft.css({
        position: "absolute",
        width: 792,
        height: 392,
        top: 0,
        left: 0,
        background: "url('/models/textures/drops_tl.png')"
      });
      this.topRight = $("<div id='drops_overlay2'></div>");
      this.topRight.css({
        position: "absolute",
        width: 491,
        height: 492,
        top: 0,
        right: 0,
        background: "url('/models/textures/drops_tr.png')"
      });
      this.bottomLeft = $("<div id='drops_overlay3'></div>");
      this.bottomLeft.css({
        position: "absolute",
        width: 697,
        height: 543,
        bottom: 0,
        left: 0,
        background: "url('/models/textures/drops_bl.png')"
      });
      this.bottomRight = $("<div id='drops_overlay4'></div>");
      this.bottomRight.css({
        position: "absolute",
        width: 291,
        height: 286,
        bottom: 0,
        right: 0,
        background: "url('/models/textures/drops_br.png')"
      });
      this.container.append(this.topLeft);
      this.container.append(this.topRight);
      this.container.append(this.bottomLeft);
      this.container.append(this.bottomRight);
      return null;
    };

    return RainDrops;

  })(Abstract);

  ShareBox = (function(_super) {

    __extends(ShareBox, _super);

    function ShareBox() {
      this.dispose = __bind(this.dispose, this);
      this.getFloodlight = __bind(this.getFloodlight, this);
      this.onShare = __bind(this.onShare, this);
      this.onBackClick = __bind(this.onBackClick, this);
      this.onLinkClick = __bind(this.onLinkClick, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return ShareBox.__super__.constructor.apply(this, arguments);
    }

    ShareBox.prototype.className = "shareContainer";

    ShareBox.prototype.template = "sharebox";

    ShareBox.prototype.iconsContainer = null;

    ShareBox.prototype.shareLinkCont = null;

    ShareBox.prototype.linkIcon = null;

    ShareBox.prototype.callback = null;

    ShareBox.prototype.shareType = null;

    ShareBox.prototype.initialize = function(title, sub, back, backCall, link, type) {
      this.templateVars = {
        title: title,
        sub: sub,
        link: link,
        shareBack: back,
        shareLegal: this.oz().locale.get('shareBoxExpiry')
      };
      this.shareType = type;
      this.callback = backCall;
      ShareBox.__super__.initialize.call(this);
      return null;
    };

    ShareBox.prototype.init = function() {
      var shareBackBtn,
        _this = this;
      this.iconsContainer = this.$el.find('.shareIconsRow');
      if ((this.oz().locale.lang).indexOf("zh-") === 0) {
        this.iconsContainer.append("<button_renren /><button_weibo />");
      } else {
        this.iconsContainer.append("<button_google /><button_facebook /><button_twitter />");
      }
      this.iconsContainer.children().each(function(index, value) {
        var shareButton;
        shareButton = new SSAsset('interface', $(value)[0].tagName.toLowerCase());
        shareButton.addClass('shareIcon');
        shareButton.$el.attr("id", $(value)[0].tagName.toLowerCase());
        _this.iconsContainer.append(shareButton.$el);
        shareButton.$el.css({
          width: "" + (parseInt(shareButton.$el.css('width')) + 2) + "px"
        });
        shareButton.$el.bind("click", _this.onShare);
        return $(value).remove();
      });
      this.shareLinkCont = this.$el.find('.shareLinkContainer').find('.abstractbutton');
      this.linkIcon = new SSAsset('interface', 'link_icon');
      this.linkIcon.$el.bind('click', this.onLinkClick);
      this.linkIcon.$el.addClass('shareLinkIcon');
      this.shareLinkCont.prepend(this.linkIcon.$el);
      shareBackBtn = this.$el.find('.shareBack');
      shareBackBtn.bind('click', this.onBackClick);
      if (navigator.appVersion.indexOf("Win") !== -1) {
        shareBackBtn.css({
          "padding": "7px 20px 8px 20px"
        });
        this.shareLinkCont.css({
          "padding": "3px 12px 7px 12px"
        });
      }
      return null;
    };

    ShareBox.prototype.onLinkClick = function() {
      Analytics.track(this.shareType + '_open_preview');
      window.open(this.shareLinkCont.find('input').val());
      return null;
    };

    ShareBox.prototype.onBackClick = function() {
      Analytics.track('cutout_take_another');
      if (typeof this.callback === "function") {
        this.callback();
      }
      this.trigger('removeShareBox');
      return null;
    };

    ShareBox.prototype.onShare = function(item) {
      switch (item.currentTarget.id) {
        case "button_facebook":
          Analytics.track(this.shareType + "_share_fb", this.getFloodlight("Facebook"));
          Share.facebook(this.templateVars.link, this.oz().locale.get("share_" + this.shareType + "_facebook_default_message"));
          break;
        case "button_google":
          Analytics.track(this.shareType + "_share_gplus", this.getFloodlight("Google"));
          Share.plus(this.templateVars.link);
          break;
        case "button_twitter":
          Analytics.track(this.shareType + "_share_twitter", this.getFloodlight("Twitter"));
          Share.twitter(this.templateVars.link, this.oz().locale.get("share_" + this.shareType + "_facebook_default_message"));
          break;
        case "button_renren":
          Analytics.track(this.shareType + "_share_renren");
          Share.renren(this.templateVars.link);
          break;
        case "button_weibo":
          Analytics.track(this.shareType + "_share_weibo");
          Share.weibo(this.templateVars.link);
      }
      return null;
    };

    ShareBox.prototype.getFloodlight = function(vendor) {
      switch (this.shareType) {
        case 'zoe':
          return "Google_OZ_Zeotrope_SocialClick_" + vendor;
        case 'cutout':
          return "Google_OZ_HoleInFace_SocialClick_" + vendor;
      }
      return null;
    };

    ShareBox.prototype.dispose = function() {
      return null;
    };

    return ShareBox;

  })(Abstract);

  SSAsset = (function(_super) {

    __extends(SSAsset, _super);

    function SSAsset() {
      this.dispose = __bind(this.dispose, this);
      this.center = __bind(this.center, this);
      this.changeState = __bind(this.changeState, this);
      this.removeClass = __bind(this.removeClass, this);
      this.addClass = __bind(this.addClass, this);
      this.css = __bind(this.css, this);
      this.out = __bind(this.out, this);
      this.over = __bind(this.over, this);
      this.init = __bind(this.init, this);      return SSAsset.__super__.constructor.apply(this, arguments);
    }

    SSAsset.prototype.ss = null;

    SSAsset.prototype.from = null;

    SSAsset.prototype.asset = null;

    SSAsset.prototype.initialize = function(from, asset) {
      this.from = from;
      this.asset = asset;
      return SSAsset.__super__.initialize.call(this);
    };

    SSAsset.prototype.init = function() {
      var css, h, w, x, y;
      this.ss = this.oz().ss.get(this.from, this.asset);
      x = Math.round(this.ss.x / 2) - 1;
      y = Math.round(this.ss.y / 2);
      w = Math.round(this.ss.width / 2);
      h = Math.round(this.ss.height / 2);
      css = {
        width: w,
        height: h,
        'background-image': "url(" + this.ss.image + ")",
        'background-size': "" + this.ss.fullSize[0] + "px " + this.ss.fullSize[1] + "px",
        'background-position': "-" + x + "px -" + y + "px"
      };
      if (window.devicePixelRatio === 2) {
        css['background-image'] = "-webkit-image-set(url(" + this.ss.image + ") 1x, url(" + this.ss.image2x + ") 2x)";
      }
      this.$el.css(css);
      this.render();
      return null;
    };

    SSAsset.prototype.over = function(over) {
      this.changeState(over);
      return null;
    };

    SSAsset.prototype.out = function() {
      var x, y;
      x = Math.round(this.ss.x / 2) - 1;
      y = Math.round(this.ss.y / 2);
      /*x = @ss.x
      y = @ss.y
      */

      this.$el.css({
        'background-position': "" + (-x) + "px " + (-y) + "px"
      });
      return null;
    };

    SSAsset.prototype.css = function(params) {
      this.$el.css(params);
      return null;
    };

    SSAsset.prototype.addClass = function(clazz) {
      this.$el.addClass(clazz);
      return null;
    };

    SSAsset.prototype.removeClass = function(clazz) {
      this.$el.removeClass(clazz);
      return null;
    };

    SSAsset.prototype.changeState = function(state) {
      var params, x, y;
      params = this.oz().ss.get(this.from, state);
      x = Math.round(params.x / 2) - 1;
      y = Math.round(params.y / 2);
      /*x = params.x
      y = params.y
      */

      this.$el.css({
        'background-position': "" + (-x) + "px " + (-y) + "px"
      });
      return null;
    };

    SSAsset.prototype.center = function() {
      var x;
      x = Math.round(this.ss.width / 4);
      this.$el.css({
        'position': 'absolute',
        'left': '50%',
        'margin-left': "" + (-x) + "px"
      });
      return null;
    };

    SSAsset.prototype.dispose = function() {
      return null;
    };

    return SSAsset;

  })(Abstract);

  SubLoader = (function(_super) {

    __extends(SubLoader, _super);

    function SubLoader() {
      this.dispose = __bind(this.dispose, this);
      this.activateMouseInteraction = __bind(this.activateMouseInteraction, this);
      this.hideCard = __bind(this.hideCard, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.onClick = __bind(this.onClick, this);
      this.onMouseMove = __bind(this.onMouseMove, this);
      this.update = __bind(this.update, this);
      this.showError = __bind(this.showError, this);
      this.addSpinner = __bind(this.addSpinner, this);
      this.init = __bind(this.init, this);      return SubLoader.__super__.constructor.apply(this, arguments);
    }

    SubLoader.prototype.className = "subLoader";

    SubLoader.prototype.container = null;

    SubLoader.prototype.square = null;

    SubLoader.prototype.visible = false;

    SubLoader.prototype.angleX = 0;

    SubLoader.prototype.angleY = 0;

    SubLoader.prototype.error = null;

    SubLoader.prototype.init = function() {
      this.container = new Abstract().setElement("<div class='subLoaderContainer'></div>");
      this.container.dispose = function() {
        return null;
      };
      this.addChild(this.container);
      this.card = new LoadingCard;
      this.addChild(this.card);
      this.addSpinner();
      this.hide(false);
      return null;
    };

    SubLoader.prototype.addSpinner = function() {
      this.spinner = new Sonic({
        width: 50,
        height: 50,
        stepsPerFrame: 1,
        trailLength: 1,
        pointDistance: .02,
        fps: 30,
        fillColor: '#FFFFFF',
        step: function(point, index) {
          this._.beginPath();
          this._.moveTo(point.x, point.y);
          this._.arc(point.x, point.y, index * 3, 0, Math.PI * 2, false);
          this._.closePath();
          return this._.fill();
        },
        path: [['arc', 25, 25, 10, 0, 360]]
      });
      this.container.addChild(this.spinner.canvas);
      this.container.$el.css({
        "display": "none"
      });
      return null;
    };

    SubLoader.prototype.showError = function() {
      var bottom, header;
      this.container.$el.css({
        "display": "none"
      });
      header = new SSAsset('interface', 'pause_top');
      header.$el.css({
        'margin': '0 auto 15px auto'
      });
      this.error = $("<div class='subLoaderError'><div class='shareErrorCopy'>" + (this.oz().locale.get("share_error_message")) + "</div></div>");
      this.error.prepend(header.$el);
      this.addChild(this.error);
      bottom = new SSAsset('interface', 'pause_bottom');
      this.error.append(bottom.$el);
      bottom.$el.css({
        'margin': '20px auto'
      });
      return this.$el.bind('click', this.hide);
    };

    SubLoader.prototype.update = function(perc) {
      this.card.update(perc);
      return null;
    };

    SubLoader.prototype.onMouseMove = function(event) {
      var x, y;
      if (this.paused) {
        return;
      }
      x = (event.clientX - ($(window).innerWidth() / 2)) / 40;
      y = (event.clientY - ($(window).innerHeight() / 2)) / 35;
      this.angleX += (x - this.angleX) * .075;
      this.angleY += (y - this.angleY) * .075;
      this.angleX = this.angleX % 360;
      this.angleY = this.angleY % 360;
      this.card.transform(this.angleX, this.angleY);
      return null;
    };

    SubLoader.prototype.onClick = function(event) {
      this.card.toggleTopple();
      return null;
    };

    SubLoader.prototype.show = function(spin) {
      if (spin == null) {
        spin = false;
      }
      SubLoader.__super__.show.call(this, true, null, 400, "linear");
      this.paused = false;
      $(".scene3d").css({
        "-webkit-filter": "blur(10px)"
      });
      if (!spin) {
        this.spinner.stop();
        this.card.$el.css({
          "display": ""
        });
        this.container.$el.css({
          "display": "none"
        });
        this.card.animateIn(this.activateMouseInteraction);
      } else {
        this.spinner.play();
        this.card.$el.css({
          "display": "none"
        });
        this.container.$el.css({
          "display": ""
        });
      }
      this.oz().appView.logo.disable();
      this.oz().appView.showMap(false);
      this.oz().appView.footer.mainMenu.hide(true);
      this.visible = true;
      return null;
    };

    SubLoader.prototype.hide = function(anim, callback, time, ease, hide) {
      var _ref;
      if (anim == null) {
        anim = true;
      }
      if (callback == null) {
        callback = null;
      }
      if (time == null) {
        time = 400;
      }
      if (ease == null) {
        ease = "linear";
      }
      if (hide == null) {
        hide = true;
      }
      this.$el.unbind('click', this.hide);
      if ((_ref = this.error) != null) {
        _ref.remove();
      }
      SubLoader.__super__.hide.call(this, anim, callback, time, ease, hide);
      $(".scene3d").css({
        "-webkit-filter": "blur(0px)"
      });
      this.$el.css({
        "background-color": "rgba(0,0,0,0.6)"
      });
      this.visible = false;
      return null;
    };

    SubLoader.prototype.hideCard = function() {
      var d, delay,
        _this = this;
      this.card.animateOut(null);
      $(window).unbind('mousemove', this.onMouseMove);
      $(window).unbind('click', this.onClick);
      this.paused = true;
      this.$el.css({
        "background-color": "rgba(0,0,0,1)"
      });
      delay = function(ms, func) {
        return setTimeout(func, ms);
      };
      d = Number(this.$el.css("opacity")) * 1000;
      delay(d, function() {
        return _this.trigger("END_LOADING");
      });
      return null;
    };

    SubLoader.prototype.activateMouseInteraction = function() {
      $(window).bind('mousemove', this.onMouseMove);
      $(window).bind('click', this.onClick);
      return null;
    };

    SubLoader.prototype.dispose = function() {
      return null;
    };

    return SubLoader;

  })(Abstract);

  WebCam = (function() {

    WebCam.prototype.stream = null;

    WebCam.prototype.videoDom = null;

    WebCam.prototype.canvas = null;

    WebCam.prototype.ctx = null;

    function WebCam() {
      this.dispose = __bind(this.dispose, this);
      this.flipImage = __bind(this.flipImage, this);
      this.dom = __bind(this.dom, this);
      this.get = __bind(this.get, this);
      this.onUserMediaError = __bind(this.onUserMediaError, this);
      this.onUserMediaSuccess = __bind(this.onUserMediaSuccess, this);
      this.init = __bind(this.init, this);      _.extend(this, Backbone.Events);
      null;
    }

    WebCam.prototype.init = function() {
      this.canvas = document.createElement('canvas');
      this.canvas.width = 512;
      this.canvas.height = this.canvas.width / 1.333333333;
      this.ctx = this.canvas.getContext('2d');
      this.ctx.scale(-1, 1);
      this.videoDom = $('<video style="display:none;" autoplay="true"/>');
      $('body').prepend(this.videoDom);
      if (!navigator.getUserMedia) {
        this.onUserMediaError();
        return;
      }
      if (this.stream == null) {
        navigator.getUserMedia({
          video: true,
          audio: false
        }, this.onUserMediaSuccess, this.onUserMediaError);
      } else {
        this.onUserMediaSuccess();
      }
      return null;
    };

    WebCam.prototype.onUserMediaSuccess = function(s) {
      if (s == null) {
        s = null;
      }
      this.stream = s || this.stream;
      this.trigger('CAM_READY');
      return null;
    };

    WebCam.prototype.onUserMediaError = function() {
      this.trigger('CAM_FAIL');
      this.dispose();
      return null;
    };

    WebCam.prototype.get = function() {
      var src;
      if (this.stream == null) {
        this.init();
        return;
      }
      src = window.URL.createObjectURL(this.stream);
      this.dom().src = src;
      return src;
    };

    WebCam.prototype.dom = function() {
      return this.videoDom.get()[0];
    };

    WebCam.prototype.flipImage = function() {
      if (!this.canvas) {
        return;
      }
      this.ctx.drawImage(this.dom(), -this.canvas.width, 0);
      return this.canvas;
    };

    WebCam.prototype.dispose = function() {
      if (this.stream && this.stream.stop) {
        this.stream.stop();
      }
      this.stream = null;
      this.canvas = null;
      return null;
    };

    return WebCam;

  })();

  Copyright = (function(_super) {

    __extends(Copyright, _super);

    function Copyright() {
      this.init = __bind(this.init, this);      return Copyright.__super__.constructor.apply(this, arguments);
    }

    Copyright.prototype.className = 'copyright';

    Copyright.prototype.init = function() {
      this.$el.empty();
      this.$el.append("<a class='button_alpha_enabled' href='http://disney.com' target='_blank'>" + this.oz().locale.get('copyright') + "</a>");
      return null;
    };

    return Copyright;

  })(Abstract);

  Footer = (function(_super) {

    __extends(Footer, _super);

    function Footer() {
      this.disableOver = __bind(this.disableOver, this);
      this.hideMenu = __bind(this.hideMenu, this);
      this.showMenu = __bind(this.showMenu, this);
      this.showCC = __bind(this.showCC, this);
      this.showShare = __bind(this.showShare, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.init = __bind(this.init, this);      return Footer.__super__.constructor.apply(this, arguments);
    }

    Footer.prototype.id = 'footer';

    Footer.prototype.shareMenu = null;

    Footer.prototype.mainMenu = null;

    Footer.prototype.ratings = null;

    Footer.prototype.cr = null;

    Footer.prototype.init = function() {
      this.shareMenu = new ShareMenu;
      this.addChild(this.shareMenu);
      this.mainMenu = new MainMenu;
      this.addChild(this.mainMenu);
      this.mainMenu.mouseEnabled(false);
      this.mainMenu.hide();
      this.mainMenu.$el.css({
        "display": "none"
      });
      this.ratings = new Ratings;
      this.addChild(this.ratings);
      this.cr = new Copyright;
      this.cr.mouseEnabled(false);
      this.addChild(this.cr);
      this.cr.hide();
      return null;
    };

    /*
        setState: (state) =>
    
            switch state
                when 0
                    @oz.appView().logo.show()
                    @oz.appView().logo.showGoogleLogos()
    
                    @ratings.show true
                    
                    @mainMenu.hide true, =>
                        @mainMenu.$el.css { "display" : "none" }
    
                    @shareMenu
    
    
                    @
                when 1
                    @oz.appView().logo.hideGoogleLogos()
                    
                    @mainMenu.$el.css { "display" : "" }
                    @mainMenu.show true
    
                    @
    */


    Footer.prototype.show = function(animated) {
      this.mainMenu.$el.css({
        "display": ""
      });
      Footer.__super__.show.call(this, animated);
      return null;
    };

    Footer.prototype.hide = function(animated) {
      var _this = this;
      Footer.__super__.hide.call(this, animated, function() {
        return _this.mainMenu.$el.css({
          "display": "none"
        });
      });
      return null;
    };

    Footer.prototype.showShare = function() {
      this.cr.hide();
      this.cr.mouseEnabled(false);
      this.shareMenu.$el.css({
        "display": ""
      });
      this.shareMenu.show(true);
      return null;
    };

    Footer.prototype.showCC = function() {
      this.remove(this.ratings);
      this.mainMenu.show();
      this.cr.mouseEnabled(true);
      this.cr.show();
      this.shareMenu.hide();
      this.shareMenu.$el.css({
        "display": "none"
      });
      return null;
    };

    Footer.prototype.showMenu = function(mouseEnabled) {
      if (mouseEnabled == null) {
        mouseEnabled = false;
      }
      this.remove(this.ratings);
      this.mainMenu.show();
      this.mainMenu.showMenu();
      this.mainMenu.disableMouseMove(mouseEnabled);
      return null;
    };

    Footer.prototype.hideMenu = function() {
      this.mainMenu.hideMenu();
      return null;
    };

    Footer.prototype.disableOver = function(val) {
      this.mainMenu.disableMouseMove(val);
      return null;
    };

    return Footer;

  })(Abstract);

  MainMenu = (function(_super) {

    __extends(MainMenu, _super);

    MainMenu.prototype.template = 'menu';

    MainMenu.prototype.className = "menu";

    MainMenu.prototype.openMenuBtn = null;

    MainMenu.prototype.buttonList = null;

    MainMenu.prototype.opened = false;

    MainMenu.prototype.disableOpen = false;

    function MainMenu() {
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.toggleItem = __bind(this.toggleItem, this);
      this.disableMouseMove = __bind(this.disableMouseMove, this);
      this.onMouseMove = __bind(this.onMouseMove, this);
      this.hideThis = __bind(this.hideThis, this);
      this.showThis = __bind(this.showThis, this);
      this.hideMenu = __bind(this.hideMenu, this);
      this.showMenu = __bind(this.showMenu, this);
      this.toggleMenu = __bind(this.toggleMenu, this);
      this.init = __bind(this.init, this);      this.templateVars = {
        open: this.oz().locale.get('menuOpen'),
        official: this.oz().locale.get('menuOfficial'),
        tech: this.oz().locale.get('menuTech'),
        credits: this.oz().locale.get('menuCredits'),
        terms: this.oz().locale.get('menuTerms'),
        privacy: this.oz().locale.get('menuPrivacy')
      };
      MainMenu.__super__.constructor.call(this);
    }

    MainMenu.prototype.init = function() {
      var _this = this;
      this.buttonList = this.$el.find('.menu_buttons');
      this.openMenuBtn = this.$el.find('.open_menu');
      this.openMenuBtn.find('span').mouseover(this.showMenu);
      return this.$el.find(".button").each(function(index, value) {
        $(value).bind("click", function(event) {
          var deep;
          deep = $(event.currentTarget).attr('deep');
          switch (deep) {
            case "terms":
              Analytics.track('menu_click_terms');
              window.open('/tou.html');
              break;
            case "privacy":
              Analytics.track('menu_click_privacy');
              window.open('/pp.html');
              break;
            case "tech":
              Analytics.track('menu_click_tech');
              window.open('http://www.html5rocks.com/tutorials/casestudies/oz/');
              break;
            case 'official':
              Analytics.track('menu_click_official');
              window.open('/official.html');
              break;
            default:
              Analytics.track('menu_click_credits');
              _this.oz().appView["static"].changePage(deep);
          }
          return SoundController.send("btn_generic_click");
        });
        return $(value).bind("mouseover", function(event) {
          return SoundController.send("btn_generic_over");
        });
      });
    };

    MainMenu.prototype.toggleMenu = function() {
      if (this.disableOpen) {
        return;
      }
      this.toggleItem(this.openMenuBtn);
      this.toggleItem(this.buttonList);
      this.opened = !this.opened;
      if (this.opened) {
        this.oz().appView.showMap(false);
        return this.oz().appView.footer.showShare();
      } else {
        this.oz().appView.showMap();
        return this.oz().appView.footer.showCC();
      }
    };

    MainMenu.prototype.showMenu = function() {
      this.oz().appView.map.hide(false);
      this.hideThis(this.openMenuBtn);
      this.showThis(this.buttonList);
      this.opened = true;
      $('body').unbind('mousemove');
      $('body').bind('mousemove', this.onMouseMove);
      return this.oz().appView.footer.showShare();
    };

    MainMenu.prototype.hideMenu = function() {
      this.oz().appView.showMap();
      this.hideThis(this.openMenuBtn);
      this.hideThis(this.buttonList);
      this.opened = false;
      return $('body').unbind('mousemove');
    };

    MainMenu.prototype.showThis = function(item) {
      item.css({
        "visibility": 'visible'
      });
      return item.stop().animate({
        "opacity": 1
      }, {
        duration: 300
      });
    };

    MainMenu.prototype.hideThis = function(item) {
      var _this = this;
      return item.stop().animate({
        "opacity": 0
      }, {
        duration: 100,
        complete: function() {
          return item.css({
            "visibility": 'hidden'
          });
        }
      });
    };

    MainMenu.prototype.onMouseMove = function(event) {
      if (event.originalEvent.clientY < $(window).innerHeight() - this.$el.height() - 60) {
        $('body').unbind('mousemove', this.onMouseMove);
        return this.toggleMenu();
      }
    };

    MainMenu.prototype.disableMouseMove = function(val) {
      $('body').unbind('mousemove');
      return this.disableOpen = val;
    };

    MainMenu.prototype.toggleItem = function(item) {
      var visible;
      visible = item.css('visibility');
      if (visible === 'hidden') {
        return this.showThis(item);
      } else {
        return this.hideThis(item);
      }
    };

    MainMenu.prototype.show = function(animated) {
      this.$el.css({
        display: ""
      });
      return MainMenu.__super__.show.call(this, animated);
    };

    MainMenu.prototype.hide = function(animated, callback) {
      var _this = this;
      return MainMenu.__super__.hide.call(this, animated, function() {
        if (typeof callback === "function") {
          callback();
        }
        return _this.$el.css({
          display: "none"
        });
      });
    };

    return MainMenu;

  })(Abstract);

  Ratings = (function(_super) {

    __extends(Ratings, _super);

    function Ratings() {
      this.dispose = __bind(this.dispose, this);
      this.init = __bind(this.init, this);      return Ratings.__super__.constructor.apply(this, arguments);
    }

    Ratings.prototype.className = 'ratings';

    Ratings.prototype.mpaa = null;

    Ratings.prototype.init = function() {
      var link,
        _this = this;
      this.mpaa = new SSAsset('interface', 'rating_block');
      this.addChild(this.mpaa);
      this.mpaa.center();
      link = $("<span>" + (this.oz().locale.get('menuRatings')) + "</span>");
      link.addClass('button_alpha_enabled');
      this.$el.append(link);
      return this.$el.bind('click', function() {
        Analytics.track('menu_click_mpaa');
        return window.open(_this.oz().locale.get('menuRatingsLink'));
      });
    };

    Ratings.prototype.dispose = function() {};

    return Ratings;

  })(Abstract);

  ShareMenu = (function(_super) {

    __extends(ShareMenu, _super);

    function ShareMenu() {
      this.toogleSound = __bind(this.toogleSound, this);
      this.disableSound = __bind(this.disableSound, this);
      this.enableSound = __bind(this.enableSound, this);
      this.showSoundButton = __bind(this.showSoundButton, this);
      this.hideSoundButton = __bind(this.hideSoundButton, this);
      this.addWeibo = __bind(this.addWeibo, this);
      this.addRenRen = __bind(this.addRenRen, this);
      this.onLibLoaded = __bind(this.onLibLoaded, this);
      this.rerender = __bind(this.rerender, this);
      this.render = __bind(this.render, this);      return ShareMenu.__super__.constructor.apply(this, arguments);
    }

    ShareMenu.prototype.className = 'share_menu';

    ShareMenu.prototype.soundEnabled = true;

    ShareMenu.prototype.sound_label = "SOUND";

    ShareMenu.prototype.sound_label_on = "ON";

    ShareMenu.prototype.sound_label_off = "OFF";

    ShareMenu.prototype.render = function() {
      if (this.oz().locale.get("sound_button_label") && this.oz().locale.get("sound_button_label") !== "") {
        this.sound_label = this.oz().locale.get("sound_button_label");
      }
      if (this.oz().locale.get("sound_button_on") && this.oz().locale.get("sound_button_on") !== "") {
        this.sound_label_on = this.oz().locale.get("sound_button_on");
      }
      if (this.oz().locale.get("sound_button_off") && this.oz().locale.get("sound_button_off") !== "") {
        this.sound_label_off = this.oz().locale.get("sound_button_off");
      }
      this.sound = $("<div class='sound'>" + this.sound_label + " <span>" + this.sound_label_on + "</span></div>");
      this.sound.bind("mousedown", this.toogleSound);
      this.disableSound();
      this.$el.append(this.sound);
      // return require(["http://platform.twitter.com/widgets.js", "//apis.google.com/js/plusone.js"], this.onLibLoaded);
    };

    ShareMenu.prototype.rerender = function() {
      // if (this.oz().locale.lang.indexOf("zh") === -1) {
      //   this.$googleBtn = $('<div/>');
      //   this.$googleBtn.attr({
      //     "id": 'g-plusone',
      //     'class': 'g-plusone',
      //     'data-size': 'medium'
      //   });
      //   this.$facebookContainer = $("<div class='facebookShare'></div>");
      //   this.$facebookBtn = $('<iframe/>');
      //   this.$facebookBtn.attr({
      //     'class': 'fb-like',
      //     'src': "//www.facebook.com/plugins/like.php?send=false&layout=button_count&href=" + document.location.origin,
      //     'scrolling': "no",
      //     "frameborder": "0"
      //   });
      //   this.$facebookBtn.css({
      //     'width': '100px'
      //   });
      //   this.$facebookContainer.css({
      //     'margin-left': '20px'
      //   });
      //   this.$twitterContainer = $("<div class='twitterShare'></div>");
      //   this.$twitterBtn = $('<a/>');
      //   this.$twitterBtn.attr({
      //     'class': 'twitter-share-button',
      //     'href': 'https://twitter.com/share',
      //     'data-lang': this.oz().locale.lang,
      //     'data-size': 'small',
      //     'data-hashtags': this.oz().locale.get('seo_twtter_hashtag'),
      //     'data-text': this.oz().locale.get('seo_twtter_default_text'),
      //     'data-via': this.oz().locale.get('seo_twitter_handle')
      //   });
      //   this.$el.prepend(this.$twitterContainer);
      //   this.$twitterContainer.append(this.$twitterBtn);
      //   this.$el.prepend(this.$facebookContainer);
      //   this.$facebookContainer.append(this.$facebookBtn);
      //   this.$el.prepend(this.$googleBtn);
      //   twttr.widgets.load();
      //   if (typeof gapi !== "undefined" && gapi !== null) {
      //     gapi.plusone.render('g-plusone', {
      //       size: "medium",
      //       expandTo: 'top'
      //     });
      //   }
      //   this.$googleBtn.css({
      //     'width': '50px !important'
      //   });
      // } else {
      //   this.addWeibo();
      //   this.addRenRen();
      // }
      // return this.$el.append($("<div class='clearfix'></div>"));
    };

    ShareMenu.prototype.onLibLoaded = function() {
      return this.rerender();
    };

    ShareMenu.prototype.addRenRen = function() {
      var h, k, lk, p, v, w;
      p = [];
      w = 130;
      h = 20;
      lk = {
        url: '' || window.location.href,
        title: '' || document.title,
        description: '',
        image: ''
      };
      for (k in lk) {
        v = lk[k];
        p.push(k + "=" + encodeURIComponent(v || ''));
      }
      this.renren = $("<iframe scrolling=\"no\" frameborder=\"0\" allowtransparency=\"true\" src=\"http://www.connect.renren.com/like/v2?" + (p.join("&")) + "\" style='width:" + w + "px; height:" + h + "px;'/>");
      return this.$el.prepend(this.renren);
    };

    ShareMenu.prototype.addWeibo = function() {
      var k, params, temp, v, _h, _w;
      _w = 72;
      _h = 24;
      params = {
        url: window.location.href,
        type: '2',
        count: '1',
        appkey: '',
        title: '',
        pic: '',
        ralateUid: '',
        language: 'zh_cn',
        rnd: new Date().valueOf()
      };
      temp = [];
      for (k in params) {
        v = params[k];
        temp.push(k + '=' + encodeURIComponent(v || ''));
      }
      this.weibo = $('<iframe class="weibo_share" allowTransparency="true" frameborder="0" scrolling="no" src="http://hits.sinajs.cn/A1/weiboshare.html?' + temp.join('&') + '" width="' + _w + '" height="' + _h + '"/>');
      this.weibo.css({
        "-webkit-transform": "scale(.85)",
        "margin-top": "-2px"
      });
      return this.$el.prepend(this.weibo);
    };

    ShareMenu.prototype.hideSoundButton = function() {
      var _ref;
      return (_ref = this.sound) != null ? _ref.css({
        display: 'none'
      }) : void 0;
    };

    ShareMenu.prototype.showSoundButton = function() {
      var _ref;
      return (_ref = this.sound) != null ? _ref.css({
        display: ''
      }) : void 0;
    };

    ShareMenu.prototype.enableSound = function() {
      var _ref;
      return (_ref = this.sound) != null ? _ref.css({
        opacity: 1,
        visibility: "visible"
      }) : void 0;
    };

    ShareMenu.prototype.disableSound = function() {
      var _ref;
      return (_ref = this.sound) != null ? _ref.css({
        opacity: 0,
        visibility: "hidden"
      }) : void 0;
    };

    ShareMenu.prototype.toogleSound = function() {
      Analytics.track('menu_click_toggle_sound');
      this.soundEnabled = !this.soundEnabled;
      if (this.soundEnabled) {
        SoundController.send("sound_on");
        SoundController.resume(true);
        return this.sound.find("span").html(this.sound_label_on);
      } else {
        this.sound.find("span").html(this.sound_label_off);
        return SoundController.paused(true);
      }
    };

    return ShareMenu;

  })(Abstract);

  BaseLandingOpenings = (function(_super) {

    __extends(BaseLandingOpenings, _super);

    function BaseLandingOpenings() {
      this.dispose = __bind(this.dispose, this);
      this.render = __bind(this.render, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return BaseLandingOpenings.__super__.constructor.apply(this, arguments);
    }

    BaseLandingOpenings.prototype.className = 'staticPage';

    BaseLandingOpenings.prototype.titles = null;

    BaseLandingOpenings.prototype.title = null;

    BaseLandingOpenings.prototype.cta = null;

    BaseLandingOpenings.prototype.dividers = null;

    BaseLandingOpenings.prototype.me = null;

    BaseLandingOpenings.prototype.particles = null;

    BaseLandingOpenings.prototype.withParticles = null;

    BaseLandingOpenings.prototype.initialize = function(title, cta, dividers, me, particles) {
      if (dividers == null) {
        dividers = true;
      }
      if (me == null) {
        me = false;
      }
      if (particles == null) {
        particles = true;
      }
      this.dividers = dividers;
      this.title = title;
      this.cta = cta;
      this.me = me;
      this.withParticles = particles;
      BaseLandingOpenings.__super__.initialize.call(this);
      return null;
    };

    BaseLandingOpenings.prototype.init = function() {
      if (this.withParticles) {
        this.particles = new Particles(0, 10, 150, {
          x: 0,
          y: 0,
          w: $(window).innerWidth(),
          h: $(window).innerHeight()
        });
        this.addChild(this.particles);
      }
      this.titles = new OpeningTitles(this.oz().locale.get(this.title), this.oz().locale.get(this.cta), this.dividers);
      this.addChild(this.titles);
      this.mouseEnabled(this.me);
      return null;
    };

    BaseLandingOpenings.prototype.render = function(callback) {
      this.titles.render(callback);
      return null;
    };

    BaseLandingOpenings.prototype.dispose = function() {
      return null;
    };

    return BaseLandingOpenings;

  })(Abstract);

  Credits = (function(_super) {

    __extends(Credits, _super);

    function Credits() {
      this.dispose = __bind(this.dispose, this);
      this.render = __bind(this.render, this);
      this.getPartner = __bind(this.getPartner, this);
      this.getPerson = __bind(this.getPerson, this);
      this.parse = __bind(this.parse, this);
      this.init = __bind(this.init, this);      return Credits.__super__.constructor.apply(this, arguments);
    }

    Credits.prototype.className = 'staticPage';

    Credits.prototype.template = 'credits';

    Credits.prototype.fluorish = null;

    Credits.prototype.bottom = null;

    Credits.prototype.init = function() {
      this.fluorish = new SSAsset('interface', 'pause_top');
      this.addChild(this.fluorish, 1);
      this.fluorish.$el.css({
        "margin": "0 auto 15px auto"
      });
      this.oz().appView["static"].$el.css({
        "background-color": "rgba(0,0,0,0.8)"
      });
      this.list = JSON.parse(this.oz().baseAssets.get('credits').result);
      this.parse();
      this.bottom = new SSAsset('interface', 'pause_bottom');
      this.addChild(this.bottom);
      this.bottom.$el.css({
        "margin": "17px auto"
      });
      return null;
    };

    Credits.prototype.parse = function() {
      var cont, i, k, v, _i, _ref, _ref1;
      cont = $('<div class="credits_container"/>');
      this.addChild(cont);
      _ref = this.list;
      for (k in _ref) {
        v = _ref[k];
        cont.append(this.getPartner(v.title));
        for (i = _i = 0, _ref1 = v.names.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
          cont.append(this.getPerson(v.names[i].role, v.names[i].name));
        }
      }
      return null;
    };

    Credits.prototype.getPerson = function(role, name) {
      var nameNode, node, roleNode;
      roleNode = "";
      nameNode = $('<div class="name">' + name + '</div>');
      node = $('<div class="person"><div class="space_credits"/><div class="clearfix"></div></div>');
      node.prepend(nameNode);
      if (role !== "") {
        roleNode = $('<div class="role">' + role + '</div>');
        node.prepend(roleNode);
      } else {
        nameNode.css({
          'width': '100%',
          'text-align': 'center'
        });
      }
      return node;
    };

    Credits.prototype.getPartner = function(partner) {
      return $('<div class="title">' + partner + '</div>');
    };

    Credits.prototype.render = function(callback) {
      callback();
      return null;
    };

    Credits.prototype.dispose = function() {
      this.oz().appView["static"].$el.css({
        "background-color": "rgba(0,0,0,0.7)"
      });
      return null;
    };

    return Credits;

  })(Abstract);

  LandingAgree = (function(_super) {

    __extends(LandingAgree, _super);

    function LandingAgree() {
      this.onEnterClick = __bind(this.onEnterClick, this);
      this.clickAgree = __bind(this.clickAgree, this);
      this.enableEnterButton = __bind(this.enableEnterButton, this);
      this.init = __bind(this.init, this);      return LandingAgree.__super__.constructor.apply(this, arguments);
    }

    LandingAgree.prototype.checkBox = null;

    LandingAgree.prototype.mpaa = null;

    LandingAgree.prototype.buttonContainer = null;

    LandingAgree.prototype.buttonEnter = null;

    LandingAgree.prototype.init = function() {
      var bigDividerBottom, bottom, header, topEnding,
        _this = this;
      LandingAgree.__super__.init.call(this);
      this.hide();
      this.mouseEnabled(true);
      /* Header
      */

      header = new Abstract;
      header.dispose = function() {};
      header.$el.addClass('bigDividers');
      /* Dividers
      */

      topEnding = new SSAsset('interface', 'final_end_top');
      header.addChild(topEnding);
      bottom = $('<div class="containerBottom" />');
      bigDividerBottom = new SSAsset('interface', 'landing_bottom');
      bigDividerBottom.$el.css({
        margin: '0 auto 0 auto'
      });
      bottom.append(bigDividerBottom.$el);
      header.$el.insertAfter(this.titles.$el.children()[0]);
      this.titles.header.append(bottom);
      this.titles.fluorish.$el.remove();
      /* Check Box
      */

      this.checkBox = new CheckBox();
      this.checkBox.on('toggled', this.clickAgree);
      this.titles.cta.find('.cta').prepend(this.checkBox.$el);
      this.titles.cta.find('p').addClass('pMargin');
      this.titles.cta.find('p').find('a').attr('href', '/tou.html');
      this.titles.cta.find('p').find('a').click(function(event) {
        event.preventDefault();
        return window.open('/tou.html');
      });
      this.titles.cta.find('p').bind('click', this.clickAgree);
      this.buttonContainer = new Abstract().setElement("<div class='enterButtonContainer'/>");
      this.buttonContainer.dispose = function() {
        return null;
      };
      this.buttonEnter = new SimpleButton("enter", this.oz().locale.get('homeButton'));
      this.buttonContainer.addChild(this.titles.cta.find('.left'));
      this.buttonContainer.addChild(this.buttonEnter.$el);
      this.buttonContainer.addChild(this.titles.cta.find('.right'));
      this.titles.remove(this.titles.diamond);
      this.titles.addChild(this.buttonContainer);
      this.enableEnterButton(false);
      if (this.oz().locale.lang === "ru" || this.oz().locale.lang === "bg" || this.oz().locale.lang === "uk") {
        this.titles.header.css({
          'margin-top': '0'
        });
        bottom.css({
          margin: '-5px auto 0 auto'
        });
      }
      this.show(true);
      return null;
    };

    LandingAgree.prototype.enableEnterButton = function(bool) {
      var _this = this;
      if (bool == null) {
        bool = true;
      }
      if (bool) {
        this.buttonEnter.$el.css({
          cursor: 'pointer'
        });
        this.buttonEnter.on('click', this.onEnterClick);
        this.buttonEnter.on('mouseover', function() {
          return SoundController.send("btn_enter_over");
        });
      } else {
        this.buttonEnter.$el.css({
          cursor: 'default'
        });
        this.buttonEnter.off('click', this.onEnterClick);
        this.buttonEnter.off('mouseover');
      }
      return null;
    };

    LandingAgree.prototype.clickAgree = function(event) {
      if (event) {
        if (event.srcElement.nodeName === "A") {
          return;
        }
      }
      this.checkBox.toggleCheck();
      this.enableEnterButton(this.checkBox.val());
      this.buttonContainer.$el.css({
        'opacity': this.checkBox.val() === true ? 1 : 0.2,
        'pointer-events': this.checkBox.val() === true ? 'visible' : 'none'
      });
      return null;
    };

    LandingAgree.prototype.onEnterClick = function() {
      if (this.checkBox.val() === false) {
        return;
      }
      Analytics.track('click_enter');
      SoundController.send('landing_end');
      this.trigger('agreedEnter');
      return null;
    };

    return LandingAgree;

  })(BaseLandingOpenings);

  LandingFinal = (function(_super) {

    __extends(LandingFinal, _super);

    function LandingFinal() {
      this.onTrailerClick = __bind(this.onTrailerClick, this);
      this.onResetClick = __bind(this.onResetClick, this);
      this.init = __bind(this.init, this);      return LandingFinal.__super__.constructor.apply(this, arguments);
    }

    LandingFinal.prototype.checkBox = null;

    LandingFinal.prototype.init = function() {
      var bigDividerBottom, bottom, buttonContainer, buttonReset, buttonTrailer, contFluf, fluf, header, topEnding,
        _this = this;
      LandingFinal.__super__.init.call(this);
      this.mouseEnabled(true);
      header = new Abstract;
      header.dispose = function() {};
      header.$el.addClass('bigDividers');
      header.$el.css({});
      /* Dividers
      */

      topEnding = new SSAsset('interface', 'final_end_top');
      bottom = $('<div class="containerBottom" />');
      bigDividerBottom = new SSAsset('interface', 'bottomheader');
      bigDividerBottom.$el.css({
        display: 'table-cell'
      });
      bottom.append(bigDividerBottom.$el);
      header.addChild(topEnding);
      this.titles.$el.find('.openingTitlesHeader').css({
        'margin-top': '0'
      });
      buttonContainer = $('<div class="finalButtonContainer"/>');
      buttonTrailer = new SimpleButton("trailer", this.oz().locale.get('finalBtnTrailer'));
      buttonTrailer.on('click', this.onTrailerClick);
      buttonContainer.append(buttonTrailer.$el);
      buttonContainer.append('<br>');
      buttonReset = new SimpleButton("reset", this.oz().locale.get('finalBtnReset'));
      buttonReset.on('click', this.onResetClick);
      buttonContainer.append(buttonReset.$el);
      setTimeout(function() {
        var w;
        w = Math.max(buttonTrailer.$el.width(), buttonReset.$el.width());
        buttonTrailer.$el.width(w);
        return buttonReset.$el.width(w);
      }, 300);
      this.titles.$el.find('.openingTitlesCTA').addClass('openingTitlesCTAFinal');
      this.titles.$el.find('.openingTitlesCTA').css({
        'margin-top': '5px'
      });
      this.titles.$el.find('.openingTitlesCTA').find('.cta p').css({
        "cursor": "default"
      });
      contFluf = $('<div class="ctaFlufFinal"/>');
      fluf = new SSAsset('interface', 'pause_bottom');
      fluf.$el.css({
        'margin': '38px auto 0 auto'
      });
      contFluf.append(fluf.$el);
      this.titles.$el.find('.openingTitlesCTA').append(contFluf);
      this.titles.addChild(buttonContainer);
      header.$el.insertAfter(this.titles.$el.children()[0]);
      this.titles.fluorish.$el.remove();
      this.titles.diamond.$el.remove();
      return null;
    };

    LandingFinal.prototype.onResetClick = function() {
      Analytics.track('payoff_playagain');
      document.location.href = "http://" + document.location.host;
      return null;
    };

    LandingFinal.prototype.onTrailerClick = function() {
      Analytics.track('payoff_watch_trailer');
      this.oz().appView.area.showVideo();
      return null;
    };

    return LandingFinal;

  })(BaseLandingOpenings);

  LandingPause = (function(_super) {

    __extends(LandingPause, _super);

    function LandingPause() {
      this.dispose = __bind(this.dispose, this);
      this.init = __bind(this.init, this);      return LandingPause.__super__.constructor.apply(this, arguments);
    }

    LandingPause.prototype.particles = null;

    LandingPause.prototype.init = function() {
      this.particles = new Particles(0, 7, 40, {
        x: 0,
        y: $(window).innerHeight() / 3,
        w: $(window).innerWidth(),
        h: $(window).innerHeight() / 3
      });
      this.addChild(this.particles);
      this.titles = new OpeningTitles(this.oz().locale.get('politePause'), this.oz().locale.get('politePauseCTA'), this.dividers, true);
      this.addChild(this.titles);
      this.titles.$el.find('.openingTitlesCTA').addClass('openingTitlesCTAFinal');
      this.titles.$el.find('.openingTitlesCTA').find('.cta').css({
        'margin-top': '0px'
      });
      $(this.titles.$el.children()[0]).css({
        'margin-top': '-40px'
      });
      this.titles.$el.find('.openingTitlesCTA').css({
        'margin-top': '-40px'
      });
      this.titles.$el.find('.openingTitlesCTA').find('.left').css({
        'margin-top': '0px'
      });
      this.titles.$el.find('.openingTitlesCTA').find('.right').css({
        'margin-top': '0px'
      });
      this.titles.diamond.$el.css({
        'margin-top': '-35px'
      });
      this.mouseEnabled(this.me);
      return null;
    };

    LandingPause.prototype.dispose = function() {
      return null;
    };

    return LandingPause;

  })(BaseLandingOpenings);

  StaticOverlay = (function(_super) {

    __extends(StaticOverlay, _super);

    function StaticOverlay() {
      this.restoreAddress = __bind(this.restoreAddress, this);
      this.dispose = __bind(this.dispose, this);
      this.onClose = __bind(this.onClose, this);
      this.addCloseButton = __bind(this.addCloseButton, this);
      this.has = __bind(this.has, this);
      this.animateComplete = __bind(this.animateComplete, this);
      this.close = __bind(this.close, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.showPage = __bind(this.showPage, this);
      this.changePage = __bind(this.changePage, this);
      this.init = __bind(this.init, this);      return StaticOverlay.__super__.constructor.apply(this, arguments);
    }

    StaticOverlay.prototype.className = 'staticOverlay';

    StaticOverlay.prototype.page = null;

    StaticOverlay.prototype.lastPage = null;

    StaticOverlay.prototype.opened = false;

    StaticOverlay.prototype.pages = ["trailer", "credits", "opening"];

    StaticOverlay.prototype.area = null;

    StaticOverlay.prototype.currentPage = null;

    StaticOverlay.prototype.init = function() {
      this.$el.bind("click", this.close);
      this.hide();
      return null;
    };

    StaticOverlay.prototype.changePage = function(p, params) {
      var _this = this;
      this.empty();
      this.page = null;
      this.currentPage = p;
      this.$el.removeClass("stormImage");
      this.$el.css({
        "background-color": "rgba(0, 0, 0, .7)",
        "position": "absolute"
      });
      switch (p) {
        case 'credits':
          this.addCloseButton();
          this.oz().appView.wrapper.pause();
          this.oz().appView.pauseEnabled = false;
          $(".scene3d").css({
            "-webkit-filter": "blur(10px)"
          });
          $("#wrapper").css({
            "-webkit-filter": "blur(10px)"
          });
          if (this.oz().appView.scene !== "Final") {
            this.oz().appView.footer.mainMenu.hide(true, function() {
              _this.oz().appView.footer.mainMenu.$el.css({
                display: "none"
              });
              _this.oz().appView.footer.cr.show(true);
              _this.oz().appView.footer.mainMenu.showThis(_this.oz().appView.footer.mainMenu.openMenuBtn);
              return _this.oz().appView.footer.mainMenu.hideThis(_this.oz().appView.footer.mainMenu.buttonList);
            });
            this.oz().appView.logo.disable();
            this.oz().appView.showMap(false);
            this.oz().appView.footer.shareMenu.hide(true);
            $('body').unbind('mousemove');
          }
          this.page = new Credits;
          break;
        case 'pause':
          this.page = new LandingPause;
          break;
        case 'agree':
          this.$el.css({
            "background-color": "rgba(0, 0, 0, 0)",
            "position": "static"
          });
          this.$el.unbind("click", this.close);
          this.mouseEnabled(true);
          this.page = new LandingAgree(params.title, params.cta, params.divider, false, false);
          this.page.on('agreedEnter', this.close);
      }
      if (this.page == null) {
        return;
      }
      this.$el.css({
        display: 'block'
      });
      this.addChild(this.page);
      this.page.render(this.showPage);
      this.lastPage = p;
      return null;
    };

    StaticOverlay.prototype.showPage = function() {
      var time;
      time = this.page instanceof LandingPause ? 500 : 1000;
      this.opened = true;
      this.show(true, null, time);
      return null;
    };

    StaticOverlay.prototype.show = function(anim, callback, time, ease) {
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      if (time == null) {
        time = 400;
      }
      if (ease == null) {
        ease = "linear";
      }
      this.visible = true;
      if (!anim) {
        this.$el.css({
          opacity: 1
        });
      } else {
        this.$el.animate({
          opacity: 1
        }, time, ease, callback);
      }
      return null;
    };

    StaticOverlay.prototype.hide = function(anim, callback, time, ease) {
      var _this = this;
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      if (time == null) {
        time = 400;
      }
      if (ease == null) {
        ease = "linear";
      }
      this.visible = false;
      if (!anim) {
        this.$el.css({
          opacity: 0,
          display: 'none'
        });
      } else {
        this.$el.animate({
          opacity: 0
        }, time, ease, function() {
          _this.$el.css({
            display: 'none'
          });
          return typeof callback === "function" ? callback() : void 0;
        });
      }
      return null;
    };

    StaticOverlay.prototype.close = function(manual) {
      if (manual == null) {
        manual = false;
      }
      if (manual && this.oz().appView.scene !== "Final") {
        this.oz().appView.footer.mainMenu.$el.css({
          display: ""
        });
        this.oz().appView.footer.mainMenu.show(true);
        this.oz().appView.logo.enable();
        this.oz().appView.showMap();
      }
      if (this.currentPage === "credits") {
        $(".scene3d").css({
          "-webkit-filter": "blur(0px)"
        });
        $("#wrapper").css({
          "-webkit-filter": "blur(0px)"
        });
        this.oz().appView.pauseEnabled = true;
        this.oz().appView.wrapper.resume();
      }
      this.$el.animate({
        'opacity': '0'
      }, this.animateComplete);
      return null;
    };

    StaticOverlay.prototype.animateComplete = function() {
      this.restoreAddress();
      this.opened = false;
      this.page = null;
      this.currentPage = null;
      this.$el.css({
        'display': 'none'
      });
      this.trigger('staticPageClose');
      return null;
    };

    StaticOverlay.prototype.has = function(area) {
      return this.pages.indexOf(area);
    };

    StaticOverlay.prototype.addCloseButton = function() {
      var icon;
      this.closeBtn = new Abstract().setElement("<div class='sceneClose'></div>");
      this.closeBtn.$el.addClass('button_alpha_enabled');
      this.closeBtn.dispose = function() {
        return null;
      };
      this.closeBtn.$el.bind("click", this.onClose);
      this.addChild(this.closeBtn);
      icon = new SSAsset("interface", "button_close");
      this.closeBtn.addChild(icon);
      return null;
    };

    StaticOverlay.prototype.onClose = function() {
      this.close(true);
      return null;
    };

    StaticOverlay.prototype.dispose = function() {
      return null;
    };

    StaticOverlay.prototype.restoreAddress = function() {
      var url;
      url = this.oz().router.area === this.lastPage || this.has(this.oz().router.area) >= 0 ? "" : this.oz().router.sub ? this.oz().router.area + "/" + this.oz().router.sub : this.oz().router.area;
      this.oz().router.navigate(url, {
        trigger: false
      });
      return null;
    };

    return StaticOverlay;

  })(Abstract);

  Wrapper = (function(_super) {

    __extends(Wrapper, _super);

    function Wrapper() {
      return Wrapper.__super__.constructor.apply(this, arguments);
    }

    Wrapper.prototype.tagName = 'div';

    Wrapper.prototype.id = 'wrapper';

    return Wrapper;

  })(Abstract);

  Circle = (function(_super) {

    __extends(Circle, _super);

    function Circle() {
      this.setProgress = __bind(this.setProgress, this);
      this.draw = __bind(this.draw, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return Circle.__super__.constructor.apply(this, arguments);
    }

    Circle.prototype.tagName = "canvas";

    Circle.prototype.className = "circularProgress";

    Circle.prototype.canvas = null;

    Circle.prototype.context = null;

    Circle.prototype.radius = 0;

    Circle.prototype.startAngle = 0;

    Circle.prototype.endAngle = 360;

    Circle.prototype.stroke = 5;

    Circle.prototype.progress = 0;

    Circle.prototype.cClockwise = false;

    Circle.prototype.strokeColor = "#FFFFFF";

    Circle.prototype.initialize = function(params) {
      this.radius = params.radius;
      this.startAngle = params.startAngle;
      this.endAngle = params.endAngle;
      this.progress = params.progress;
      this.stroke = params.stroke;
      this.strokeColor = params.strokeColor != null ? params.strokeColor : "#FFFFFF";
      this.cClockwise = params.cClockwise != null ? params.cClockwise : false;
      Circle.__super__.initialize.call(this);
      return null;
    };

    Circle.prototype.init = function() {
      this.canvas = this.$el[0];
      this.context = this.canvas.getContext("2d");
      this.canvas.width = (this.radius * 2) + this.stroke;
      this.canvas.height = (this.radius * 2) + this.stroke;
      this.draw();
      return null;
    };

    Circle.prototype.draw = function() {
      var eAngle, r, sAngle, x, y;
      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
      x = this.canvas.width / 2;
      y = this.canvas.height / 2;
      r = this.radius;
      sAngle = this.startAngle;
      eAngle = (this.progress * this.endAngle / 100) + this.startAngle;
      this.context.beginPath();
      this.context.arc(x, y, r, sAngle * Math.PI / 180, eAngle * Math.PI / 180, this.cClockwise);
      this.context.lineWidth = this.stroke;
      this.context.strokeStyle = this.strokeColor;
      this.context.stroke();
      return null;
    };

    Circle.prototype.setProgress = function(_progress, animate, duration) {
      var from, to,
        _this = this;
      if (animate == null) {
        animate = false;
      }
      if (duration == null) {
        duration = 1000;
      }
      if (!animate) {
        this.progress = _progress;
        this.draw();
      } else {
        from = {
          progress: this.progress
        };
        to = {
          progress: _progress
        };
        jQuery(from).animate(to, {
          duration: duration,
          step: function() {
            _this.progress = from.progress;
            return _this.draw();
          }
        });
      }
      return null;
    };

    return Circle;

  })(Abstract);

  Slider = (function(_super) {

    __extends(Slider, _super);

    function Slider() {
      this.dispose = __bind(this.dispose, this);
      this.enabled = __bind(this.enabled, this);
      this.updateGUI = __bind(this.updateGUI, this);
      this.setProgress = __bind(this.setProgress, this);
      this.updateProgress = __bind(this.updateProgress, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.onMouseUp = __bind(this.onMouseUp, this);
      this.onMouseDown = __bind(this.onMouseDown, this);
      this.onMouseMove = __bind(this.onMouseMove, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return Slider.__super__.constructor.apply(this, arguments);
    }

    Slider.prototype.className = "slider";

    Slider.prototype.tagName = "div";

    Slider.prototype.foreground = null;

    Slider.prototype.hit = null;

    Slider.prototype.progress = null;

    Slider.prototype.handler = null;

    Slider.prototype.assetID = null;

    Slider.prototype.dragging = false;

    Slider.prototype.mouseCoord = {};

    Slider.prototype.percent = 0;

    Slider.prototype.initialize = function(_assetID) {
      this.assetID = _assetID;
      Slider.__super__.initialize.call(this);
      return null;
    };

    Slider.prototype.init = function() {
      this.foreground = $("<div class='foreground'></div>");
      this.$el.prepend(this.foreground);
      this.progress = $("<div class='progress'></div>");
      this.$el.append(this.progress);
      this.hit = $("<div class='hit'></div>");
      this.$el.append(this.hit);
      this.handler = new SSAsset("interface", this.assetID);
      this.handler.$el.addClass("handler");
      this.addChild(this.handler);
      this.hit.bind("mousedown", this.onMouseDown);
      $(document).bind("mousemove", this.onMouseMove);
      return null;
    };

    Slider.prototype.onMouseMove = function(e) {
      this.mouseCoord.x = Math.round(e.pageX);
      this.mouseCoord.y = Math.round(e.pageY);
      return null;
    };

    Slider.prototype.onMouseDown = function(e) {
      $("body").bind("mouseup", this.onMouseUp);
      this.dragging = true;
      return null;
    };

    Slider.prototype.onMouseUp = function(e) {
      $("body").unbind("mouseup");
      this.dragging = false;
      return null;
    };

    Slider.prototype.onEnterFrame = function() {
      var position;
      if (this.dragging) {
        position = Math.round(this.mouseCoord.x - this.hit.offset().left);
        position = position > 0 ? position : 0;
        this.updateGUI(position);
      }
      return null;
    };

    Slider.prototype.updateProgress = function(position) {
      this.percent = Math.round(position * 100 / this.hit.width());
      this.trigger("SLIDER_CHANGED", this.percent);
      return null;
    };

    Slider.prototype.setProgress = function(percent) {
      var position;
      position = Math.round(percent * this.hit.width() / 100);
      this.updateGUI(position);
      return null;
    };

    Slider.prototype.updateGUI = function(position) {
      var handlerPosition;
      position = position > this.hit.width() ? this.hit.width() : position;
      this.progress.css({
        width: "" + position + "px"
      });
      handlerPosition = position - (this.handler.$el.width() / 2) - 4;
      handlerPosition = handlerPosition < 0 ? 0 : handlerPosition;
      this.handler.$el.css({
        left: "" + handlerPosition + "px"
      });
      this.updateProgress(position);
      return null;
    };

    Slider.prototype.enabled = function(state) {
      if (state) {
        this.$el.css({
          "pointer-events": "auto"
        });
        this.hit.bind("mousedown", this.onMouseDown);
        this.$el.stop().animate({
          opacity: 1
        });
      } else {
        this.$el.css({
          "pointer-events": "none"
        });
        this.hit.unbind("mousedown", this.onMouseDown);
        this.$el.stop().animate({
          opacity: 0.5
        });
      }
      return null;
    };

    Slider.prototype.dispose = function() {
      $(document).unbind("mousemove", this.onMouseMove);
      this.hit.unbind("mousedown", this.onMouseDown);
      return null;
    };

    return Slider;

  })(Abstract);

  AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      this.onAgreed = __bind(this.onAgreed, this);
      this.showMap = __bind(this.showMap, this);
      this.addChapter = __bind(this.addChapter, this);
      this.addFinal = __bind(this.addFinal, this);
      this.addTermsScreen = __bind(this.addTermsScreen, this);
      this.hideSubLoader = __bind(this.hideSubLoader, this);
      this.onWorldLoaded = __bind(this.onWorldLoaded, this);
      this.onWorldProgress = __bind(this.onWorldProgress, this);
      this.removeLoading = __bind(this.removeLoading, this);
      this.onCameraReady = __bind(this.onCameraReady, this);
      this.isDeepLink = __bind(this.isDeepLink, this);
      this.checkSub = __bind(this.checkSub, this);
      this.getCurrentScene = __bind(this.getCurrentScene, this);
      this.addNewView = __bind(this.addNewView, this);
      this.changeMapState = __bind(this.changeMapState, this);
      this.hideArea = __bind(this.hideArea, this);
      this.changeView = __bind(this.changeView, this);
      this.changeOpening = __bind(this.changeOpening, this);
      this.looseFocus = __bind(this.looseFocus, this);
      this.startFocus = __bind(this.startFocus, this);
      this.listenToEvents = __bind(this.listenToEvents, this);
      this.onAssetsProgress = __bind(this.onAssetsProgress, this);
      this.onAssetsComplete = __bind(this.onAssetsComplete, this);
      this.render = __bind(this.render, this);      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.footer = null;

    AppView.prototype.wrapper = null;

    AppView.prototype.area = null;

    AppView.prototype.scene = null;

    AppView.prototype.containerSubArea = null;

    AppView.prototype.subArea = null;

    AppView.prototype.map = null;

    AppView.prototype.logo = null;

    AppView.prototype["static"] = null;

    AppView.prototype.loaded = null;

    AppView.prototype.currentArea = null;

    AppView.prototype.currentSub = null;

    AppView.prototype.loading = null;

    AppView.prototype.renderCanvas3D = null;

    AppView.prototype.zoetropeTexture = null;

    AppView.prototype.textureQuality = null;

    AppView.prototype.displayQuality = null;

    AppView.prototype.ddsSupported = true;

    AppView.prototype.dofEnabled = false;

    AppView.prototype.debugMode = false;

    AppView.prototype.remoteSounds = false;

    AppView.prototype.showInterface = null;

    AppView.prototype.enablePrefetching = false;

    AppView.prototype.pauseEnabled = true;

    AppView.prototype.areaLoading = false;

    AppView.prototype.areaLoadingPercent = 0;

    AppView.prototype.firstTime = true;

    AppView.prototype.chapterInstructionsShowed = false;

    AppView.prototype.deepLink = null;

    AppView.prototype.secondaryLoad = null;

    AppView.prototype.loadingSecondary = true;

    AppView.prototype.secLoadingProgress = null;

    AppView.prototype.render = function() {
      var script;
      this.deepLink = ['', 'cutout', 'music', 'zoetrope', 'storm'];
      this.setElement($('body'));
      this.renderCanvas3D = document.createElement("canvas");
      this.renderCanvas3D.className = "scene3d";
      this.addChild(this.renderCanvas3D);
      this.oz().baseAssets.on("COMPLETE", this.onAssetsComplete);
      this.oz().baseAssets.on("PROGRESS", this.onAssetsProgress);
      this.oz().baseAssets.loadBatch(['secondHomeAssets']);
      /*
              paramTextureQuality = QueryString.get("quality")
              if paramTextureQuality == "low"
                  @textureQuality = "low"
              else
                  @textureQuality = "med"
      */

      /*
              paramDisplayQuality = QueryString.get("display")
              if paramDisplayQuality == "low"
                  @displayQuality = "low"
              else if paramDisplayQuality == "med"
                  @displayQuality = "med"
              else
                  @displayQuality = "hi"
      */

      // script = document.createElement('script');
      // script.src = 'http://j.maxmind.com/app/country.js';
      // script.charset = 'ISO-8859-1';
      // script.type = "text/javascript";
      // document.getElementsByTagName('head')[0].appendChild(script);
      this.textureQuality = (window || document).textureQuality;
      this.displayQuality = (window || document).displayQuality;
      this.dofEnabled = (window || document).dof;
      this.debugMode = QueryString.get("debug") === "on" ? true : false;
      this.remoteSounds = QueryString.get("remotesounds") === "on" ? true : false;
      this.showInterface = QueryString.get("interface") !== "off" ? true : false;
      this.enablePrefetching = QueryString.get("prefetching") === "on" ? true : false;
      SoundController.active = true;
      if (QueryString.get("sound") === "off") {
        SoundController.active = false;
      }
      this.subLoader = new SubLoader;
      this.addChild(this.subLoader, true);
      this.wrapper = new Wrapper;
      this.addChild(this.wrapper);
      this.share = new ShareScene;
      this["static"] = new StaticOverlay;
      this.footer = new Footer;
      this.map = new Map;
      this.logo = new Logo;
      this.showMap(false);
      this.addChild(this["static"]);
      if (this.showInterface) {
        this.addChild(this.share);
        this.addChild(this.footer);
        this.addChild(this.map);
        this.addChild(this.logo);
        if (this.debugMode) {
          this.addChild(this.oz().stats.domElement);
        }
      }
      this.listenToEvents();
      $('#polite').remove();
      return this;
    };

    AppView.prototype.onAssetsComplete = function(event) {
      this.loadingSecondary = false;
      this.oz().baseAssets.off("COMPLETE", this.onAssetsComplete);
      return this.oz().baseAssets.off("PROGRESS", this.onAssetsProgress);
    };

    AppView.prototype.onAssetsProgress = function(event) {
      return this.secLoadingProgress = event.loaded;
    };

    AppView.prototype.listenToEvents = function() {
      return $(window).resize(this.onResize);
    };

    AppView.prototype.startFocus = function() {
      var _ref;
      Analytics.track('resume');
      if (this["static"].page instanceof LandingPause) {
        this["static"].close();
      }
      $(window).bind('blur', this.looseFocus);
      $(window).unbind('focus', this.startFocus);
      this["static"].off('staticPageClose', this.startFocus);
      $(".scene3d").css({
        "-webkit-filter": "blur(0px)"
      });
      $("#wrapper").css({
        "-webkit-filter": "blur(0px)"
      });
      this.changeMapState();
      this.wrapper.resume();
      SoundController.resume();
      if (!((_ref = this.subArea) != null ? _ref.instructions : void 0) && !this.subLoader.visible && this.scene !== "Final" && this["static"].currentPage !== "credits" && this.currentArea !== "storm") {
        this.showMap();
        this.footer.mainMenu.show(true);
        this.footer.cr.show(true);
        return this.logo.show(true);
      } else {
        this.footer.cr.show(true);
        return this.logo.show(true);
      }
    };

    AppView.prototype.looseFocus = function() {
      var _ref;
      Analytics.track('pause');
      if (!((_ref = this.subArea) != null ? (_ref.instructions.active ? _ref.instructions.active : null) : void 0) && this.pauseEnabled) {
        $(window).unbind('blur', this.looseFocus);
        $(window).bind('focus', this.startFocus);
        $(".scene3d").css({
          "-webkit-filter": "blur(10px)"
        });
        $("#wrapper").css({
          "-webkit-filter": "blur(10px)"
        });
        SoundController.paused();
        if (!this["static"].opened) {
          this.wrapper.pause();
          this.changeOpening('pause');
          this.showMap(false);
          this.footer.mainMenu.hide(true);
          this.footer.cr.hide(true);
          return this.logo.hide(true);
        }
      }
    };

    AppView.prototype.changeOpening = function(type, params) {
      return this["static"].changePage(type, params);
    };

    AppView.prototype.changeView = function(area, sub) {
      var _this = this;
      if (sub == null) {
        sub = null;
      }
      if (this["static"].has(area) >= 0) {
        this["static"].changePage(area);
        this.addNewView("");
        return;
      }
      if (!this["static"].opened) {
        this.addNewView(area, sub);
        return;
      }
      this["static"].on('staticPageClose', function() {
        return _this.addNewView(area, sub);
      });
      return this["static"].close();
    };

    AppView.prototype.hideArea = function(callback) {
      var _this = this;
      return this.area.hide(true, function() {
        return typeof callback === "function" ? callback() : void 0;
      }, 600);
    };

    AppView.prototype.changeMapState = function() {
      return this.map.changeMenuArea(this.scene.toLowerCase());
    };

    AppView.prototype.addNewView = function(area, noLoading) {
      var areaClass, currentScene,
        _this = this;
      if (noLoading == null) {
        noLoading = false;
      }
      this["static"].off();
      if (this.subArea) {
        this.subArea.hide(true, function() {
          _this.oz().appView.footer.mainMenu.$el.css({
            display: ""
          });
          _this.oz().appView.logo.enable();
          _this.footer.mainMenu.show(true);
          _this.wrapper.remove(_this.subArea);
          _this.wrapper.remove(_this.containerSubArea);
          return _this.subArea = null;
        });
      }
      if (area !== this.currentArea) {
        this.currentArea = area;
        if (!this.loaded) {
          this.loading = new Loading;
        }
        currentScene = this.getCurrentScene(area);
        if (currentScene !== this.scene) {
          if (this.loaded) {
            if (currentScene === "Final") {
              this.subLoader.visible = true;
            } else {
              this.subLoader.show();
            }
          }
          this.scene = currentScene;
          if (this.area) {
            this.wrapper.remove(this.area);
          }
          areaClass = eval(this.scene);
          if (areaClass == null) {
            this.scene = currentScene = "Carnival";
            areaClass = eval(this.scene);
          }
          this.area = new areaClass();
          this.area.hide();
          this.wrapper.$el.empty();
          this.area.render();
          if (this.loading) {
            Analytics.track('start_loading');
            SoundController.init(this.remoteSounds);
            this.areaLoading = true;
            this.wrapper.addChild(this.loading);
            this.area.on('onWorldProgress', this.onWorldProgress);
            this.area.on('onWorldLoaded', this.onWorldLoaded);
            this.logo.disable();
          } else if (this.subLoader.visible) {
            this.firstTime = false;
            this.pauseEnabled = false;
            SoundController.send("loading_start");
            if (currentScene === "Final") {
              this.addFinal();
            } else {
              this.areaLoading = true;
              this.area.on('onWorldProgress', this.onWorldProgress);
              this.area.on('onWorldLoaded', this.onWorldLoaded);
            }
          }
        } else {
          this.checkSub();
        }
      }
      this.changeMapState();
      return null;
    };

    AppView.prototype.getCurrentScene = function(area) {
      switch (area) {
        case "":
          return (this.scene !== null ? this.scene : "Carnival");
        case "cutout":
        case "music":
        case "carnival":
          return "Carnival";
        case "zoetrope":
        case "carnival2":
          return "Carnival2";
        case "carnival3":
          return "Carnival3";
        case "storm":
          return "Stormtest";
        case "final":
          return "Final";
      }
    };

    AppView.prototype.checkSub = function() {
      var v, _ref;
      Analytics.track('finish_loading');
      SoundController.send("loading_end");
      switch (this.scene.toLowerCase()) {
        case "carnival":
          Analytics.track('scene3D_1_enterPage');
          break;
        case "carnival2":
          Analytics.track('scene3D_2_enterPage');
          break;
        case "storm":
        case "carnival3":
          Analytics.track('scene3D_3_enterPage');
          break;
        case "final":
          Analytics.track('payoff_enter_page');
      }
      if (this.currentArea) {
        v = this.isDeepLink(this.currentArea);
        if (v !== "") {
          return this.area.changeView(v);
        }
      } else {
        if (!this.chapterInstructionsShowed) {
          this.chapterInstructionsShowed = true;
          if ((_ref = this.area.chapterInstructions) != null) {
            _ref.activate();
          }
        }
        return this.area.changeView(null);
      }
    };

    AppView.prototype.isDeepLink = function(area) {
      if (this.deepLink.indexOf(area) > -1) {
        return area;
      }
      return "";
    };

    AppView.prototype.onCameraReady = function() {
      switch (this.currentArea) {
        case "cutout":
          this.subArea = new Cutout;
          break;
        case "music":
          this.subArea = new MusicBox;
          break;
        case "zoetrope":
          this.subArea = new Zoetrope;
          break;
        case "storm":
          this.subArea = new StormInstructions;
          break;
        default:
          this.subArea = null;
      }
      if (this.subArea) {
        this.containerSubArea = new Abstract().setElement("<div></div>");
        this.containerSubArea.$el.css({
          "display": "table",
          "width": "100%",
          "height": "100%",
          "position": 'absolute'
        });
        this.containerSubArea.dispose = function() {
          return null;
        };
        this.wrapper.addChild(this.containerSubArea);
        return this.containerSubArea.addChild(this.subArea);
      }
    };

    AppView.prototype.removeLoading = function() {
      this.wrapper.remove(this.loading);
      return this.loading = null;
    };

    AppView.prototype.onWorldProgress = function(percentage) {
      var perc;
      this.areaLoadingPercent = Math.round(percentage * 100);
      perc = this.areaLoadingPercent;
      if (this.subLoader.visible) {
        return this.subLoader.update(perc);
      } else {
        return this.loading.update(perc);
      }
    };

    AppView.prototype.onWorldLoaded = function(event) {
      var _base;
      this.areaLoadingPercent = 0;
      this.areaLoading = false;
      this.pauseEnabled = true;
      if (typeof (_base = this.area).cleanloading === "function") {
        _base.cleanloading();
      }
      this.area.off('onWorldProgress', this.onWorldProgress);
      this.area.off('onWorldLoaded', this.onWorldLoaded);
      if (this.loading) {
        this.wrapper.addChild(this.area);
        this["static"].on('staticPageClose', this.onAgreed);
        if (this.loading) {
          this.loading.update(99);
        }
        return this.loading.onAnimateOut(!this.oz().agreed ? this.addTermsScreen : this.addChapter);
      } else {
        if (!this.oz().agreed) {
          return this.addTermsScreen();
        } else {
          this.subLoader.on("END_LOADING", this.hideSubLoader);
          return this.subLoader.hideCard();
        }
      }
    };

    AppView.prototype.hideSubLoader = function() {
      this.subLoader.off("END_LOADING", this.hideSubLoader);
      this.wrapper.addChild(this.area);
      this.addChapter();
      return setTimeout(this.subLoader.hide, 500);
    };

    AppView.prototype.addTermsScreen = function() {
      Analytics.track(null, "Google_OZ_landing page");
      return this.oz().appView.changeOpening('agree', {
        title: "homeTitle",
        cta: "homeSub"
      });
    };

    AppView.prototype.addFinal = function() {
      this.wrapper.addChild(this.area);
      this.logo.disable();
      this.footer.shareMenu.enableSound();
      SoundController.send("end_scene_start");
      this.removeLoading();
      this.loaded = true;
      return this.area.show(true);
    };

    AppView.prototype.addChapter = function() {
      var _this = this;
      this.logo.enable();
      this.footer.shareMenu.enableSound();
      switch (this.scene.toLowerCase()) {
        case 'final':
          SoundController.send("end_scene_start");
          this.removeLoading();
          this.loaded = true;
          this.area.show(true);
          return;
      }
      this.footer.show(true);
      this.footer.mainMenu.showThis(this.footer.mainMenu.openMenuBtn);
      this.logo.hideGoogleLogos();
      this.footer.showCC();
      this.removeLoading();
      this.loaded = true;
      return this.area.show(true, function() {
        _this.checkSub();
        return _this.showMap();
      }, 700);
    };

    AppView.prototype.showMap = function(val) {
      if (val == null) {
        val = true;
      }
      if (val === false) {
        this.map.hide(true);
        return;
      }
      switch (this.scene.toLowerCase()) {
        case 'carnival':
        case 'carnival2':
        case 'carnival3':
        case '':
        case null:
          return this.map.show(true);
      }
    };

    AppView.prototype.onAgreed = function() {
      var _this = this;
      this["static"].off('staticPageClose', this.onAgreed);
      return this.loading.hide(true, function() {
        _this.addChapter();
        _this.oz().agreed = true;
        return $(window).bind('blur', _this.looseFocus);
      });
    };

    AppView.prototype.showMenu = function() {
      var _ref;
      if ((_ref = this.map) != null) {
        _ref.showMenu();
      }
      return null;
    };

    return AppView;

  })(Abstract);

  $(function() {
    var addStats, iniLocale, initApp, initEnterFrame, initEnterFrameContinues, initObjects, loadedFiles, onBaseAssetsComplete, view,
      _this = this;
    _.templateSettings = {
      interpolate: /\{\{(.+?)\}\}/g
    };
    view = window || document;
    window.URL = window.URL || window.webkitURL;
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    loadedFiles = null;
    onBaseAssetsComplete = function(event) {
      view.oz.baseAssets.off("COMPLETE", onBaseAssetsComplete);
      iniLocale();
      return null;
    };
    iniLocale = function() {
      Analytics.start();
      view.oz.locale = new Locale;
      view.oz.locale.on('complete', initObjects);
      view.oz.localeTexture = new LocalisedTexture;
      return null;
    };
    initObjects = function() {
      view.oz.locale.off('complete', initObjects);
      view.oz.templates = new Templates(view.oz.baseAssets.get('templates').result);
      view.oz.cam = new WebCam;
      view.oz.appView = new AppView;
      view.oz.router = new Router;
      view.oz.agreed = false;
      initApp();
      return null;
    };
    initApp = function() {
      TweenLite.ticker.useRAF(false);
      view.oz.appView.render();
      view.oz.router.on(Router.EVENT_HASH_CHANGED, view.oz.appView.changeView);
      view.oz.router.start();
      initEnterFrame();
      addStats();
      return null;
    };
    initEnterFrameContinues = function() {
      return window.requestAnimationFrame(initEnterFrame);
    };
    initEnterFrame = function() {
      view.oz.stats.begin();
      view.oz.appView.onEnterFrame();
      view.oz.stats.end();
      window.requestAnimationFrame(initEnterFrame);
    };
    addStats = function() {
      view.oz.stats.domElement.style.position = 'absolute';
      view.oz.stats.domElement.style.top = '0px';
      return null;
    };
    view.initApp = function() {
      view.oz = {
        BASE_PATH: view.location.origin + "/",
        ss: new CollectionSpriteSheets,
        baseAssets: new BaseAssets,
        stats: new Stats,
        touch: Modernizr.touch
      };
      view.oz.baseAssets.on("COMPLETE", onBaseAssetsComplete);
      view.oz.baseAssets.init(['homeAssets']);
      return null;
    };
    view.textureQuality = window.textureQuality;
    view.displayQuality = window.displayQuality;
    view.dof = window.dof;
    $('body').bind('touchmove', function(event) {
      event.preventDefault();
      return null;
    });
    return view.initApp();
  });

}).call(this);
